<!-- This comment will put IE 6, 7 and 8 in quirks mode -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Apache Portable Runtime: apr_poll.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.6.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <img id="MSearchSelect" src="search/search.png"
             onmouseover="return searchBox.OnSearchSelectShow()"
             onmouseout="return searchBox.OnSearchSelectHide()"
             alt=""/>
        <input type="text" id="MSearchField" value="Search" accesskey="S"
             onfocus="searchBox.OnSearchFieldFocus(true)" 
             onblur="searchBox.OnSearchFieldFocus(false)" 
             onkeyup="searchBox.OnSearchFieldChange(event)"/>
        <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<h1>apr_poll.h</h1><a href="apr__poll_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Licensed to the Apache Software Foundation (ASF) under one or more</span>
<a name="l00002"></a>00002 <span class="comment"> * contributor license agreements.  See the NOTICE file distributed with</span>
<a name="l00003"></a>00003 <span class="comment"> * this work for additional information regarding copyright ownership.</span>
<a name="l00004"></a>00004 <span class="comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</span>
<a name="l00005"></a>00005 <span class="comment"> * (the &quot;License&quot;); you may not use this file except in compliance with</span>
<a name="l00006"></a>00006 <span class="comment"> * the License.  You may obtain a copy of the License at</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00009"></a>00009 <span class="comment"> *</span>
<a name="l00010"></a>00010 <span class="comment"> * Unless required by applicable law or agreed to in writing, software</span>
<a name="l00011"></a>00011 <span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00013"></a>00013 <span class="comment"> * See the License for the specific language governing permissions and</span>
<a name="l00014"></a>00014 <span class="comment"> * limitations under the License.</span>
<a name="l00015"></a>00015 <span class="comment"> */</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#ifndef APR_POLL_H</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span><span class="preprocessor">#define APR_POLL_H</span>
<a name="l00019"></a>00019 <span class="preprocessor"></span><span class="comment">/**</span>
<a name="l00020"></a>00020 <span class="comment"> * @file apr_poll.h</span>
<a name="l00021"></a>00021 <span class="comment"> * @brief APR Poll interface</span>
<a name="l00022"></a>00022 <span class="comment"> */</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;<a class="code" href="apr_8h.html" title="APR Platform Definitions.">apr.h</a>&quot;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="apr__pools_8h.html" title="APR memory allocation.">apr_pools.h</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="apr__errno_8h.html" title="APR Error Codes.">apr_errno.h</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="apr__inherit_8h.html" title="APR File Handle Inheritance Helpers.">apr_inherit.h</a>&quot;</span> 
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="apr__file__io_8h.html" title="APR File I/O Handling.">apr_file_io.h</a>&quot;</span> 
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="apr__network__io_8h.html" title="APR Network library.">apr_network_io.h</a>&quot;</span> 
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#if APR_HAVE_NETINET_IN_H</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">#include &lt;netinet/in.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00036"></a>00036 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l00037"></a>00037 <span class="comment"></span>
<a name="l00038"></a>00038 <span class="comment">/**</span>
<a name="l00039"></a>00039 <span class="comment"> * @defgroup apr_poll Poll Routines</span>
<a name="l00040"></a>00040 <span class="comment"> * @ingroup APR </span>
<a name="l00041"></a>00041 <span class="comment"> * @{</span>
<a name="l00042"></a>00042 <span class="comment"> */</span>
<a name="l00043"></a>00043 <span class="comment"></span>
<a name="l00044"></a>00044 <span class="comment">/**</span>
<a name="l00045"></a>00045 <span class="comment"> * Poll options</span>
<a name="l00046"></a>00046 <span class="comment"> */</span>
<a name="l00047"></a><a class="code" href="group__apr__poll.html#ga746222e6b858bc2fc77328d59f78e788">00047</a> <span class="preprocessor">#define APR_POLLIN    0x001     </span><span class="comment">/**&lt; Can read without blocking */</span>
<a name="l00048"></a><a class="code" href="group__apr__poll.html#ga196c38e1914077c4c9a0cf3ce87f1b9c">00048</a> <span class="preprocessor">#define APR_POLLPRI   0x002     </span><span class="comment">/**&lt; Priority data available */</span>
<a name="l00049"></a><a class="code" href="group__apr__poll.html#ga6fb703db1d11e2c5f66d8c6146e56053">00049</a> <span class="preprocessor">#define APR_POLLOUT   0x004     </span><span class="comment">/**&lt; Can write without blocking */</span>
<a name="l00050"></a><a class="code" href="group__apr__poll.html#ga6f5a72fd9cf3f5dcf174acce0b4b77ee">00050</a> <span class="preprocessor">#define APR_POLLERR   0x010     </span><span class="comment">/**&lt; Pending error */</span>
<a name="l00051"></a><a class="code" href="group__apr__poll.html#gace76603c4fa4b56f8b5977ff1ceb6f3b">00051</a> <span class="preprocessor">#define APR_POLLHUP   0x020     </span><span class="comment">/**&lt; Hangup occurred */</span>
<a name="l00052"></a><a class="code" href="group__apr__poll.html#ga132da215e207d4685fb467cc64a73f1b">00052</a> <span class="preprocessor">#define APR_POLLNVAL  0x040     </span><span class="comment">/**&lt; Descriptior invalid */</span>
<a name="l00053"></a>00053 <span class="comment"></span>
<a name="l00054"></a>00054 <span class="comment">/**</span>
<a name="l00055"></a>00055 <span class="comment"> * Pollset Flags</span>
<a name="l00056"></a>00056 <span class="comment"> */</span>
<a name="l00057"></a><a class="code" href="group__apr__poll.html#gabdfaccfd394c847f692351dee2e5ef7f">00057</a> <span class="preprocessor">#define APR_POLLSET_THREADSAFE 0x001 </span><span class="comment">/**&lt; Adding or Removing a Descriptor is thread safe */</span>
<a name="l00058"></a><a class="code" href="group__apr__poll.html#ga0febaf4378d2705bf1256b22fe8dfd24">00058</a> <span class="preprocessor">#define APR_POLLSET_NOCOPY     0x002 </span><span class="comment">/**&lt; Descriptors passed to apr_pollset_create() are not copied */</span>
<a name="l00059"></a>00059 <span class="comment"></span>
<a name="l00060"></a>00060 <span class="comment">/** Used in apr_pollfd_t to determine what the apr_descriptor is */</span>
<a name="l00061"></a><a class="code" href="group__apr__poll.html#ga0a8549d84c1721788b102a4cc8b4b0f0">00061</a> <span class="keyword">typedef</span> <span class="keyword">enum</span> { 
<a name="l00062"></a><a class="code" href="group__apr__poll.html#gga0a8549d84c1721788b102a4cc8b4b0f0aeb85f43492052bf0788d31f6dd85a222">00062</a>     <a class="code" href="group__apr__poll.html#gga0a8549d84c1721788b102a4cc8b4b0f0aeb85f43492052bf0788d31f6dd85a222">APR_NO_DESC</a>,                <span class="comment">/**&lt; nothing here */</span>
<a name="l00063"></a><a class="code" href="group__apr__poll.html#gga0a8549d84c1721788b102a4cc8b4b0f0a3629c5b3166fde91792f2f913fbd72f0">00063</a>     <a class="code" href="group__apr__poll.html#gga0a8549d84c1721788b102a4cc8b4b0f0a3629c5b3166fde91792f2f913fbd72f0">APR_POLL_SOCKET</a>,            <span class="comment">/**&lt; descriptor refers to a socket */</span>
<a name="l00064"></a><a class="code" href="group__apr__poll.html#gga0a8549d84c1721788b102a4cc8b4b0f0a8351d461bf66b706232962fd02e84202">00064</a>     <a class="code" href="group__apr__poll.html#gga0a8549d84c1721788b102a4cc8b4b0f0a8351d461bf66b706232962fd02e84202">APR_POLL_FILE</a>,              <span class="comment">/**&lt; descriptor refers to a file */</span>
<a name="l00065"></a><a class="code" href="group__apr__poll.html#gga0a8549d84c1721788b102a4cc8b4b0f0a413b387c7fe1ca7b096d46dfd9942fe5">00065</a>     <a class="code" href="group__apr__poll.html#gga0a8549d84c1721788b102a4cc8b4b0f0a413b387c7fe1ca7b096d46dfd9942fe5">APR_POLL_LASTDESC</a>           <span class="comment">/**&lt; @deprecated descriptor is the last one in the list */</span>
<a name="l00066"></a>00066 } <a class="code" href="group__apr__poll.html#ga0a8549d84c1721788b102a4cc8b4b0f0">apr_datatype_e</a> ;
<a name="l00067"></a>00067 <span class="comment"></span>
<a name="l00068"></a>00068 <span class="comment">/** Union of either an APR file or socket. */</span>
<a name="l00069"></a><a class="code" href="unionapr__descriptor.html">00069</a> <span class="keyword">typedef</span> <span class="keyword">union </span>{
<a name="l00070"></a><a class="code" href="unionapr__descriptor.html#a69d605f2bb33b05ceedb3d95b744ca7e">00070</a>     <a class="code" href="group__apr__file__io.html#gaa46e4763ac375ea3c7a43ba6f6099e22">apr_file_t</a> *f;              <span class="comment">/**&lt; file */</span>
<a name="l00071"></a><a class="code" href="unionapr__descriptor.html#a39a15be8be084afadfa173810b346f6c">00071</a>     <a class="code" href="group__apr__network__io.html#ga49262b223e7434746e1f1737659aa2c3">apr_socket_t</a> *s;            <span class="comment">/**&lt; socket */</span>
<a name="l00072"></a>00072 } <a class="code" href="unionapr__descriptor.html">apr_descriptor</a>;
<a name="l00073"></a>00073 <span class="comment"></span>
<a name="l00074"></a>00074 <span class="comment">/** @see apr_pollfd_t */</span>
<a name="l00075"></a><a class="code" href="group__apr__poll.html#ga0c89b184cbe2337e44207f1ad245129b">00075</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structapr__pollfd__t.html">apr_pollfd_t</a> <a class="code" href="structapr__pollfd__t.html">apr_pollfd_t</a>;
<a name="l00076"></a>00076 <span class="comment"></span>
<a name="l00077"></a>00077 <span class="comment">/** Poll descriptor set. */</span>
<a name="l00078"></a><a class="code" href="structapr__pollfd__t.html">00078</a> <span class="keyword">struct </span><a class="code" href="structapr__pollfd__t.html">apr_pollfd_t</a> {
<a name="l00079"></a><a class="code" href="structapr__pollfd__t.html#adae68586ed671472590efe8770de38cc">00079</a>     <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *<a class="code" href="structapr__pollfd__t.html#adae68586ed671472590efe8770de38cc">p</a>;              <span class="comment">/**&lt; associated pool */</span>
<a name="l00080"></a><a class="code" href="structapr__pollfd__t.html#acfafd260241a874745f49ba2df246c53">00080</a>     <a class="code" href="group__apr__poll.html#ga0a8549d84c1721788b102a4cc8b4b0f0">apr_datatype_e</a> <a class="code" href="structapr__pollfd__t.html#acfafd260241a874745f49ba2df246c53">desc_type</a>;   <span class="comment">/**&lt; descriptor type */</span>
<a name="l00081"></a><a class="code" href="structapr__pollfd__t.html#abcedac7097a97823a38ece6e47f4ea9f">00081</a>     apr_int16_t <a class="code" href="structapr__pollfd__t.html#abcedac7097a97823a38ece6e47f4ea9f">reqevents</a>;      <span class="comment">/**&lt; requested events */</span>
<a name="l00082"></a><a class="code" href="structapr__pollfd__t.html#aed5b2109b27984975309922bfa84e3f6">00082</a>     apr_int16_t <a class="code" href="structapr__pollfd__t.html#aed5b2109b27984975309922bfa84e3f6">rtnevents</a>;      <span class="comment">/**&lt; returned events */</span>
<a name="l00083"></a><a class="code" href="structapr__pollfd__t.html#ad63baa71bb91f80513d33482e28fb967">00083</a>     <a class="code" href="unionapr__descriptor.html">apr_descriptor</a> <a class="code" href="structapr__pollfd__t.html#ad63baa71bb91f80513d33482e28fb967">desc</a>;        <span class="comment">/**&lt; @see apr_descriptor */</span>
<a name="l00084"></a><a class="code" href="structapr__pollfd__t.html#a01220e7a71963456461baa40b2a05716">00084</a>     <span class="keywordtype">void</span> *<a class="code" href="structapr__pollfd__t.html#a01220e7a71963456461baa40b2a05716">client_data</a>;          <span class="comment">/**&lt; allows app to associate context */</span>
<a name="l00085"></a>00085 };
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="comment">/* General-purpose poll API for arbitrarily large numbers of</span>
<a name="l00089"></a>00089 <span class="comment"> * file descriptors</span>
<a name="l00090"></a>00090 <span class="comment"> */</span>
<a name="l00091"></a>00091 <span class="comment"></span>
<a name="l00092"></a>00092 <span class="comment">/** Opaque structure used for pollset API */</span>
<a name="l00093"></a><a class="code" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">00093</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> <a class="code" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a>;
<a name="l00094"></a>00094 <span class="comment"></span>
<a name="l00095"></a>00095 <span class="comment">/**</span>
<a name="l00096"></a>00096 <span class="comment"> * Setup a pollset object</span>
<a name="l00097"></a>00097 <span class="comment"> * @param pollset  The pointer in which to return the newly created object </span>
<a name="l00098"></a>00098 <span class="comment"> * @param size The maximum number of descriptors that this pollset can hold</span>
<a name="l00099"></a>00099 <span class="comment"> * @param p The pool from which to allocate the pollset</span>
<a name="l00100"></a>00100 <span class="comment"> * @param flags Optional flags to modify the operation of the pollset.</span>
<a name="l00101"></a>00101 <span class="comment"> *</span>
<a name="l00102"></a>00102 <span class="comment"> * @remark If flags equals APR_POLLSET_THREADSAFE, then a pollset is</span>
<a name="l00103"></a>00103 <span class="comment"> * created on which it is safe to make concurrent calls to</span>
<a name="l00104"></a>00104 <span class="comment"> * apr_pollset_add(), apr_pollset_remove() and apr_pollset_poll() from</span>
<a name="l00105"></a>00105 <span class="comment"> * separate threads.  This feature is only supported on some</span>
<a name="l00106"></a>00106 <span class="comment"> * platforms; the apr_pollset_create() call will fail with</span>
<a name="l00107"></a>00107 <span class="comment"> * APR_ENOTIMPL on platforms where it is not supported.</span>
<a name="l00108"></a>00108 <span class="comment"> */</span>
<a name="l00109"></a>00109 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__poll.html#ga4ca4056a19daee8fe94ddba100fe2326">apr_pollset_create</a>(<a class="code" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> **pollset,
<a name="l00110"></a>00110                                              apr_uint32_t size,
<a name="l00111"></a>00111                                              <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p,
<a name="l00112"></a>00112                                              apr_uint32_t flags);
<a name="l00113"></a>00113 <span class="comment"></span>
<a name="l00114"></a>00114 <span class="comment">/**</span>
<a name="l00115"></a>00115 <span class="comment"> * Destroy a pollset object</span>
<a name="l00116"></a>00116 <span class="comment"> * @param pollset The pollset to destroy</span>
<a name="l00117"></a>00117 <span class="comment"> */</span>
<a name="l00118"></a>00118 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__poll.html#gaa06c538d3fea9d860374043aff9450b2">apr_pollset_destroy</a>(<a class="code" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> *pollset);
<a name="l00119"></a>00119 <span class="comment"></span>
<a name="l00120"></a>00120 <span class="comment">/**</span>
<a name="l00121"></a>00121 <span class="comment"> * Add a socket or file descriptor to a pollset</span>
<a name="l00122"></a>00122 <span class="comment"> * @param pollset The pollset to which to add the descriptor</span>
<a name="l00123"></a>00123 <span class="comment"> * @param descriptor The descriptor to add</span>
<a name="l00124"></a>00124 <span class="comment"> * @remark If you set client_data in the descriptor, that value</span>
<a name="l00125"></a>00125 <span class="comment"> *         will be returned in the client_data field whenever this</span>
<a name="l00126"></a>00126 <span class="comment"> *         descriptor is signalled in apr_pollset_poll().</span>
<a name="l00127"></a>00127 <span class="comment"> * @remark If the pollset has been created with APR_POLLSET_THREADSAFE</span>
<a name="l00128"></a>00128 <span class="comment"> *         and thread T1 is blocked in a call to apr_pollset_poll() for</span>
<a name="l00129"></a>00129 <span class="comment"> *         this same pollset that is being modified via apr_pollset_add()</span>
<a name="l00130"></a>00130 <span class="comment"> *         in thread T2, the currently executing apr_pollset_poll() call in</span>
<a name="l00131"></a>00131 <span class="comment"> *         T1 will either: (1) automatically include the newly added descriptor</span>
<a name="l00132"></a>00132 <span class="comment"> *         in the set of descriptors it is watching or (2) return immediately</span>
<a name="l00133"></a>00133 <span class="comment"> *         with APR_EINTR.  Option (1) is recommended, but option (2) is</span>
<a name="l00134"></a>00134 <span class="comment"> *         allowed for implementations where option (1) is impossible</span>
<a name="l00135"></a>00135 <span class="comment"> *         or impractical.</span>
<a name="l00136"></a>00136 <span class="comment"> */</span>
<a name="l00137"></a>00137 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__poll.html#ga4ec50bf9a11c6b60927c51b81412f5b9">apr_pollset_add</a>(<a class="code" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> *pollset,
<a name="l00138"></a>00138                                           const <a class="code" href="structapr__pollfd__t.html">apr_pollfd_t</a> *descriptor);
<a name="l00139"></a>00139 <span class="comment"></span>
<a name="l00140"></a>00140 <span class="comment">/**</span>
<a name="l00141"></a>00141 <span class="comment"> * Remove a descriptor from a pollset</span>
<a name="l00142"></a>00142 <span class="comment"> * @param pollset The pollset from which to remove the descriptor</span>
<a name="l00143"></a>00143 <span class="comment"> * @param descriptor The descriptor to remove</span>
<a name="l00144"></a>00144 <span class="comment"> * @remark If the pollset has been created with APR_POLLSET_THREADSAFE</span>
<a name="l00145"></a>00145 <span class="comment"> *         and thread T1 is blocked in a call to apr_pollset_poll() for</span>
<a name="l00146"></a>00146 <span class="comment"> *         this same pollset that is being modified via apr_pollset_remove()</span>
<a name="l00147"></a>00147 <span class="comment"> *         in thread T2, the currently executing apr_pollset_poll() call in</span>
<a name="l00148"></a>00148 <span class="comment"> *         T1 will either: (1) automatically exclude the newly added descriptor</span>
<a name="l00149"></a>00149 <span class="comment"> *         in the set of descriptors it is watching or (2) return immediately</span>
<a name="l00150"></a>00150 <span class="comment"> *         with APR_EINTR.  Option (1) is recommended, but option (2) is</span>
<a name="l00151"></a>00151 <span class="comment"> *         allowed for implementations where option (1) is impossible</span>
<a name="l00152"></a>00152 <span class="comment"> *         or impractical.</span>
<a name="l00153"></a>00153 <span class="comment"> */</span>
<a name="l00154"></a>00154 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__poll.html#ga3c99c06e142d6b6b789eeb6086122e3a">apr_pollset_remove</a>(<a class="code" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> *pollset,
<a name="l00155"></a>00155                                              const <a class="code" href="structapr__pollfd__t.html">apr_pollfd_t</a> *descriptor);
<a name="l00156"></a>00156 <span class="comment"></span>
<a name="l00157"></a>00157 <span class="comment">/**</span>
<a name="l00158"></a>00158 <span class="comment"> * Block for activity on the descriptor(s) in a pollset</span>
<a name="l00159"></a>00159 <span class="comment"> * @param pollset The pollset to use</span>
<a name="l00160"></a>00160 <span class="comment"> * @param timeout The amount of time in microseconds to wait.  This is </span>
<a name="l00161"></a>00161 <span class="comment"> *                a maximum, not a minimum.  If a descriptor is signalled, we </span>
<a name="l00162"></a>00162 <span class="comment"> *                will wake up before this time.  A negative number means </span>
<a name="l00163"></a>00163 <span class="comment"> *                wait until a descriptor is signalled.</span>
<a name="l00164"></a>00164 <span class="comment"> * @param num Number of signalled descriptors (output parameter)</span>
<a name="l00165"></a>00165 <span class="comment"> * @param descriptors Array of signalled descriptors (output parameter)</span>
<a name="l00166"></a>00166 <span class="comment"> */</span>
<a name="l00167"></a>00167 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__poll.html#ga6b31d7b3a7b2d356370403dd2b79ecf3">apr_pollset_poll</a>(<a class="code" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> *pollset,
<a name="l00168"></a>00168                                            <a class="code" href="group__apr__time.html#gaae2129185a395cc393f76fabf4f43e47">apr_interval_time_t</a> timeout,
<a name="l00169"></a>00169                                            apr_int32_t *num,
<a name="l00170"></a>00170                                            const <a class="code" href="structapr__pollfd__t.html">apr_pollfd_t</a> **descriptors);
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="comment"></span>
<a name="l00173"></a>00173 <span class="comment">/**</span>
<a name="l00174"></a>00174 <span class="comment"> * Poll the descriptors in the poll structure</span>
<a name="l00175"></a>00175 <span class="comment"> * @param aprset The poll structure we will be using. </span>
<a name="l00176"></a>00176 <span class="comment"> * @param numsock The number of descriptors we are polling</span>
<a name="l00177"></a>00177 <span class="comment"> * @param nsds The number of descriptors signalled (output parameter)</span>
<a name="l00178"></a>00178 <span class="comment"> * @param timeout The amount of time in microseconds to wait.  This is </span>
<a name="l00179"></a>00179 <span class="comment"> *                a maximum, not a minimum.  If a descriptor is signalled, we </span>
<a name="l00180"></a>00180 <span class="comment"> *                will wake up before this time.  A negative number means </span>
<a name="l00181"></a>00181 <span class="comment"> *                wait until a descriptor is signalled.</span>
<a name="l00182"></a>00182 <span class="comment"> * @remark The number of descriptors signalled is returned in the third argument. </span>
<a name="l00183"></a>00183 <span class="comment"> *         This is a blocking call, and it will not return until either a </span>
<a name="l00184"></a>00184 <span class="comment"> *         descriptor has been signalled, or the timeout has expired. </span>
<a name="l00185"></a>00185 <span class="comment"> * @remark The rtnevents field in the apr_pollfd_t array will only be filled-</span>
<a name="l00186"></a>00186 <span class="comment"> *         in if the return value is APR_SUCCESS.</span>
<a name="l00187"></a>00187 <span class="comment"> */</span>
<a name="l00188"></a>00188 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__poll.html#gad1d8a1ccd14952be6da5f272ca8dda76">apr_poll</a>(<a class="code" href="structapr__pollfd__t.html">apr_pollfd_t</a> *aprset, apr_int32_t numsock,
<a name="l00189"></a>00189                                    apr_int32_t *nsds, 
<a name="l00190"></a>00190                                    <a class="code" href="group__apr__time.html#gaae2129185a395cc393f76fabf4f43e47">apr_interval_time_t</a> timeout);
<a name="l00191"></a>00191 <span class="comment"></span>
<a name="l00192"></a>00192 <span class="comment">/** Opaque structure used for pollset API */</span>
<a name="l00193"></a><a class="code" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">00193</a> typedef struct <a class="code" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a> <a class="code" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a>;
<a name="l00194"></a>00194 <span class="comment"></span>
<a name="l00195"></a>00195 <span class="comment">/**</span>
<a name="l00196"></a>00196 <span class="comment"> * Setup a pollcb object</span>
<a name="l00197"></a>00197 <span class="comment"> * @param pollcb  The pointer in which to return the newly created object </span>
<a name="l00198"></a>00198 <span class="comment"> * @param size The maximum number of descriptors that a single _poll can return.</span>
<a name="l00199"></a>00199 <span class="comment"> * @param p The pool from which to allocate the pollcb</span>
<a name="l00200"></a>00200 <span class="comment"> * @param flags Optional flags to modify the operation of the pollcb.</span>
<a name="l00201"></a>00201 <span class="comment"> *</span>
<a name="l00202"></a>00202 <span class="comment"> * @remark Pollcb is only supported on some platforms; the apr_pollcb_create()</span>
<a name="l00203"></a>00203 <span class="comment"> * call will fail with APR_ENOTIMPL on platforms where it is not supported.</span>
<a name="l00204"></a>00204 <span class="comment"> */</span>
<a name="l00205"></a>00205 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__poll.html#gaa829380f21f7709a505fdf45650e6fa0">apr_pollcb_create</a>(apr_pollcb_t **pollcb,
<a name="l00206"></a>00206                                             apr_uint32_t size,
<a name="l00207"></a>00207                                             <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool,
<a name="l00208"></a>00208                                             apr_uint32_t flags);
<a name="l00209"></a>00209 <span class="comment"></span>
<a name="l00210"></a>00210 <span class="comment">/**</span>
<a name="l00211"></a>00211 <span class="comment"> * Add a socket or file descriptor to a pollcb</span>
<a name="l00212"></a>00212 <span class="comment"> * @param pollcb The pollcb to which to add the descriptor</span>
<a name="l00213"></a>00213 <span class="comment"> * @param descriptor The descriptor to add</span>
<a name="l00214"></a>00214 <span class="comment"> * @remark If you set client_data in the descriptor, that value</span>
<a name="l00215"></a>00215 <span class="comment"> *         will be returned in the client_data field whenever this</span>
<a name="l00216"></a>00216 <span class="comment"> *         descriptor is signalled in apr_pollcb_poll().</span>
<a name="l00217"></a>00217 <span class="comment"> * @remark Unlike the apr_pollset API, the descriptor is not copied, and users </span>
<a name="l00218"></a>00218 <span class="comment"> *         must retain the memory used by descriptor, as the same pointer will be </span>
<a name="l00219"></a>00219 <span class="comment"> *         returned to them from apr_pollcb_poll.</span>
<a name="l00220"></a>00220 <span class="comment"> */</span>
<a name="l00221"></a>00221 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__poll.html#ga8fab02dfa803d911dae98656fac7a2c8">apr_pollcb_add</a>(apr_pollcb_t *pollcb,
<a name="l00222"></a>00222                                          <a class="code" href="structapr__pollfd__t.html">apr_pollfd_t</a> *descriptor);<span class="comment"></span>
<a name="l00223"></a>00223 <span class="comment">/**</span>
<a name="l00224"></a>00224 <span class="comment"> * Remove a descriptor from a pollcb</span>
<a name="l00225"></a>00225 <span class="comment"> * @param pollcb The pollcb from which to remove the descriptor</span>
<a name="l00226"></a>00226 <span class="comment"> * @param descriptor The descriptor to remove</span>
<a name="l00227"></a>00227 <span class="comment"> */</span>
<a name="l00228"></a>00228 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__poll.html#gad004b778a14d6bcc4e48a10e5af729d8">apr_pollcb_remove</a>(apr_pollcb_t *pollcb,
<a name="l00229"></a>00229                                             <a class="code" href="structapr__pollfd__t.html">apr_pollfd_t</a> *descriptor);
<a name="l00230"></a>00230 <span class="comment"></span>
<a name="l00231"></a>00231 <span class="comment">/** Function prototype for pollcb handlers </span>
<a name="l00232"></a>00232 <span class="comment"> * @param baton Opaque baton passed into apr_pollcb_poll</span>
<a name="l00233"></a>00233 <span class="comment"> * @param descriptor Contains the notification for an active descriptor, </span>
<a name="l00234"></a>00234 <span class="comment"> *                   the rtnevents member contains what events were triggered</span>
<a name="l00235"></a>00235 <span class="comment"> *                   for this descriptor.</span>
<a name="l00236"></a>00236 <span class="comment"> */</span>
<a name="l00237"></a><a class="code" href="group__apr__poll.html#gad440412b52e12fcfddfdd5b1618359e5">00237</a> typedef <a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> (*<a class="code" href="group__apr__poll.html#gad440412b52e12fcfddfdd5b1618359e5">apr_pollcb_cb_t</a>)(<span class="keywordtype">void</span> *baton, <a class="code" href="structapr__pollfd__t.html">apr_pollfd_t</a> *descriptor);
<a name="l00238"></a>00238 <span class="comment"></span>
<a name="l00239"></a>00239 <span class="comment">/**</span>
<a name="l00240"></a>00240 <span class="comment"> * Block for activity on the descriptor(s) in a pollcb</span>
<a name="l00241"></a>00241 <span class="comment"> * @param pollcb The pollcb to use</span>
<a name="l00242"></a>00242 <span class="comment"> * @param timeout The amount of time in microseconds to wait.  This is </span>
<a name="l00243"></a>00243 <span class="comment"> *                a maximum, not a minimum.  If a descriptor is signalled, we </span>
<a name="l00244"></a>00244 <span class="comment"> *                will wake up before this time.  A negative number means </span>
<a name="l00245"></a>00245 <span class="comment"> *                wait until a descriptor is signalled.</span>
<a name="l00246"></a>00246 <span class="comment"> * @param func Callback function to call for each active socket</span>
<a name="l00247"></a>00247 <span class="comment"> * @param baton Opaque baton passed to the callback function.</span>
<a name="l00248"></a>00248 <span class="comment"> */</span>
<a name="l00249"></a>00249 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__poll.html#ga11765d1b27e2f621a8dcd2c40f0e259c">apr_pollcb_poll</a>(apr_pollcb_t *pollcb,
<a name="l00250"></a>00250                                           <a class="code" href="group__apr__time.html#gaae2129185a395cc393f76fabf4f43e47">apr_interval_time_t</a> timeout,
<a name="l00251"></a>00251                                           <a class="code" href="group__apr__poll.html#gad440412b52e12fcfddfdd5b1618359e5">apr_pollcb_cb_t</a> func,
<a name="l00252"></a>00252                                           <span class="keywordtype">void</span> *baton); 
<a name="l00253"></a>00253 <span class="comment"></span>
<a name="l00254"></a>00254 <span class="comment">/** @} */</span>
<a name="l00255"></a>00255 
<a name="l00256"></a>00256 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00257"></a>00257 <span class="preprocessor"></span>}
<a name="l00258"></a>00258 <span class="preprocessor">#endif</span>
<a name="l00259"></a>00259 <span class="preprocessor"></span>
<a name="l00260"></a>00260 <span class="preprocessor">#endif  </span><span class="comment">/* ! APR_POLL_H */</span>
<a name="l00261"></a>00261 
</pre></div></div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&nbsp;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&nbsp;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&nbsp;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&nbsp;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address style="text-align: right;"><small>Generated on Mon May 23 21:31:32 2011 for Apache Portable Runtime by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
