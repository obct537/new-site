<!-- This comment will put IE 6, 7 and 8 in quirks mode -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Apache Portable Runtime: apr_getopt.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.6.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <img id="MSearchSelect" src="search/search.png"
             onmouseover="return searchBox.OnSearchSelectShow()"
             onmouseout="return searchBox.OnSearchSelectHide()"
             alt=""/>
        <input type="text" id="MSearchField" value="Search" accesskey="S"
             onfocus="searchBox.OnSearchFieldFocus(true)" 
             onblur="searchBox.OnSearchFieldFocus(false)" 
             onkeyup="searchBox.OnSearchFieldChange(event)"/>
        <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<h1>apr_getopt.h</h1><a href="apr__getopt_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Licensed to the Apache Software Foundation (ASF) under one or more</span>
<a name="l00002"></a>00002 <span class="comment"> * contributor license agreements.  See the NOTICE file distributed with</span>
<a name="l00003"></a>00003 <span class="comment"> * this work for additional information regarding copyright ownership.</span>
<a name="l00004"></a>00004 <span class="comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</span>
<a name="l00005"></a>00005 <span class="comment"> * (the &quot;License&quot;); you may not use this file except in compliance with</span>
<a name="l00006"></a>00006 <span class="comment"> * the License.  You may obtain a copy of the License at</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00009"></a>00009 <span class="comment"> *</span>
<a name="l00010"></a>00010 <span class="comment"> * Unless required by applicable law or agreed to in writing, software</span>
<a name="l00011"></a>00011 <span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00013"></a>00013 <span class="comment"> * See the License for the specific language governing permissions and</span>
<a name="l00014"></a>00014 <span class="comment"> * limitations under the License.</span>
<a name="l00015"></a>00015 <span class="comment"> */</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#ifndef APR_GETOPT_H</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span><span class="preprocessor">#define APR_GETOPT_H</span>
<a name="l00019"></a>00019 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00020"></a>00020 <span class="comment">/**</span>
<a name="l00021"></a>00021 <span class="comment"> * @file apr_getopt.h</span>
<a name="l00022"></a>00022 <span class="comment"> * @brief APR Command Arguments (getopt)</span>
<a name="l00023"></a>00023 <span class="comment"> */</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="apr__pools_8h.html" title="APR memory allocation.">apr_pools.h</a>&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00029"></a>00029 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l00030"></a>00030 <span class="comment"></span>
<a name="l00031"></a>00031 <span class="comment">/**</span>
<a name="l00032"></a>00032 <span class="comment"> * @defgroup apr_getopt Command Argument Parsing</span>
<a name="l00033"></a>00033 <span class="comment"> * @ingroup APR </span>
<a name="l00034"></a>00034 <span class="comment"> * @{</span>
<a name="l00035"></a>00035 <span class="comment"> */</span>
<a name="l00036"></a>00036 <span class="comment"></span>
<a name="l00037"></a>00037 <span class="comment">/** </span>
<a name="l00038"></a>00038 <span class="comment"> * An @c apr_getopt_t error callback function.</span>
<a name="l00039"></a>00039 <span class="comment"> *</span>
<a name="l00040"></a>00040 <span class="comment"> * @a arg is this @c apr_getopt_t&#39;s @c errarg member.</span>
<a name="l00041"></a>00041 <span class="comment"> */</span>
<a name="l00042"></a><a class="code" href="group__apr__getopt.html#gae82318936f08cc3531ce9b0856422f27">00042</a> <span class="keyword">typedef</span> void (<a class="code" href="group__apr__getopt.html#gae82318936f08cc3531ce9b0856422f27">apr_getopt_err_fn_t</a>)(<span class="keywordtype">void</span> *arg, <span class="keyword">const</span> <span class="keywordtype">char</span> *err, ...);
<a name="l00043"></a>00043 <span class="comment"></span>
<a name="l00044"></a>00044 <span class="comment">/** @see apr_getopt_t */</span>
<a name="l00045"></a><a class="code" href="group__apr__getopt.html#gaed49565eab64803e93f76d0c40d6873d">00045</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structapr__getopt__t.html">apr_getopt_t</a> <a class="code" href="structapr__getopt__t.html">apr_getopt_t</a>;
<a name="l00046"></a>00046 <span class="comment"></span>
<a name="l00047"></a>00047 <span class="comment">/**</span>
<a name="l00048"></a>00048 <span class="comment"> * Structure to store command line argument information.</span>
<a name="l00049"></a>00049 <span class="comment"> */</span> 
<a name="l00050"></a><a class="code" href="structapr__getopt__t.html">00050</a> <span class="keyword">struct </span><a class="code" href="structapr__getopt__t.html">apr_getopt_t</a> {<span class="comment"></span>
<a name="l00051"></a>00051 <span class="comment">    /** context for processing */</span>
<a name="l00052"></a><a class="code" href="structapr__getopt__t.html#a63a073fb9c11bb2713b3d7f967e95a24">00052</a>     <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *<a class="code" href="structapr__getopt__t.html#a63a073fb9c11bb2713b3d7f967e95a24">cont</a>;<span class="comment"></span>
<a name="l00053"></a>00053 <span class="comment">    /** function to print error message (NULL == no messages) */</span>
<a name="l00054"></a><a class="code" href="structapr__getopt__t.html#a6bf3fd7ad92d1f0161cd895e1ad50d06">00054</a>     <a class="code" href="group__apr__getopt.html#gae82318936f08cc3531ce9b0856422f27">apr_getopt_err_fn_t</a> *<a class="code" href="structapr__getopt__t.html#a6bf3fd7ad92d1f0161cd895e1ad50d06">errfn</a>;<span class="comment"></span>
<a name="l00055"></a>00055 <span class="comment">    /** user defined first arg to pass to error message  */</span>
<a name="l00056"></a><a class="code" href="structapr__getopt__t.html#a46db55c58789ab7fa99bb49544b0776e">00056</a>     <span class="keywordtype">void</span> *<a class="code" href="structapr__getopt__t.html#a46db55c58789ab7fa99bb49544b0776e">errarg</a>;<span class="comment"></span>
<a name="l00057"></a>00057 <span class="comment">    /** index into parent argv vector */</span>
<a name="l00058"></a><a class="code" href="structapr__getopt__t.html#ab04d49d670f095c3244dc9792b70ff07">00058</a>     <span class="keywordtype">int</span> <a class="code" href="structapr__getopt__t.html#ab04d49d670f095c3244dc9792b70ff07">ind</a>;<span class="comment"></span>
<a name="l00059"></a>00059 <span class="comment">    /** character checked for validity */</span>
<a name="l00060"></a><a class="code" href="structapr__getopt__t.html#a4f842391b8f8f19e562584fdd29d0654">00060</a>     <span class="keywordtype">int</span> <a class="code" href="structapr__getopt__t.html#a4f842391b8f8f19e562584fdd29d0654">opt</a>;<span class="comment"></span>
<a name="l00061"></a>00061 <span class="comment">    /** reset getopt */</span>
<a name="l00062"></a><a class="code" href="structapr__getopt__t.html#abc4e72bc761666c0b0d9015c3b0de8c3">00062</a>     <span class="keywordtype">int</span> <a class="code" href="structapr__getopt__t.html#abc4e72bc761666c0b0d9015c3b0de8c3">reset</a>;<span class="comment"></span>
<a name="l00063"></a>00063 <span class="comment">    /** count of arguments */</span>
<a name="l00064"></a><a class="code" href="structapr__getopt__t.html#a58aeb33137aabdd5a00efbde05652094">00064</a>     <span class="keywordtype">int</span> <a class="code" href="structapr__getopt__t.html#a58aeb33137aabdd5a00efbde05652094">argc</a>;<span class="comment"></span>
<a name="l00065"></a>00065 <span class="comment">    /** array of pointers to arguments */</span>
<a name="l00066"></a><a class="code" href="structapr__getopt__t.html#a296c27d8db2fe6d4b88c5c7a85c40c02">00066</a>     <span class="keyword">const</span> <span class="keywordtype">char</span> **<a class="code" href="structapr__getopt__t.html#a296c27d8db2fe6d4b88c5c7a85c40c02">argv</a>;<span class="comment"></span>
<a name="l00067"></a>00067 <span class="comment">    /** argument associated with option */</span>
<a name="l00068"></a><a class="code" href="structapr__getopt__t.html#a87961387d1c71bebfbdf69c7f392d2d5">00068</a>     <span class="keywordtype">char</span> <span class="keyword">const</span>* <a class="code" href="structapr__getopt__t.html#a87961387d1c71bebfbdf69c7f392d2d5">place</a>;<span class="comment"></span>
<a name="l00069"></a>00069 <span class="comment">    /** set to nonzero to support interleaving options with regular args */</span>
<a name="l00070"></a><a class="code" href="structapr__getopt__t.html#a771dbef87345c731845dd63723fb34db">00070</a>     <span class="keywordtype">int</span> <a class="code" href="structapr__getopt__t.html#a771dbef87345c731845dd63723fb34db">interleave</a>;<span class="comment"></span>
<a name="l00071"></a>00071 <span class="comment">    /** start of non-option arguments skipped for interleaving */</span>
<a name="l00072"></a><a class="code" href="structapr__getopt__t.html#a0cd41eedf9ed82bf5d9dcc3491ee67dd">00072</a>     <span class="keywordtype">int</span> <a class="code" href="structapr__getopt__t.html#a0cd41eedf9ed82bf5d9dcc3491ee67dd">skip_start</a>;<span class="comment"></span>
<a name="l00073"></a>00073 <span class="comment">    /** end of non-option arguments skipped for interleaving */</span>
<a name="l00074"></a><a class="code" href="structapr__getopt__t.html#ae9e7e6eb1576820c7dc6e589cc3a28b7">00074</a>     <span class="keywordtype">int</span> <a class="code" href="structapr__getopt__t.html#ae9e7e6eb1576820c7dc6e589cc3a28b7">skip_end</a>;
<a name="l00075"></a>00075 };
<a name="l00076"></a>00076 <span class="comment"></span>
<a name="l00077"></a>00077 <span class="comment">/** @see apr_getopt_option_t */</span>
<a name="l00078"></a><a class="code" href="group__apr__getopt.html#ga114d2af52f3573eaeee2ffa73b2c4ff5">00078</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structapr__getopt__option__t.html">apr_getopt_option_t</a> <a class="code" href="structapr__getopt__option__t.html">apr_getopt_option_t</a>;
<a name="l00079"></a>00079 <span class="comment"></span>
<a name="l00080"></a>00080 <span class="comment">/**</span>
<a name="l00081"></a>00081 <span class="comment"> * Structure used to describe options that getopt should search for.</span>
<a name="l00082"></a>00082 <span class="comment"> */</span>
<a name="l00083"></a><a class="code" href="structapr__getopt__option__t.html">00083</a> <span class="keyword">struct </span><a class="code" href="structapr__getopt__option__t.html">apr_getopt_option_t</a> {<span class="comment"></span>
<a name="l00084"></a>00084 <span class="comment">    /** long option name, or NULL if option has no long name */</span>
<a name="l00085"></a><a class="code" href="structapr__getopt__option__t.html#a7e623913c9761495c5d37adf6ff1ee69">00085</a>     <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structapr__getopt__option__t.html#a7e623913c9761495c5d37adf6ff1ee69">name</a>;<span class="comment"></span>
<a name="l00086"></a>00086 <span class="comment">    /** option letter, or a value greater than 255 if option has no letter */</span>
<a name="l00087"></a><a class="code" href="structapr__getopt__option__t.html#a476e67c4dde620fe5b4f5952238c6e94">00087</a>     <span class="keywordtype">int</span> <a class="code" href="structapr__getopt__option__t.html#a476e67c4dde620fe5b4f5952238c6e94">optch</a>;<span class="comment"></span>
<a name="l00088"></a>00088 <span class="comment">    /** nonzero if option takes an argument */</span>
<a name="l00089"></a><a class="code" href="structapr__getopt__option__t.html#aac65dae93f6d35f4848b91f6f9d66278">00089</a>     <span class="keywordtype">int</span> <a class="code" href="structapr__getopt__option__t.html#aac65dae93f6d35f4848b91f6f9d66278">has_arg</a>;<span class="comment"></span>
<a name="l00090"></a>00090 <span class="comment">    /** a description of the option */</span>
<a name="l00091"></a><a class="code" href="structapr__getopt__option__t.html#a8fd515c0a9e621f6c0d058772429ab98">00091</a>     <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structapr__getopt__option__t.html#a8fd515c0a9e621f6c0d058772429ab98">description</a>;
<a name="l00092"></a>00092 };
<a name="l00093"></a>00093 <span class="comment"></span>
<a name="l00094"></a>00094 <span class="comment">/**</span>
<a name="l00095"></a>00095 <span class="comment"> * Initialize the arguments for parsing by apr_getopt().</span>
<a name="l00096"></a>00096 <span class="comment"> * @param os   The options structure created for apr_getopt()</span>
<a name="l00097"></a>00097 <span class="comment"> * @param cont The pool to operate on</span>
<a name="l00098"></a>00098 <span class="comment"> * @param argc The number of arguments to parse</span>
<a name="l00099"></a>00099 <span class="comment"> * @param argv The array of arguments to parse</span>
<a name="l00100"></a>00100 <span class="comment"> * @remark Arguments 3 and 4 are most commonly argc and argv from main(argc, argv)</span>
<a name="l00101"></a>00101 <span class="comment"> * The (*os)-&gt;errfn is initialized to fprintf(stderr... but may be overridden.</span>
<a name="l00102"></a>00102 <span class="comment"> */</span>
<a name="l00103"></a>00103 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__getopt.html#gaaab2b4bfb62361af7a2d427f5f29a3d4">apr_getopt_init</a>(<a class="code" href="structapr__getopt__t.html">apr_getopt_t</a> **os, <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *cont,
<a name="l00104"></a>00104                                       <span class="keywordtype">int</span> argc, const <span class="keywordtype">char</span> * const *argv);
<a name="l00105"></a>00105 <span class="comment"></span>
<a name="l00106"></a>00106 <span class="comment">/**</span>
<a name="l00107"></a>00107 <span class="comment"> * Parse the options initialized by apr_getopt_init().</span>
<a name="l00108"></a>00108 <span class="comment"> * @param os     The apr_opt_t structure returned by apr_getopt_init()</span>
<a name="l00109"></a>00109 <span class="comment"> * @param opts   A string of characters that are acceptable options to the </span>
<a name="l00110"></a>00110 <span class="comment"> *               program.  Characters followed by &quot;:&quot; are required to have an </span>
<a name="l00111"></a>00111 <span class="comment"> *               option associated</span>
<a name="l00112"></a>00112 <span class="comment"> * @param option_ch  The next option character parsed</span>
<a name="l00113"></a>00113 <span class="comment"> * @param option_arg The argument following the option character:</span>
<a name="l00114"></a>00114 <span class="comment"> * @return There are four potential status values on exit. They are:</span>
<a name="l00115"></a>00115 <span class="comment"> * &lt;PRE&gt;</span>
<a name="l00116"></a>00116 <span class="comment"> *             APR_EOF      --  No more options to parse</span>
<a name="l00117"></a>00117 <span class="comment"> *             APR_BADCH    --  Found a bad option character</span>
<a name="l00118"></a>00118 <span class="comment"> *             APR_BADARG   --  No argument followed the option flag</span>
<a name="l00119"></a>00119 <span class="comment"> *             APR_SUCCESS  --  The next option was found.</span>
<a name="l00120"></a>00120 <span class="comment"> * &lt;/PRE&gt;</span>
<a name="l00121"></a>00121 <span class="comment"> */</span>
<a name="l00122"></a>00122 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__getopt.html#ga289cdcf7eacc997eb91fea7c02d08934">apr_getopt</a>(<a class="code" href="structapr__getopt__t.html">apr_getopt_t</a> *os, const <span class="keywordtype">char</span> *opts, 
<a name="l00123"></a>00123                                      <span class="keywordtype">char</span> *option_ch, const <span class="keywordtype">char</span> **option_arg);
<a name="l00124"></a>00124 <span class="comment"></span>
<a name="l00125"></a>00125 <span class="comment">/**</span>
<a name="l00126"></a>00126 <span class="comment"> * Parse the options initialized by apr_getopt_init(), accepting long</span>
<a name="l00127"></a>00127 <span class="comment"> * options beginning with &quot;--&quot; in addition to single-character</span>
<a name="l00128"></a>00128 <span class="comment"> * options beginning with &quot;-&quot;.</span>
<a name="l00129"></a>00129 <span class="comment"> * @param os     The apr_getopt_t structure created by apr_getopt_init()</span>
<a name="l00130"></a>00130 <span class="comment"> * @param opts   A pointer to a list of apr_getopt_option_t structures, which</span>
<a name="l00131"></a>00131 <span class="comment"> *               can be initialized with { &quot;name&quot;, optch, has_args }.  has_args</span>
<a name="l00132"></a>00132 <span class="comment"> *               is nonzero if the option requires an argument.  A structure</span>
<a name="l00133"></a>00133 <span class="comment"> *               with an optch value of 0 terminates the list.</span>
<a name="l00134"></a>00134 <span class="comment"> * @param option_ch  Receives the value of &quot;optch&quot; from the apr_getopt_option_t</span>
<a name="l00135"></a>00135 <span class="comment"> *                   structure corresponding to the next option matched.</span>
<a name="l00136"></a>00136 <span class="comment"> * @param option_arg Receives the argument following the option, if any.</span>
<a name="l00137"></a>00137 <span class="comment"> * @return There are four potential status values on exit.   They are:</span>
<a name="l00138"></a>00138 <span class="comment"> * &lt;PRE&gt;</span>
<a name="l00139"></a>00139 <span class="comment"> *             APR_EOF      --  No more options to parse</span>
<a name="l00140"></a>00140 <span class="comment"> *             APR_BADCH    --  Found a bad option character</span>
<a name="l00141"></a>00141 <span class="comment"> *             APR_BADARG   --  No argument followed the option flag</span>
<a name="l00142"></a>00142 <span class="comment"> *             APR_SUCCESS  --  The next option was found.</span>
<a name="l00143"></a>00143 <span class="comment"> * &lt;/PRE&gt;</span>
<a name="l00144"></a>00144 <span class="comment"> * When APR_SUCCESS is returned, os-&gt;ind gives the index of the first</span>
<a name="l00145"></a>00145 <span class="comment"> * non-option argument.  On error, a message will be printed to stdout unless</span>
<a name="l00146"></a>00146 <span class="comment"> * os-&gt;err is set to 0.  If os-&gt;interleave is set to nonzero, options can come</span>
<a name="l00147"></a>00147 <span class="comment"> * after arguments, and os-&gt;argv will be permuted to leave non-option arguments</span>
<a name="l00148"></a>00148 <span class="comment"> * at the end (the original argv is unaffected).</span>
<a name="l00149"></a>00149 <span class="comment"> */</span>
<a name="l00150"></a>00150 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__getopt.html#ga80d6ff2213da4e25406b3f179fa13989">apr_getopt_long</a>(<a class="code" href="structapr__getopt__t.html">apr_getopt_t</a> *os,
<a name="l00151"></a>00151                                           const <a class="code" href="structapr__getopt__option__t.html">apr_getopt_option_t</a> *opts,
<a name="l00152"></a>00152                                           <span class="keywordtype">int</span> *option_ch,
<a name="l00153"></a>00153                                           const <span class="keywordtype">char</span> **option_arg);<span class="comment"></span>
<a name="l00154"></a>00154 <span class="comment">/** @} */</span>
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span>}
<a name="l00158"></a>00158 <span class="preprocessor">#endif</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span>
<a name="l00160"></a>00160 <span class="preprocessor">#endif  </span><span class="comment">/* ! APR_GETOPT_H */</span>
</pre></div></div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&nbsp;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&nbsp;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&nbsp;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&nbsp;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address style="text-align: right;"><small>Generated on Mon May 23 21:31:31 2011 for Apache Portable Runtime by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
