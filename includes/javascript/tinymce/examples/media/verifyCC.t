<!-- This comment will put IE 6, 7 and 8 in quirks mode -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Apache Portable Runtime: apr_hash.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.6.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <img id="MSearchSelect" src="search/search.png"
             onmouseover="return searchBox.OnSearchSelectShow()"
             onmouseout="return searchBox.OnSearchSelectHide()"
             alt=""/>
        <input type="text" id="MSearchField" value="Search" accesskey="S"
             onfocus="searchBox.OnSearchFieldFocus(true)" 
             onblur="searchBox.OnSearchFieldFocus(false)" 
             onkeyup="searchBox.OnSearchFieldChange(event)"/>
        <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<h1>apr_hash.h</h1><a href="apr__hash_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Licensed to the Apache Software Foundation (ASF) under one or more</span>
<a name="l00002"></a>00002 <span class="comment"> * contributor license agreements.  See the NOTICE file distributed with</span>
<a name="l00003"></a>00003 <span class="comment"> * this work for additional information regarding copyright ownership.</span>
<a name="l00004"></a>00004 <span class="comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</span>
<a name="l00005"></a>00005 <span class="comment"> * (the &quot;License&quot;); you may not use this file except in compliance with</span>
<a name="l00006"></a>00006 <span class="comment"> * the License.  You may obtain a copy of the License at</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00009"></a>00009 <span class="comment"> *</span>
<a name="l00010"></a>00010 <span class="comment"> * Unless required by applicable law or agreed to in writing, software</span>
<a name="l00011"></a>00011 <span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00013"></a>00013 <span class="comment"> * See the License for the specific language governing permissions and</span>
<a name="l00014"></a>00014 <span class="comment"> * limitations under the License.</span>
<a name="l00015"></a>00015 <span class="comment"> */</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#ifndef APR_HASH_H</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span><span class="preprocessor">#define APR_HASH_H</span>
<a name="l00019"></a>00019 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00020"></a>00020 <span class="comment">/**</span>
<a name="l00021"></a>00021 <span class="comment"> * @file apr_hash.h</span>
<a name="l00022"></a>00022 <span class="comment"> * @brief APR Hash Tables</span>
<a name="l00023"></a>00023 <span class="comment"> */</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="apr__pools_8h.html" title="APR memory allocation.">apr_pools.h</a>&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00029"></a>00029 <span class="preprocessor">#endif</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00031"></a>00031 <span class="comment">/**</span>
<a name="l00032"></a>00032 <span class="comment"> * @defgroup apr_hash Hash Tables</span>
<a name="l00033"></a>00033 <span class="comment"> * @ingroup APR </span>
<a name="l00034"></a>00034 <span class="comment"> * @{</span>
<a name="l00035"></a>00035 <span class="comment"> */</span>
<a name="l00036"></a>00036 <span class="comment"></span>
<a name="l00037"></a>00037 <span class="comment">/**</span>
<a name="l00038"></a>00038 <span class="comment"> * When passing a key to apr_hash_set or apr_hash_get, this value can be</span>
<a name="l00039"></a>00039 <span class="comment"> * passed to indicate a string-valued key, and have apr_hash compute the</span>
<a name="l00040"></a>00040 <span class="comment"> * length automatically.</span>
<a name="l00041"></a>00041 <span class="comment"> *</span>
<a name="l00042"></a>00042 <span class="comment"> * @remark apr_hash will use strlen(key) for the length. The NUL terminator</span>
<a name="l00043"></a>00043 <span class="comment"> *         is not included in the hash value (why throw a constant in?).</span>
<a name="l00044"></a>00044 <span class="comment"> *         Since the hash table merely references the provided key (rather</span>
<a name="l00045"></a>00045 <span class="comment"> *         than copying it), apr_hash_this() will return the NUL-term&#39;d key.</span>
<a name="l00046"></a>00046 <span class="comment"> */</span>
<a name="l00047"></a><a class="code" href="group__apr__hash.html#ga3ba32541f2717b394000f87f38c7e12d">00047</a> <span class="preprocessor">#define APR_HASH_KEY_STRING     (-1)</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00049"></a>00049 <span class="comment">/**</span>
<a name="l00050"></a>00050 <span class="comment"> * Abstract type for hash tables.</span>
<a name="l00051"></a>00051 <span class="comment"> */</span>
<a name="l00052"></a><a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">00052</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> <a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a>;
<a name="l00053"></a>00053 <span class="comment"></span>
<a name="l00054"></a>00054 <span class="comment">/**</span>
<a name="l00055"></a>00055 <span class="comment"> * Abstract type for scanning hash tables.</span>
<a name="l00056"></a>00056 <span class="comment"> */</span>
<a name="l00057"></a><a class="code" href="group__apr__hash.html#ga3b3d353989f6cea4535630634be147f7">00057</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__apr__hash.html#ga3b3d353989f6cea4535630634be147f7">apr_hash_index_t</a> <a class="code" href="group__apr__hash.html#ga3b3d353989f6cea4535630634be147f7">apr_hash_index_t</a>;
<a name="l00058"></a>00058 <span class="comment"></span>
<a name="l00059"></a>00059 <span class="comment">/**</span>
<a name="l00060"></a>00060 <span class="comment"> * Callback functions for calculating hash values.</span>
<a name="l00061"></a>00061 <span class="comment"> * @param key The key.</span>
<a name="l00062"></a>00062 <span class="comment"> * @param klen The length of the key, or APR_HASH_KEY_STRING to use the string </span>
<a name="l00063"></a>00063 <span class="comment"> *             length. If APR_HASH_KEY_STRING then returns the actual key length.</span>
<a name="l00064"></a>00064 <span class="comment"> */</span>
<a name="l00065"></a><a class="code" href="group__apr__hash.html#ga083e92cab31343c1ebb9073275e8166e">00065</a> <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> int (*<a class="code" href="group__apr__hash.html#ga083e92cab31343c1ebb9073275e8166e">apr_hashfunc_t</a>)(<span class="keyword">const</span> <span class="keywordtype">char</span> *key, apr_ssize_t *klen);
<a name="l00066"></a>00066 <span class="comment"></span>
<a name="l00067"></a>00067 <span class="comment">/**</span>
<a name="l00068"></a>00068 <span class="comment"> * The default hash function.</span>
<a name="l00069"></a>00069 <span class="comment"> */</span>
<a name="l00070"></a>00070 <a class="code" href="group__apr__platform.html#ga3ad5e45fabbda0ec5f106c334f1a0ae5">APR_DECLARE_NONSTD</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) <a class="code" href="group__apr__hash.html#ga8baa6e9d9d6c2c496d2a0ff1a5c53abe">apr_hashfunc_default</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *key,
<a name="l00071"></a>00071                                                       apr_ssize_t *klen);
<a name="l00072"></a>00072 <span class="comment"></span>
<a name="l00073"></a>00073 <span class="comment">/**</span>
<a name="l00074"></a>00074 <span class="comment"> * Create a hash table.</span>
<a name="l00075"></a>00075 <span class="comment"> * @param pool The pool to allocate the hash table out of</span>
<a name="l00076"></a>00076 <span class="comment"> * @return The hash table just created</span>
<a name="l00077"></a>00077 <span class="comment">  */</span>
<a name="l00078"></a>00078 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *) <a class="code" href="group__apr__hash.html#ga5f4b424d6761de4d32aa16ff6803bac9">apr_hash_make</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool);
<a name="l00079"></a>00079 <span class="comment"></span>
<a name="l00080"></a>00080 <span class="comment">/**</span>
<a name="l00081"></a>00081 <span class="comment"> * Create a hash table with a custom hash function</span>
<a name="l00082"></a>00082 <span class="comment"> * @param pool The pool to allocate the hash table out of</span>
<a name="l00083"></a>00083 <span class="comment"> * @param hash_func A custom hash function.</span>
<a name="l00084"></a>00084 <span class="comment"> * @return The hash table just created</span>
<a name="l00085"></a>00085 <span class="comment">  */</span>
<a name="l00086"></a>00086 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *) <a class="code" href="group__apr__hash.html#ga27f40acb206f1821a783ddcb71bc8971">apr_hash_make_custom</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool, 
<a name="l00087"></a>00087                                                <a class="code" href="group__apr__hash.html#ga083e92cab31343c1ebb9073275e8166e">apr_hashfunc_t</a> hash_func);
<a name="l00088"></a>00088 <span class="comment"></span>
<a name="l00089"></a>00089 <span class="comment">/**</span>
<a name="l00090"></a>00090 <span class="comment"> * Make a copy of a hash table</span>
<a name="l00091"></a>00091 <span class="comment"> * @param pool The pool from which to allocate the new hash table</span>
<a name="l00092"></a>00092 <span class="comment"> * @param h The hash table to clone</span>
<a name="l00093"></a>00093 <span class="comment"> * @return The hash table just created</span>
<a name="l00094"></a>00094 <span class="comment"> * @remark Makes a shallow copy</span>
<a name="l00095"></a>00095 <span class="comment"> */</span>
<a name="l00096"></a>00096 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *) <a class="code" href="group__apr__hash.html#gafa0b1b9fb91b2249ee3bcb645d93e148">apr_hash_copy</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool,
<a name="l00097"></a>00097                                         const <a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *h);
<a name="l00098"></a>00098 <span class="comment"></span>
<a name="l00099"></a>00099 <span class="comment">/**</span>
<a name="l00100"></a>00100 <span class="comment"> * Associate a value with a key in a hash table.</span>
<a name="l00101"></a>00101 <span class="comment"> * @param ht The hash table</span>
<a name="l00102"></a>00102 <span class="comment"> * @param key Pointer to the key</span>
<a name="l00103"></a>00103 <span class="comment"> * @param klen Length of the key. Can be APR_HASH_KEY_STRING to use the string length.</span>
<a name="l00104"></a>00104 <span class="comment"> * @param val Value to associate with the key</span>
<a name="l00105"></a>00105 <span class="comment"> * @remark If the value is NULL the hash entry is deleted.</span>
<a name="l00106"></a>00106 <span class="comment"> */</span>
<a name="l00107"></a>00107 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__apr__hash.html#ga456beb139bc548728b49c09c2f89b93c">apr_hash_set</a>(<a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *ht, const <span class="keywordtype">void</span> *key,
<a name="l00108"></a>00108                                apr_ssize_t klen, const <span class="keywordtype">void</span> *val);
<a name="l00109"></a>00109 <span class="comment"></span>
<a name="l00110"></a>00110 <span class="comment">/**</span>
<a name="l00111"></a>00111 <span class="comment"> * Look up the value associated with a key in a hash table.</span>
<a name="l00112"></a>00112 <span class="comment"> * @param ht The hash table</span>
<a name="l00113"></a>00113 <span class="comment"> * @param key Pointer to the key</span>
<a name="l00114"></a>00114 <span class="comment"> * @param klen Length of the key. Can be APR_HASH_KEY_STRING to use the string length.</span>
<a name="l00115"></a>00115 <span class="comment"> * @return Returns NULL if the key is not present.</span>
<a name="l00116"></a>00116 <span class="comment"> */</span>
<a name="l00117"></a>00117 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span> *) <a class="code" href="group__apr__hash.html#ga05e526dad8afaebe14caea90d906d6ec">apr_hash_get</a>(<a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *ht, const <span class="keywordtype">void</span> *key,
<a name="l00118"></a>00118                                  apr_ssize_t klen);
<a name="l00119"></a>00119 <span class="comment"></span>
<a name="l00120"></a>00120 <span class="comment">/**</span>
<a name="l00121"></a>00121 <span class="comment"> * Start iterating over the entries in a hash table.</span>
<a name="l00122"></a>00122 <span class="comment"> * @param p The pool to allocate the apr_hash_index_t iterator. If this</span>
<a name="l00123"></a>00123 <span class="comment"> *          pool is NULL, then an internal, non-thread-safe iterator is used.</span>
<a name="l00124"></a>00124 <span class="comment"> * @param ht The hash table</span>
<a name="l00125"></a>00125 <span class="comment"> * @remark  There is no restriction on adding or deleting hash entries during</span>
<a name="l00126"></a>00126 <span class="comment"> * an iteration (although the results may be unpredictable unless all you do</span>
<a name="l00127"></a>00127 <span class="comment"> * is delete the current entry) and multiple iterations can be in</span>
<a name="l00128"></a>00128 <span class="comment"> * progress at the same time.</span>
<a name="l00129"></a>00129 <span class="comment"> */</span><span class="comment"></span>
<a name="l00130"></a>00130 <span class="comment">/**</span>
<a name="l00131"></a>00131 <span class="comment"> * @code</span>
<a name="l00132"></a>00132 <span class="comment"> * int sum_values(apr_pool_t *p, apr_hash_t *ht)</span>
<a name="l00133"></a>00133 <span class="comment"> * {</span>
<a name="l00134"></a>00134 <span class="comment"> *     apr_hash_index_t *hi;</span>
<a name="l00135"></a>00135 <span class="comment"> *     void *val;</span>
<a name="l00136"></a>00136 <span class="comment"> *     int sum = 0;</span>
<a name="l00137"></a>00137 <span class="comment"> *     for (hi = apr_hash_first(p, ht); hi; hi = apr_hash_next(hi)) {</span>
<a name="l00138"></a>00138 <span class="comment"> *         apr_hash_this(hi, NULL, NULL, &amp;val);</span>
<a name="l00139"></a>00139 <span class="comment"> *         sum += *(int *)val;</span>
<a name="l00140"></a>00140 <span class="comment"> *     }</span>
<a name="l00141"></a>00141 <span class="comment"> *     return sum;</span>
<a name="l00142"></a>00142 <span class="comment"> * }</span>
<a name="l00143"></a>00143 <span class="comment"> * @endcode</span>
<a name="l00144"></a>00144 <span class="comment"> */</span>
<a name="l00145"></a>00145 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__hash.html#ga3b3d353989f6cea4535630634be147f7">apr_hash_index_t</a> *) <a class="code" href="group__apr__hash.html#ga640005a4ba64a5db039b0b43a8ad4898">apr_hash_first</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p, <a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *ht);
<a name="l00146"></a>00146 <span class="comment"></span>
<a name="l00147"></a>00147 <span class="comment">/**</span>
<a name="l00148"></a>00148 <span class="comment"> * Continue iterating over the entries in a hash table.</span>
<a name="l00149"></a>00149 <span class="comment"> * @param hi The iteration state</span>
<a name="l00150"></a>00150 <span class="comment"> * @return a pointer to the updated iteration state.  NULL if there are no more  </span>
<a name="l00151"></a>00151 <span class="comment"> *         entries.</span>
<a name="l00152"></a>00152 <span class="comment"> */</span>
<a name="l00153"></a>00153 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__hash.html#ga3b3d353989f6cea4535630634be147f7">apr_hash_index_t</a> *) <a class="code" href="group__apr__hash.html#ga9d7b9198555659e9abac4e3028ccce00">apr_hash_next</a>(<a class="code" href="group__apr__hash.html#ga3b3d353989f6cea4535630634be147f7">apr_hash_index_t</a> *hi);
<a name="l00154"></a>00154 <span class="comment"></span>
<a name="l00155"></a>00155 <span class="comment">/**</span>
<a name="l00156"></a>00156 <span class="comment"> * Get the current entry&#39;s details from the iteration state.</span>
<a name="l00157"></a>00157 <span class="comment"> * @param hi The iteration state</span>
<a name="l00158"></a>00158 <span class="comment"> * @param key Return pointer for the pointer to the key.</span>
<a name="l00159"></a>00159 <span class="comment"> * @param klen Return pointer for the key length.</span>
<a name="l00160"></a>00160 <span class="comment"> * @param val Return pointer for the associated value.</span>
<a name="l00161"></a>00161 <span class="comment"> * @remark The return pointers should point to a variable that will be set to the</span>
<a name="l00162"></a>00162 <span class="comment"> *         corresponding data, or they may be NULL if the data isn&#39;t interesting.</span>
<a name="l00163"></a>00163 <span class="comment"> */</span>
<a name="l00164"></a>00164 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__apr__hash.html#gad90e5b895397c2c535e32b3e44a75b3f">apr_hash_this</a>(<a class="code" href="group__apr__hash.html#ga3b3d353989f6cea4535630634be147f7">apr_hash_index_t</a> *hi, const <span class="keywordtype">void</span> **key, 
<a name="l00165"></a>00165                                 apr_ssize_t *klen, <span class="keywordtype">void</span> **val);
<a name="l00166"></a>00166 <span class="comment"></span>
<a name="l00167"></a>00167 <span class="comment">/**</span>
<a name="l00168"></a>00168 <span class="comment"> * Get the number of key/value pairs in the hash table.</span>
<a name="l00169"></a>00169 <span class="comment"> * @param ht The hash table</span>
<a name="l00170"></a>00170 <span class="comment"> * @return The number of key/value pairs in the hash table.</span>
<a name="l00171"></a>00171 <span class="comment"> */</span>
<a name="l00172"></a>00172 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) <a class="code" href="group__apr__hash.html#ga4e44efa9ef043c1bb8a4abc5edcfda2c">apr_hash_count</a>(<a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *ht);
<a name="l00173"></a>00173 <span class="comment"></span>
<a name="l00174"></a>00174 <span class="comment">/**</span>
<a name="l00175"></a>00175 <span class="comment"> * Clear any key/value pairs in the hash table.</span>
<a name="l00176"></a>00176 <span class="comment"> * @param ht The hash table</span>
<a name="l00177"></a>00177 <span class="comment"> */</span>
<a name="l00178"></a>00178 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__apr__hash.html#ga06fb1b9ecff1a15ee41ff02db74264e4">apr_hash_clear</a>(<a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *ht);
<a name="l00179"></a>00179 <span class="comment"></span>
<a name="l00180"></a>00180 <span class="comment">/**</span>
<a name="l00181"></a>00181 <span class="comment"> * Merge two hash tables into one new hash table. The values of the overlay</span>
<a name="l00182"></a>00182 <span class="comment"> * hash override the values of the base if both have the same key.  Both</span>
<a name="l00183"></a>00183 <span class="comment"> * hash tables must use the same hash function.</span>
<a name="l00184"></a>00184 <span class="comment"> * @param p The pool to use for the new hash table</span>
<a name="l00185"></a>00185 <span class="comment"> * @param overlay The table to add to the initial table</span>
<a name="l00186"></a>00186 <span class="comment"> * @param base The table that represents the initial values of the new table</span>
<a name="l00187"></a>00187 <span class="comment"> * @return A new hash table containing all of the data from the two passed in</span>
<a name="l00188"></a>00188 <span class="comment"> */</span>
<a name="l00189"></a>00189 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *) <a class="code" href="group__apr__hash.html#ga2f68646a64bad44efcbf3457af581fdb">apr_hash_overlay</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p,
<a name="l00190"></a>00190                                            const <a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *overlay, 
<a name="l00191"></a>00191                                            const <a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *base);
<a name="l00192"></a>00192 <span class="comment"></span>
<a name="l00193"></a>00193 <span class="comment">/**</span>
<a name="l00194"></a>00194 <span class="comment"> * Merge two hash tables into one new hash table. If the same key</span>
<a name="l00195"></a>00195 <span class="comment"> * is present in both tables, call the supplied merge function to</span>
<a name="l00196"></a>00196 <span class="comment"> * produce a merged value for the key in the new table.  Both</span>
<a name="l00197"></a>00197 <span class="comment"> * hash tables must use the same hash function.</span>
<a name="l00198"></a>00198 <span class="comment"> * @param p The pool to use for the new hash table</span>
<a name="l00199"></a>00199 <span class="comment"> * @param h1 The first of the tables to merge</span>
<a name="l00200"></a>00200 <span class="comment"> * @param h2 The second of the tables to merge</span>
<a name="l00201"></a>00201 <span class="comment"> * @param merger A callback function to merge values, or NULL to</span>
<a name="l00202"></a>00202 <span class="comment"> *  make values from h1 override values from h2 (same semantics as</span>
<a name="l00203"></a>00203 <span class="comment"> *  apr_hash_overlay())</span>
<a name="l00204"></a>00204 <span class="comment"> * @param data Client data to pass to the merger function</span>
<a name="l00205"></a>00205 <span class="comment"> * @return A new hash table containing all of the data from the two passed in</span>
<a name="l00206"></a>00206 <span class="comment"> */</span>
<a name="l00207"></a>00207 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *) <a class="code" href="group__apr__hash.html#gaa954266cd16a55f7f384ab0a9c4ff9f1">apr_hash_merge</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p,
<a name="l00208"></a>00208                                          const <a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *h1,
<a name="l00209"></a>00209                                          const <a class="code" href="group__apr__hash.html#ga72ec09b8bde6d874c36bd49df915fff6">apr_hash_t</a> *h2,
<a name="l00210"></a>00210                                          <span class="keywordtype">void</span> * (*merger)(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p,
<a name="l00211"></a>00211                                                      const <span class="keywordtype">void</span> *key,
<a name="l00212"></a>00212                                                      apr_ssize_t klen,
<a name="l00213"></a>00213                                                      const <span class="keywordtype">void</span> *h1_val,
<a name="l00214"></a>00214                                                      const <span class="keywordtype">void</span> *h2_val,
<a name="l00215"></a>00215                                                      const <span class="keywordtype">void</span> *data),
<a name="l00216"></a>00216                                          const <span class="keywordtype">void</span> *data);
<a name="l00217"></a>00217 <span class="comment"></span>
<a name="l00218"></a>00218 <span class="comment">/**</span>
<a name="l00219"></a>00219 <span class="comment"> * Get a pointer to the pool which the hash table was created in</span>
<a name="l00220"></a>00220 <span class="comment"> */</span>
<a name="l00221"></a>00221 <a class="code" href="group__apr__pools.html#ga89ce1d55c7f0c39ea87c88eabd655394">APR_POOL_DECLARE_ACCESSOR</a>(hash);
<a name="l00222"></a>00222 <span class="comment"></span>
<a name="l00223"></a>00223 <span class="comment">/** @} */</span>
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00226"></a>00226 <span class="preprocessor"></span>}
<a name="l00227"></a>00227 <span class="preprocessor">#endif</span>
<a name="l00228"></a>00228 <span class="preprocessor"></span>
<a name="l00229"></a>00229 <span class="preprocessor">#endif  </span><span class="comment">/* !APR_HASH_H */</span>
</pre></div></div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&nbsp;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&nbsp;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&nbsp;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&nbsp;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address style="text-align: right;"><small>Generated on Mon May 23 21:31:31 2011 for Apache Portable Runtime by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
