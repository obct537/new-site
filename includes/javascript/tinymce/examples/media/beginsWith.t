<!-- This comment will put IE 6, 7 and 8 in quirks mode -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Apache Portable Runtime: apr_pools.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.6.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <img id="MSearchSelect" src="search/search.png"
             onmouseover="return searchBox.OnSearchSelectShow()"
             onmouseout="return searchBox.OnSearchSelectHide()"
             alt=""/>
        <input type="text" id="MSearchField" value="Search" accesskey="S"
             onfocus="searchBox.OnSearchFieldFocus(true)" 
             onblur="searchBox.OnSearchFieldFocus(false)" 
             onkeyup="searchBox.OnSearchFieldChange(event)"/>
        <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<h1>apr_pools.h</h1><a href="apr__pools_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Licensed to the Apache Software Foundation (ASF) under one or more</span>
<a name="l00002"></a>00002 <span class="comment"> * contributor license agreements.  See the NOTICE file distributed with</span>
<a name="l00003"></a>00003 <span class="comment"> * this work for additional information regarding copyright ownership.</span>
<a name="l00004"></a>00004 <span class="comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</span>
<a name="l00005"></a>00005 <span class="comment"> * (the &quot;License&quot;); you may not use this file except in compliance with</span>
<a name="l00006"></a>00006 <span class="comment"> * the License.  You may obtain a copy of the License at</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00009"></a>00009 <span class="comment"> *</span>
<a name="l00010"></a>00010 <span class="comment"> * Unless required by applicable law or agreed to in writing, software</span>
<a name="l00011"></a>00011 <span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00013"></a>00013 <span class="comment"> * See the License for the specific language governing permissions and</span>
<a name="l00014"></a>00014 <span class="comment"> * limitations under the License.</span>
<a name="l00015"></a>00015 <span class="comment"> */</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#ifndef APR_POOLS_H</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span><span class="preprocessor">#define APR_POOLS_H</span>
<a name="l00019"></a>00019 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00020"></a>00020 <span class="comment">/**</span>
<a name="l00021"></a>00021 <span class="comment"> * @file apr_pools.h</span>
<a name="l00022"></a>00022 <span class="comment"> * @brief APR memory allocation</span>
<a name="l00023"></a>00023 <span class="comment"> *</span>
<a name="l00024"></a>00024 <span class="comment"> * Resource allocation routines...</span>
<a name="l00025"></a>00025 <span class="comment"> *</span>
<a name="l00026"></a>00026 <span class="comment"> * designed so that we don&#39;t have to keep track of EVERYTHING so that</span>
<a name="l00027"></a>00027 <span class="comment"> * it can be explicitly freed later (a fundamentally unsound strategy ---</span>
<a name="l00028"></a>00028 <span class="comment"> * particularly in the presence of die()).</span>
<a name="l00029"></a>00029 <span class="comment"> *</span>
<a name="l00030"></a>00030 <span class="comment"> * Instead, we maintain pools, and allocate items (both memory and I/O</span>
<a name="l00031"></a>00031 <span class="comment"> * handlers) from the pools --- currently there are two, one for per</span>
<a name="l00032"></a>00032 <span class="comment"> * transaction info, and one for config info.  When a transaction is over,</span>
<a name="l00033"></a>00033 <span class="comment"> * we can delete everything in the per-transaction apr_pool_t without fear,</span>
<a name="l00034"></a>00034 <span class="comment"> * and without thinking too hard about it either.</span>
<a name="l00035"></a>00035 <span class="comment"> */</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="apr_8h.html" title="APR Platform Definitions.">apr.h</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="apr__errno_8h.html" title="APR Error Codes.">apr_errno.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="apr__general_8h.html" title="APR Miscellaneous library routines.">apr_general.h</a>&quot;</span> <span class="comment">/* for APR_STRINGIFY */</span>
<a name="l00040"></a><a class="code" href="apr__pools_8h.html#a26faf43e3f61783d8b7aa928c0a41a11">00040</a> <span class="preprocessor">#define APR_WANT_MEMFUNC </span><span class="comment">/**&lt; for no good reason? */</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="apr__want_8h.html" title="APR Standard Headers Support.">apr_want.h</a>&quot;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00045"></a>00045 <span class="preprocessor">#endif</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00047"></a>00047 <span class="comment">/**</span>
<a name="l00048"></a>00048 <span class="comment"> * @defgroup apr_pools Memory Pool Functions</span>
<a name="l00049"></a>00049 <span class="comment"> * @ingroup APR </span>
<a name="l00050"></a>00050 <span class="comment"> * @{</span>
<a name="l00051"></a>00051 <span class="comment"> */</span>
<a name="l00052"></a>00052 <span class="comment"></span>
<a name="l00053"></a>00053 <span class="comment">/** The fundamental pool type */</span>
<a name="l00054"></a><a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">00054</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a>;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment"></span>
<a name="l00057"></a>00057 <span class="comment">/**</span>
<a name="l00058"></a>00058 <span class="comment"> * Declaration helper macro to construct apr_foo_pool_get()s.</span>
<a name="l00059"></a>00059 <span class="comment"> *</span>
<a name="l00060"></a>00060 <span class="comment"> * This standardized macro is used by opaque (APR) data types to return</span>
<a name="l00061"></a>00061 <span class="comment"> * the apr_pool_t that is associated with the data type.</span>
<a name="l00062"></a>00062 <span class="comment"> *</span>
<a name="l00063"></a>00063 <span class="comment"> * APR_POOL_DECLARE_ACCESSOR() is used in a header file to declare the</span>
<a name="l00064"></a>00064 <span class="comment"> * accessor function. A typical usage and result would be:</span>
<a name="l00065"></a>00065 <span class="comment"> * &lt;pre&gt;</span>
<a name="l00066"></a>00066 <span class="comment"> *    APR_POOL_DECLARE_ACCESSOR(file);</span>
<a name="l00067"></a>00067 <span class="comment"> * becomes:</span>
<a name="l00068"></a>00068 <span class="comment"> *    APR_DECLARE(apr_pool_t *) apr_file_pool_get(apr_file_t *ob);</span>
<a name="l00069"></a>00069 <span class="comment"> * &lt;/pre&gt;</span>
<a name="l00070"></a>00070 <span class="comment"> * @remark Doxygen unwraps this macro (via doxygen.conf) to provide </span>
<a name="l00071"></a>00071 <span class="comment"> * actual help for each specific occurance of apr_foo_pool_get.</span>
<a name="l00072"></a>00072 <span class="comment"> * @remark the linkage is specified for APR. It would be possible to expand</span>
<a name="l00073"></a>00073 <span class="comment"> *       the macros to support other linkages.</span>
<a name="l00074"></a>00074 <span class="comment"> */</span>
<a name="l00075"></a><a class="code" href="group__apr__pools.html#ga89ce1d55c7f0c39ea87c88eabd655394">00075</a> <span class="preprocessor">#define APR_POOL_DECLARE_ACCESSOR(type) \</span>
<a name="l00076"></a>00076 <span class="preprocessor">    APR_DECLARE(apr_pool_t *) apr_##type##_pool_get \</span>
<a name="l00077"></a>00077 <span class="preprocessor">        (const apr_##type##_t *the##type)</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00079"></a>00079 <span class="comment">/** </span>
<a name="l00080"></a>00080 <span class="comment"> * Implementation helper macro to provide apr_foo_pool_get()s.</span>
<a name="l00081"></a>00081 <span class="comment"> *</span>
<a name="l00082"></a>00082 <span class="comment"> * In the implementation, the APR_POOL_IMPLEMENT_ACCESSOR() is used to</span>
<a name="l00083"></a>00083 <span class="comment"> * actually define the function. It assumes the field is named &quot;pool&quot;.</span>
<a name="l00084"></a>00084 <span class="comment"> */</span>
<a name="l00085"></a><a class="code" href="group__apr__pools.html#ga43a8a52f68f8b7d3b7694c254da4a074">00085</a> <span class="preprocessor">#define APR_POOL_IMPLEMENT_ACCESSOR(type) \</span>
<a name="l00086"></a>00086 <span class="preprocessor">    APR_DECLARE(apr_pool_t *) apr_##type##_pool_get \</span>
<a name="l00087"></a>00087 <span class="preprocessor">            (const apr_##type##_t *the##type) \</span>
<a name="l00088"></a>00088 <span class="preprocessor">        { return the##type-&gt;pool; }</span>
<a name="l00089"></a>00089 <span class="preprocessor"></span>
<a name="l00090"></a>00090 <span class="comment"></span>
<a name="l00091"></a>00091 <span class="comment">/**</span>
<a name="l00092"></a>00092 <span class="comment"> * Pool debug levels</span>
<a name="l00093"></a>00093 <span class="comment"> *</span>
<a name="l00094"></a>00094 <span class="comment"> * &lt;pre&gt;</span>
<a name="l00095"></a>00095 <span class="comment"> * | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |</span>
<a name="l00096"></a>00096 <span class="comment"> * ---------------------------------</span>
<a name="l00097"></a>00097 <span class="comment"> * |   |   |   |   |   |   |   | x |  General debug code enabled (useful in</span>
<a name="l00098"></a>00098 <span class="comment"> *                                    combination with --with-efence).</span>
<a name="l00099"></a>00099 <span class="comment"> *</span>
<a name="l00100"></a>00100 <span class="comment"> * |   |   |   |   |   |   | x |   |  Verbose output on stderr (report</span>
<a name="l00101"></a>00101 <span class="comment"> *                                    CREATE, CLEAR, DESTROY).</span>
<a name="l00102"></a>00102 <span class="comment"> *</span>
<a name="l00103"></a>00103 <span class="comment"> * |   |   |   | x |   |   |   |   |  Verbose output on stderr (report</span>
<a name="l00104"></a>00104 <span class="comment"> *                                    PALLOC, PCALLOC).</span>
<a name="l00105"></a>00105 <span class="comment"> *</span>
<a name="l00106"></a>00106 <span class="comment"> * |   |   |   |   |   | x |   |   |  Lifetime checking. On each use of a</span>
<a name="l00107"></a>00107 <span class="comment"> *                                    pool, check its lifetime.  If the pool</span>
<a name="l00108"></a>00108 <span class="comment"> *                                    is out of scope, abort().</span>
<a name="l00109"></a>00109 <span class="comment"> *                                    In combination with the verbose flag</span>
<a name="l00110"></a>00110 <span class="comment"> *                                    above, it will output LIFE in such an</span>
<a name="l00111"></a>00111 <span class="comment"> *                                    event prior to aborting.</span>
<a name="l00112"></a>00112 <span class="comment"> *</span>
<a name="l00113"></a>00113 <span class="comment"> * |   |   |   |   | x |   |   |   |  Pool owner checking.  On each use of a</span>
<a name="l00114"></a>00114 <span class="comment"> *                                    pool, check if the current thread is the</span>
<a name="l00115"></a>00115 <span class="comment"> *                                    pools owner.  If not, abort().  In</span>
<a name="l00116"></a>00116 <span class="comment"> *                                    combination with the verbose flag above,</span>
<a name="l00117"></a>00117 <span class="comment"> *                                    it will output OWNER in such an event</span>
<a name="l00118"></a>00118 <span class="comment"> *                                    prior to aborting.  Use the debug</span>
<a name="l00119"></a>00119 <span class="comment"> *                                    function apr_pool_owner_set() to switch</span>
<a name="l00120"></a>00120 <span class="comment"> *                                    a pools ownership.</span>
<a name="l00121"></a>00121 <span class="comment"> *</span>
<a name="l00122"></a>00122 <span class="comment"> * When no debug level was specified, assume general debug mode.</span>
<a name="l00123"></a>00123 <span class="comment"> * If level 0 was specified, debugging is switched off</span>
<a name="l00124"></a>00124 <span class="comment"> * &lt;/pre&gt;</span>
<a name="l00125"></a>00125 <span class="comment"> */</span>
<a name="l00126"></a>00126 <span class="preprocessor">#if defined(APR_POOL_DEBUG)</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span><span class="comment">/* If APR_POOL_DEBUG is blank, we get 1; if it is a number, we get -1. */</span>
<a name="l00128"></a>00128 <span class="preprocessor">#if (APR_POOL_DEBUG - APR_POOL_DEBUG -1 == 1)</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span><span class="preprocessor">#undef APR_POOL_DEBUG</span>
<a name="l00130"></a>00130 <span class="preprocessor"></span><span class="preprocessor">#define APR_POOL_DEBUG 1</span>
<a name="l00131"></a>00131 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00132"></a>00132 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00133"></a><a class="code" href="group__apr__pools.html#gad898431056ee6f544e0632f2cf5706c4">00133</a> <span class="preprocessor"></span><span class="preprocessor">#define APR_POOL_DEBUG 0</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00135"></a>00135 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00136"></a>00136 <span class="comment">/** the place in the code where the particular function was called */</span>
<a name="l00137"></a><a class="code" href="group__apr__pools.html#gac81cff34d0ff4be52fa924663478eade">00137</a> <span class="preprocessor">#define APR_POOL__FILE_LINE__ __FILE__ &quot;:&quot; APR_STRINGIFY(__LINE__)</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span>
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="comment"></span>
<a name="l00141"></a>00141 <span class="comment">/** A function that is called when allocation fails. */</span>
<a name="l00142"></a><a class="code" href="group__apr__pools.html#ga0a1fe549a7c45b864c003ddf12115365">00142</a> <span class="keyword">typedef</span> int (*<a class="code" href="group__apr__pools.html#ga0a1fe549a7c45b864c003ddf12115365">apr_abortfunc_t</a>)(<span class="keywordtype">int</span> retcode);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="comment">/*</span>
<a name="l00145"></a>00145 <span class="comment"> * APR memory structure manipulators (pools, tables, and arrays).</span>
<a name="l00146"></a>00146 <span class="comment"> */</span>
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 <span class="comment">/*</span>
<a name="l00149"></a>00149 <span class="comment"> * Initialization</span>
<a name="l00150"></a>00150 <span class="comment"> */</span>
<a name="l00151"></a>00151 <span class="comment"></span>
<a name="l00152"></a>00152 <span class="comment">/**</span>
<a name="l00153"></a>00153 <span class="comment"> * Setup all of the internal structures required to use pools</span>
<a name="l00154"></a>00154 <span class="comment"> * @remark Programs do NOT need to call this directly.  APR will call this</span>
<a name="l00155"></a>00155 <span class="comment"> *      automatically from apr_initialize.</span>
<a name="l00156"></a>00156 <span class="comment"> * @internal</span>
<a name="l00157"></a>00157 <span class="comment"> */</span>
<a name="l00158"></a>00158 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__pools.html#gad64a6a29515621bc13f8a8da50366d67">apr_pool_initialize</a>(<span class="keywordtype">void</span>);
<a name="l00159"></a>00159 <span class="comment"></span>
<a name="l00160"></a>00160 <span class="comment">/**</span>
<a name="l00161"></a>00161 <span class="comment"> * Tear down all of the internal structures required to use pools</span>
<a name="l00162"></a>00162 <span class="comment"> * @remark Programs do NOT need to call this directly.  APR will call this</span>
<a name="l00163"></a>00163 <span class="comment"> *      automatically from apr_terminate.</span>
<a name="l00164"></a>00164 <span class="comment"> * @internal</span>
<a name="l00165"></a>00165 <span class="comment"> */</span>
<a name="l00166"></a>00166 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__apr__pools.html#ga3728aacec227318cef973b8a33f3b430">apr_pool_terminate</a>(<span class="keywordtype">void</span>);
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 <span class="comment">/*</span>
<a name="l00170"></a>00170 <span class="comment"> * Pool creation/destruction</span>
<a name="l00171"></a>00171 <span class="comment"> */</span>
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 <span class="preprocessor">#include &quot;apr_allocator.h&quot;</span>
<a name="l00174"></a>00174 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00175"></a>00175 <span class="comment">/**</span>
<a name="l00176"></a>00176 <span class="comment"> * Create a new pool.</span>
<a name="l00177"></a>00177 <span class="comment"> * @param newpool The pool we have just created.</span>
<a name="l00178"></a>00178 <span class="comment"> * @param parent The parent pool.  If this is NULL, the new pool is a root</span>
<a name="l00179"></a>00179 <span class="comment"> *        pool.  If it is non-NULL, the new pool will inherit all</span>
<a name="l00180"></a>00180 <span class="comment"> *        of its parent pool&#39;s attributes, except the apr_pool_t will</span>
<a name="l00181"></a>00181 <span class="comment"> *        be a sub-pool.</span>
<a name="l00182"></a>00182 <span class="comment"> * @param abort_fn A function to use if the pool cannot allocate more memory.</span>
<a name="l00183"></a>00183 <span class="comment"> * @param allocator The allocator to use with the new pool.  If NULL the</span>
<a name="l00184"></a>00184 <span class="comment"> *        allocator of the parent pool will be used.</span>
<a name="l00185"></a>00185 <span class="comment"> */</span>
<a name="l00186"></a>00186 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__pools.html#gab274bd29e4e4d4944b4618403148074f">apr_pool_create_ex</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> **newpool,
<a name="l00187"></a>00187                                              <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *parent,
<a name="l00188"></a>00188                                              <a class="code" href="group__apr__pools.html#ga0a1fe549a7c45b864c003ddf12115365">apr_abortfunc_t</a> abort_fn,
<a name="l00189"></a>00189                                              <a class="code" href="group__apr__allocator.html#ga1ceabfd30fcfc455e47d052d2a24244b">apr_allocator_t</a> *allocator);
<a name="l00190"></a>00190 <span class="comment"></span>
<a name="l00191"></a>00191 <span class="comment">/**</span>
<a name="l00192"></a>00192 <span class="comment"> * Create a new pool.</span>
<a name="l00193"></a>00193 <span class="comment"> * @deprecated @see apr_pool_create_unmanaged_ex.</span>
<a name="l00194"></a>00194 <span class="comment"> */</span>
<a name="l00195"></a>00195 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__pools.html#ga20e514c83555398acddc30c4dfa0c540">apr_pool_create_core_ex</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> **newpool,
<a name="l00196"></a>00196                                                   <a class="code" href="group__apr__pools.html#ga0a1fe549a7c45b864c003ddf12115365">apr_abortfunc_t</a> abort_fn,
<a name="l00197"></a>00197                                                   <a class="code" href="group__apr__allocator.html#ga1ceabfd30fcfc455e47d052d2a24244b">apr_allocator_t</a> *allocator);
<a name="l00198"></a>00198 <span class="comment"></span>
<a name="l00199"></a>00199 <span class="comment">/**</span>
<a name="l00200"></a>00200 <span class="comment"> * Create a new unmanaged pool.</span>
<a name="l00201"></a>00201 <span class="comment"> * @param newpool The pool we have just created.</span>
<a name="l00202"></a>00202 <span class="comment"> * @param abort_fn A function to use if the pool cannot allocate more memory.</span>
<a name="l00203"></a>00203 <span class="comment"> * @param allocator The allocator to use with the new pool.  If NULL a</span>
<a name="l00204"></a>00204 <span class="comment"> *        new allocator will be crated with newpool as owner.</span>
<a name="l00205"></a>00205 <span class="comment"> * @remark An unmanaged pool is a special pool without a parent; it will</span>
<a name="l00206"></a>00206 <span class="comment"> *         NOT be destroyed upon apr_terminate.  It must be explicitly</span>
<a name="l00207"></a>00207 <span class="comment"> *         destroyed by calling apr_pool_destroy, to prevent memory leaks.</span>
<a name="l00208"></a>00208 <span class="comment"> *         Use of this function is discouraged, think twice about whether</span>
<a name="l00209"></a>00209 <span class="comment"> *         you really really need it.</span>
<a name="l00210"></a>00210 <span class="comment"> */</span>
<a name="l00211"></a>00211 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__pools.html#gaae7212db77bb57f86419cd594f73a92f">apr_pool_create_unmanaged_ex</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> **newpool,
<a name="l00212"></a>00212                                                    <a class="code" href="group__apr__pools.html#ga0a1fe549a7c45b864c003ddf12115365">apr_abortfunc_t</a> abort_fn,
<a name="l00213"></a>00213                                                    <a class="code" href="group__apr__allocator.html#ga1ceabfd30fcfc455e47d052d2a24244b">apr_allocator_t</a> *allocator);
<a name="l00214"></a>00214 <span class="comment"></span>
<a name="l00215"></a>00215 <span class="comment">/**</span>
<a name="l00216"></a>00216 <span class="comment"> * Debug version of apr_pool_create_ex.</span>
<a name="l00217"></a>00217 <span class="comment"> * @param newpool @see apr_pool_create.</span>
<a name="l00218"></a>00218 <span class="comment"> * @param parent @see apr_pool_create.</span>
<a name="l00219"></a>00219 <span class="comment"> * @param abort_fn @see apr_pool_create.</span>
<a name="l00220"></a>00220 <span class="comment"> * @param allocator @see apr_pool_create.</span>
<a name="l00221"></a>00221 <span class="comment"> * @param file_line Where the function is called from.</span>
<a name="l00222"></a>00222 <span class="comment"> *        This is usually APR_POOL__FILE_LINE__.</span>
<a name="l00223"></a>00223 <span class="comment"> * @remark Only available when APR_POOL_DEBUG is defined.</span>
<a name="l00224"></a>00224 <span class="comment"> *         Call this directly if you have you apr_pool_create_ex</span>
<a name="l00225"></a>00225 <span class="comment"> *         calls in a wrapper function and wish to override</span>
<a name="l00226"></a>00226 <span class="comment"> *         the file_line argument to reflect the caller of</span>
<a name="l00227"></a>00227 <span class="comment"> *         your wrapper function.  If you do not have</span>
<a name="l00228"></a>00228 <span class="comment"> *         apr_pool_create_ex in a wrapper, trust the macro</span>
<a name="l00229"></a>00229 <span class="comment"> *         and don&#39;t call apr_pool_create_ex_debug directly.</span>
<a name="l00230"></a>00230 <span class="comment"> */</span>
<a name="l00231"></a>00231 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__pools.html#gacbea97ae5c0c861f6b7c147d46ac1d0c">apr_pool_create_ex_debug</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> **newpool,
<a name="l00232"></a>00232                                                    <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *parent,
<a name="l00233"></a>00233                                                    <a class="code" href="group__apr__pools.html#ga0a1fe549a7c45b864c003ddf12115365">apr_abortfunc_t</a> abort_fn,
<a name="l00234"></a>00234                                                    <a class="code" href="group__apr__allocator.html#ga1ceabfd30fcfc455e47d052d2a24244b">apr_allocator_t</a> *allocator,
<a name="l00235"></a>00235                                                    const <span class="keywordtype">char</span> *file_line);
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 <span class="preprocessor">#if APR_POOL_DEBUG</span>
<a name="l00238"></a>00238 <span class="preprocessor"></span><span class="preprocessor">#define apr_pool_create_ex(newpool, parent, abort_fn, allocator)  \</span>
<a name="l00239"></a>00239 <span class="preprocessor">    apr_pool_create_ex_debug(newpool, parent, abort_fn, allocator, \</span>
<a name="l00240"></a>00240 <span class="preprocessor">                             APR_POOL__FILE_LINE__)</span>
<a name="l00241"></a>00241 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00242"></a>00242 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00243"></a>00243 <span class="comment">/**</span>
<a name="l00244"></a>00244 <span class="comment"> * Debug version of apr_pool_create_core_ex.</span>
<a name="l00245"></a>00245 <span class="comment"> * @deprecated @see apr_pool_create_unmanaged_ex_debug.</span>
<a name="l00246"></a>00246 <span class="comment"> */</span>
<a name="l00247"></a>00247 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__pools.html#gaa1c5bfc44188884bb439670f81448c20">apr_pool_create_core_ex_debug</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> **newpool,
<a name="l00248"></a>00248                                                    <a class="code" href="group__apr__pools.html#ga0a1fe549a7c45b864c003ddf12115365">apr_abortfunc_t</a> abort_fn,
<a name="l00249"></a>00249                                                    <a class="code" href="group__apr__allocator.html#ga1ceabfd30fcfc455e47d052d2a24244b">apr_allocator_t</a> *allocator,
<a name="l00250"></a>00250                                                    const <span class="keywordtype">char</span> *file_line);
<a name="l00251"></a>00251 <span class="comment"></span>
<a name="l00252"></a>00252 <span class="comment">/**</span>
<a name="l00253"></a>00253 <span class="comment"> * Debug version of apr_pool_create_unmanaged_ex.</span>
<a name="l00254"></a>00254 <span class="comment"> * @param newpool @see apr_pool_create_unmanaged.</span>
<a name="l00255"></a>00255 <span class="comment"> * @param abort_fn @see apr_pool_create_unmanaged.</span>
<a name="l00256"></a>00256 <span class="comment"> * @param allocator @see apr_pool_create_unmanaged.</span>
<a name="l00257"></a>00257 <span class="comment"> * @param file_line Where the function is called from.</span>
<a name="l00258"></a>00258 <span class="comment"> *        This is usually APR_POOL__FILE_LINE__.</span>
<a name="l00259"></a>00259 <span class="comment"> * @remark Only available when APR_POOL_DEBUG is defined.</span>
<a name="l00260"></a>00260 <span class="comment"> *         Call this directly if you have you apr_pool_create_unmanaged_ex</span>
<a name="l00261"></a>00261 <span class="comment"> *         calls in a wrapper function and wish to override</span>
<a name="l00262"></a>00262 <span class="comment"> *         the file_line argument to reflect the caller of</span>
<a name="l00263"></a>00263 <span class="comment"> *         your wrapper function.  If you do not have</span>
<a name="l00264"></a>00264 <span class="comment"> *         apr_pool_create_core_ex in a wrapper, trust the macro</span>
<a name="l00265"></a>00265 <span class="comment"> *         and don&#39;t call apr_pool_create_core_ex_debug directly.</span>
<a name="l00266"></a>00266 <span class="comment"> */</span>
<a name="l00267"></a>00267 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__pools.html#gae220e572b14355f1aa7b21c8fb022524">apr_pool_create_unmanaged_ex_debug</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> **newpool,
<a name="l00268"></a>00268                                                    <a class="code" href="group__apr__pools.html#ga0a1fe549a7c45b864c003ddf12115365">apr_abortfunc_t</a> abort_fn,
<a name="l00269"></a>00269                                                    <a class="code" href="group__apr__allocator.html#ga1ceabfd30fcfc455e47d052d2a24244b">apr_allocator_t</a> *allocator,
<a name="l00270"></a>00270                                                    const <span class="keywordtype">char</span> *file_line);
<a name="l00271"></a>00271 
<a name="l00272"></a>00272 <span class="preprocessor">#if APR_POOL_DEBUG</span>
<a name="l00273"></a>00273 <span class="preprocessor"></span><span class="preprocessor">#define apr_pool_create_core_ex(newpool, abort_fn, allocator)  \</span>
<a name="l00274"></a>00274 <span class="preprocessor">    apr_pool_create_unmanaged_ex_debug(newpool, abort_fn, allocator, \</span>
<a name="l00275"></a>00275 <span class="preprocessor">                                  APR_POOL__FILE_LINE__)</span>
<a name="l00276"></a>00276 <span class="preprocessor"></span>
<a name="l00277"></a>00277 <span class="preprocessor">#define apr_pool_create_unmanaged_ex(newpool, abort_fn, allocator)  \</span>
<a name="l00278"></a>00278 <span class="preprocessor">    apr_pool_create_unmanaged_ex_debug(newpool, abort_fn, allocator, \</span>
<a name="l00279"></a>00279 <span class="preprocessor">                                  APR_POOL__FILE_LINE__)</span>
<a name="l00280"></a>00280 <span class="preprocessor"></span>
<a name="l00281"></a>00281 <span class="preprocessor">#endif</span>
<a name="l00282"></a>00282 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00283"></a>00283 <span class="comment">/**</span>
<a name="l00284"></a>00284 <span class="comment"> * Create a new pool.</span>
<a name="l00285"></a>00285 <span class="comment"> * @param newpool The pool we have just created.</span>
<a name="l00286"></a>00286 <span class="comment"> * @param parent The parent pool.  If this is NULL, the new pool is a root</span>
<a name="l00287"></a>00287 <span class="comment"> *        pool.  If it is non-NULL, the new pool will inherit all</span>
<a name="l00288"></a>00288 <span class="comment"> *        of its parent pool&#39;s attributes, except the apr_pool_t will</span>
<a name="l00289"></a>00289 <span class="comment"> *        be a sub-pool.</span>
<a name="l00290"></a>00290 <span class="comment"> */</span>
<a name="l00291"></a>00291 <span class="preprocessor">#if defined(DOXYGEN)</span>
<a name="l00292"></a>00292 <span class="preprocessor"></span><a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__pools.html#ga918adf3026c894efeae254a0446aed3b">apr_pool_create</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> **newpool,
<a name="l00293"></a>00293                                           <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *parent);
<a name="l00294"></a>00294 <span class="preprocessor">#else</span>
<a name="l00295"></a>00295 <span class="preprocessor"></span><span class="preprocessor">#if APR_POOL_DEBUG</span>
<a name="l00296"></a>00296 <span class="preprocessor"></span><span class="preprocessor">#define apr_pool_create(newpool, parent) \</span>
<a name="l00297"></a>00297 <span class="preprocessor">    apr_pool_create_ex_debug(newpool, parent, NULL, NULL, \</span>
<a name="l00298"></a>00298 <span class="preprocessor">                             APR_POOL__FILE_LINE__)</span>
<a name="l00299"></a>00299 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00300"></a>00300 <span class="preprocessor"></span><span class="preprocessor">#define apr_pool_create(newpool, parent) \</span>
<a name="l00301"></a>00301 <span class="preprocessor">    apr_pool_create_ex(newpool, parent, NULL, NULL)</span>
<a name="l00302"></a>00302 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00303"></a>00303 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00304"></a>00304 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00305"></a>00305 <span class="comment">/**</span>
<a name="l00306"></a>00306 <span class="comment"> * Create a new pool.</span>
<a name="l00307"></a>00307 <span class="comment"> * @param newpool The pool we have just created.</span>
<a name="l00308"></a>00308 <span class="comment"> */</span>
<a name="l00309"></a>00309 <span class="preprocessor">#if defined(DOXYGEN)</span>
<a name="l00310"></a>00310 <span class="preprocessor"></span><a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__pools.html#gad3675378924bc9d98e46258c049f1761">apr_pool_create_core</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> **newpool);
<a name="l00311"></a>00311 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) apr_pool_create_unmanaged(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> **newpool);
<a name="l00312"></a>00312 <span class="preprocessor">#else</span>
<a name="l00313"></a>00313 <span class="preprocessor"></span><span class="preprocessor">#if APR_POOL_DEBUG</span>
<a name="l00314"></a>00314 <span class="preprocessor"></span><span class="preprocessor">#define apr_pool_create_core(newpool) \</span>
<a name="l00315"></a>00315 <span class="preprocessor">    apr_pool_create_unmanaged_ex_debug(newpool, NULL, NULL, \</span>
<a name="l00316"></a>00316 <span class="preprocessor">                                  APR_POOL__FILE_LINE__)</span>
<a name="l00317"></a>00317 <span class="preprocessor"></span><span class="preprocessor">#define apr_pool_create_unmanaged(newpool) \</span>
<a name="l00318"></a>00318 <span class="preprocessor">    apr_pool_create_unmanaged_ex_debug(newpool, NULL, NULL, \</span>
<a name="l00319"></a>00319 <span class="preprocessor">                                  APR_POOL__FILE_LINE__)</span>
<a name="l00320"></a>00320 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00321"></a>00321 <span class="preprocessor"></span><span class="preprocessor">#define apr_pool_create_core(newpool) \</span>
<a name="l00322"></a>00322 <span class="preprocessor">    apr_pool_create_unmanaged_ex(newpool, NULL, NULL)</span>
<a name="l00323"></a>00323 <span class="preprocessor"></span><span class="preprocessor">#define apr_pool_create_unmanaged(newpool) \</span>
<a name="l00324"></a>00324 <span class="preprocessor">    apr_pool_create_unmanaged_ex(newpool, NULL, NULL)</span>
<a name="l00325"></a>00325 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00326"></a>00326 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00327"></a>00327 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00328"></a>00328 <span class="comment">/**</span>
<a name="l00329"></a>00329 <span class="comment"> * Find the pools allocator</span>
<a name="l00330"></a>00330 <span class="comment"> * @param pool The pool to get the allocator from.</span>
<a name="l00331"></a>00331 <span class="comment"> */</span>
<a name="l00332"></a>00332 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__allocator.html#ga1ceabfd30fcfc455e47d052d2a24244b">apr_allocator_t</a> *) <a class="code" href="group__apr__pools.html#gaf446fcf5da1fcd62d3f802a4c0c10f97">apr_pool_allocator_get</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool);
<a name="l00333"></a>00333 <span class="comment"></span>
<a name="l00334"></a>00334 <span class="comment">/**</span>
<a name="l00335"></a>00335 <span class="comment"> * Clear all memory in the pool and run all the cleanups. This also destroys all</span>
<a name="l00336"></a>00336 <span class="comment"> * subpools.</span>
<a name="l00337"></a>00337 <span class="comment"> * @param p The pool to clear</span>
<a name="l00338"></a>00338 <span class="comment"> * @remark This does not actually free the memory, it just allows the pool</span>
<a name="l00339"></a>00339 <span class="comment"> *         to re-use this memory for the next allocation.</span>
<a name="l00340"></a>00340 <span class="comment"> * @see apr_pool_destroy()</span>
<a name="l00341"></a>00341 <span class="comment"> */</span>
<a name="l00342"></a>00342 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__apr__pools.html#gafa8a998cd660e82b62aecec09e239d0d">apr_pool_clear</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p);
<a name="l00343"></a>00343 <span class="comment"></span>
<a name="l00344"></a>00344 <span class="comment">/**</span>
<a name="l00345"></a>00345 <span class="comment"> * Debug version of apr_pool_clear.</span>
<a name="l00346"></a>00346 <span class="comment"> * @param p See: apr_pool_clear.</span>
<a name="l00347"></a>00347 <span class="comment"> * @param file_line Where the function is called from.</span>
<a name="l00348"></a>00348 <span class="comment"> *        This is usually APR_POOL__FILE_LINE__.</span>
<a name="l00349"></a>00349 <span class="comment"> * @remark Only available when APR_POOL_DEBUG is defined.</span>
<a name="l00350"></a>00350 <span class="comment"> *         Call this directly if you have you apr_pool_clear</span>
<a name="l00351"></a>00351 <span class="comment"> *         calls in a wrapper function and wish to override</span>
<a name="l00352"></a>00352 <span class="comment"> *         the file_line argument to reflect the caller of</span>
<a name="l00353"></a>00353 <span class="comment"> *         your wrapper function.  If you do not have</span>
<a name="l00354"></a>00354 <span class="comment"> *         apr_pool_clear in a wrapper, trust the macro</span>
<a name="l00355"></a>00355 <span class="comment"> *         and don&#39;t call apr_pool_destroy_clear directly.</span>
<a name="l00356"></a>00356 <span class="comment"> */</span>
<a name="l00357"></a>00357 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__apr__pools.html#ga9521870e42ec4395a0bf8388706a57b9">apr_pool_clear_debug</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p,
<a name="l00358"></a>00358                                        const <span class="keywordtype">char</span> *file_line);
<a name="l00359"></a>00359 
<a name="l00360"></a>00360 <span class="preprocessor">#if APR_POOL_DEBUG</span>
<a name="l00361"></a>00361 <span class="preprocessor"></span><span class="preprocessor">#define apr_pool_clear(p) \</span>
<a name="l00362"></a>00362 <span class="preprocessor">    apr_pool_clear_debug(p, APR_POOL__FILE_LINE__)</span>
<a name="l00363"></a>00363 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00364"></a>00364 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00365"></a>00365 <span class="comment">/**</span>
<a name="l00366"></a>00366 <span class="comment"> * Destroy the pool. This takes similar action as apr_pool_clear() and then</span>
<a name="l00367"></a>00367 <span class="comment"> * frees all the memory.</span>
<a name="l00368"></a>00368 <span class="comment"> * @param p The pool to destroy</span>
<a name="l00369"></a>00369 <span class="comment"> * @remark This will actually free the memory</span>
<a name="l00370"></a>00370 <span class="comment"> */</span>
<a name="l00371"></a>00371 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__apr__pools.html#ga54759954d2cba7cb649ab5680a33f9e3">apr_pool_destroy</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p);
<a name="l00372"></a>00372 <span class="comment"></span>
<a name="l00373"></a>00373 <span class="comment">/**</span>
<a name="l00374"></a>00374 <span class="comment"> * Debug version of apr_pool_destroy.</span>
<a name="l00375"></a>00375 <span class="comment"> * @param p See: apr_pool_destroy.</span>
<a name="l00376"></a>00376 <span class="comment"> * @param file_line Where the function is called from.</span>
<a name="l00377"></a>00377 <span class="comment"> *        This is usually APR_POOL__FILE_LINE__.</span>
<a name="l00378"></a>00378 <span class="comment"> * @remark Only available when APR_POOL_DEBUG is defined.</span>
<a name="l00379"></a>00379 <span class="comment"> *         Call this directly if you have you apr_pool_destroy</span>
<a name="l00380"></a>00380 <span class="comment"> *         calls in a wrapper function and wish to override</span>
<a name="l00381"></a>00381 <span class="comment"> *         the file_line argument to reflect the caller of</span>
<a name="l00382"></a>00382 <span class="comment"> *         your wrapper function.  If you do not have</span>
<a name="l00383"></a>00383 <span class="comment"> *         apr_pool_destroy in a wrapper, trust the macro</span>
<a name="l00384"></a>00384 <span class="comment"> *         and don&#39;t call apr_pool_destroy_debug directly.</span>
<a name="l00385"></a>00385 <span class="comment"> */</span>
<a name="l00386"></a>00386 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__apr__pools.html#ga7efe64dfcce883d7fad9df813d9259fc">apr_pool_destroy_debug</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p,
<a name="l00387"></a>00387                                          const <span class="keywordtype">char</span> *file_line);
<a name="l00388"></a>00388 
<a name="l00389"></a>00389 <span class="preprocessor">#if APR_POOL_DEBUG</span>
<a name="l00390"></a>00390 <span class="preprocessor"></span><span class="preprocessor">#define apr_pool_destroy(p) \</span>
<a name="l00391"></a>00391 <span class="preprocessor">    apr_pool_destroy_debug(p, APR_POOL__FILE_LINE__)</span>
<a name="l00392"></a>00392 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00393"></a>00393 <span class="preprocessor"></span>
<a name="l00394"></a>00394 
<a name="l00395"></a>00395 <span class="comment">/*</span>
<a name="l00396"></a>00396 <span class="comment"> * Memory allocation</span>
<a name="l00397"></a>00397 <span class="comment"> */</span>
<a name="l00398"></a>00398 <span class="comment"></span>
<a name="l00399"></a>00399 <span class="comment">/**</span>
<a name="l00400"></a>00400 <span class="comment"> * Allocate a block of memory from a pool</span>
<a name="l00401"></a>00401 <span class="comment"> * @param p The pool to allocate from</span>
<a name="l00402"></a>00402 <span class="comment"> * @param size The amount of memory to allocate</span>
<a name="l00403"></a>00403 <span class="comment"> * @return The allocated memory</span>
<a name="l00404"></a>00404 <span class="comment"> */</span>
<a name="l00405"></a>00405 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span> *) <a class="code" href="group__apr__pools.html#ga85f1e193c31d109affda72f9a92c6915">apr_palloc</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p, apr_size_t size);
<a name="l00406"></a>00406 <span class="comment"></span>
<a name="l00407"></a>00407 <span class="comment">/**</span>
<a name="l00408"></a>00408 <span class="comment"> * Debug version of apr_palloc</span>
<a name="l00409"></a>00409 <span class="comment"> * @param p See: apr_palloc</span>
<a name="l00410"></a>00410 <span class="comment"> * @param size See: apr_palloc</span>
<a name="l00411"></a>00411 <span class="comment"> * @param file_line Where the function is called from.</span>
<a name="l00412"></a>00412 <span class="comment"> *        This is usually APR_POOL__FILE_LINE__.</span>
<a name="l00413"></a>00413 <span class="comment"> * @return See: apr_palloc</span>
<a name="l00414"></a>00414 <span class="comment"> */</span>
<a name="l00415"></a>00415 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span> *) <a class="code" href="group__apr__pools.html#ga0ac211ac89be868b107776b4183a8174">apr_palloc_debug</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p, apr_size_t size,
<a name="l00416"></a>00416                                      const <span class="keywordtype">char</span> *file_line);
<a name="l00417"></a>00417 
<a name="l00418"></a>00418 <span class="preprocessor">#if APR_POOL_DEBUG</span>
<a name="l00419"></a>00419 <span class="preprocessor"></span><span class="preprocessor">#define apr_palloc(p, size) \</span>
<a name="l00420"></a>00420 <span class="preprocessor">    apr_palloc_debug(p, size, APR_POOL__FILE_LINE__)</span>
<a name="l00421"></a>00421 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00422"></a>00422 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00423"></a>00423 <span class="comment">/**</span>
<a name="l00424"></a>00424 <span class="comment"> * Allocate a block of memory from a pool and set all of the memory to 0</span>
<a name="l00425"></a>00425 <span class="comment"> * @param p The pool to allocate from</span>
<a name="l00426"></a>00426 <span class="comment"> * @param size The amount of memory to allocate</span>
<a name="l00427"></a>00427 <span class="comment"> * @return The allocated memory</span>
<a name="l00428"></a>00428 <span class="comment"> */</span>
<a name="l00429"></a>00429 <span class="preprocessor">#if defined(DOXYGEN)</span>
<a name="l00430"></a>00430 <span class="preprocessor"></span><a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span> *) <a class="code" href="group__apr__pools.html#gaf61c098ad258069d64cdf8c0a9369f9e">apr_pcalloc</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p, apr_size_t size);
<a name="l00431"></a>00431 <span class="preprocessor">#elif !APR_POOL_DEBUG</span>
<a name="l00432"></a>00432 <span class="preprocessor"></span><span class="preprocessor">#define apr_pcalloc(p, size) memset(apr_palloc(p, size), 0, size)</span>
<a name="l00433"></a>00433 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00434"></a>00434 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00435"></a>00435 <span class="comment">/**</span>
<a name="l00436"></a>00436 <span class="comment"> * Debug version of apr_pcalloc</span>
<a name="l00437"></a>00437 <span class="comment"> * @param p See: apr_pcalloc</span>
<a name="l00438"></a>00438 <span class="comment"> * @param size See: apr_pcalloc</span>
<a name="l00439"></a>00439 <span class="comment"> * @param file_line Where the function is called from.</span>
<a name="l00440"></a>00440 <span class="comment"> *        This is usually APR_POOL__FILE_LINE__.</span>
<a name="l00441"></a>00441 <span class="comment"> * @return See: apr_pcalloc</span>
<a name="l00442"></a>00442 <span class="comment"> */</span>
<a name="l00443"></a>00443 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span> *) <a class="code" href="group__apr__pools.html#ga7b43035318ffdc57a6eddab07dc57cb2">apr_pcalloc_debug</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p, apr_size_t size,
<a name="l00444"></a>00444                                       const <span class="keywordtype">char</span> *file_line);
<a name="l00445"></a>00445 
<a name="l00446"></a>00446 <span class="preprocessor">#if APR_POOL_DEBUG</span>
<a name="l00447"></a>00447 <span class="preprocessor"></span><span class="preprocessor">#define apr_pcalloc(p, size) \</span>
<a name="l00448"></a>00448 <span class="preprocessor">    apr_pcalloc_debug(p, size, APR_POOL__FILE_LINE__)</span>
<a name="l00449"></a>00449 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00450"></a>00450 <span class="preprocessor"></span>
<a name="l00451"></a>00451 
<a name="l00452"></a>00452 <span class="comment">/*</span>
<a name="l00453"></a>00453 <span class="comment"> * Pool Properties</span>
<a name="l00454"></a>00454 <span class="comment"> */</span>
<a name="l00455"></a>00455 <span class="comment"></span>
<a name="l00456"></a>00456 <span class="comment">/**</span>
<a name="l00457"></a>00457 <span class="comment"> * Set the function to be called when an allocation failure occurs.</span>
<a name="l00458"></a>00458 <span class="comment"> * @remark If the program wants APR to exit on a memory allocation error,</span>
<a name="l00459"></a>00459 <span class="comment"> *      then this function can be called to set the callback to use (for</span>
<a name="l00460"></a>00460 <span class="comment"> *      performing cleanup and then exiting). If this function is not called,</span>
<a name="l00461"></a>00461 <span class="comment"> *      then APR will return an error and expect the calling program to</span>
<a name="l00462"></a>00462 <span class="comment"> *      deal with the error accordingly.</span>
<a name="l00463"></a>00463 <span class="comment"> */</span>
<a name="l00464"></a>00464 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__apr__pools.html#gaa658b1f10dd13967eaa7c4156d4c2174">apr_pool_abort_set</a>(<a class="code" href="group__apr__pools.html#ga0a1fe549a7c45b864c003ddf12115365">apr_abortfunc_t</a> abortfunc,
<a name="l00465"></a>00465                                      <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool);
<a name="l00466"></a>00466 <span class="comment"></span>
<a name="l00467"></a>00467 <span class="comment">/**</span>
<a name="l00468"></a>00468 <span class="comment"> * Get the abort function associated with the specified pool.</span>
<a name="l00469"></a>00469 <span class="comment"> * @param pool The pool for retrieving the abort function.</span>
<a name="l00470"></a>00470 <span class="comment"> * @return The abort function for the given pool.</span>
<a name="l00471"></a>00471 <span class="comment"> */</span>
<a name="l00472"></a>00472 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__pools.html#ga0a1fe549a7c45b864c003ddf12115365">apr_abortfunc_t</a>) <a class="code" href="group__apr__pools.html#gaf7610c30ef5f84a8742c0b3e63fdd7b0">apr_pool_abort_get</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool);
<a name="l00473"></a>00473 <span class="comment"></span>
<a name="l00474"></a>00474 <span class="comment">/**</span>
<a name="l00475"></a>00475 <span class="comment"> * Get the parent pool of the specified pool.</span>
<a name="l00476"></a>00476 <span class="comment"> * @param pool The pool for retrieving the parent pool.</span>
<a name="l00477"></a>00477 <span class="comment"> * @return The parent of the given pool.</span>
<a name="l00478"></a>00478 <span class="comment"> */</span>
<a name="l00479"></a>00479 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *) <a class="code" href="group__apr__pools.html#ga94db31f40609b15b592ff47f989ca9ec">apr_pool_parent_get</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool);
<a name="l00480"></a>00480 <span class="comment"></span>
<a name="l00481"></a>00481 <span class="comment">/**</span>
<a name="l00482"></a>00482 <span class="comment"> * Determine if pool a is an ancestor of pool b.</span>
<a name="l00483"></a>00483 <span class="comment"> * @param a The pool to search</span>
<a name="l00484"></a>00484 <span class="comment"> * @param b The pool to search for</span>
<a name="l00485"></a>00485 <span class="comment"> * @return True if a is an ancestor of b, NULL is considered an ancestor</span>
<a name="l00486"></a>00486 <span class="comment"> *         of all pools.</span>
<a name="l00487"></a>00487 <span class="comment"> * @remark if compiled with APR_POOL_DEBUG, this function will also</span>
<a name="l00488"></a>00488 <span class="comment"> * return true if A is a pool which has been guaranteed by the caller</span>
<a name="l00489"></a>00489 <span class="comment"> * (using apr_pool_join) to have a lifetime at least as long as some</span>
<a name="l00490"></a>00490 <span class="comment"> * ancestor of pool B.</span>
<a name="l00491"></a>00491 <span class="comment"> */</span>
<a name="l00492"></a>00492 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">int</span>) <a class="code" href="group__apr__pools.html#ga05d299f778659d1e0806140d8a7fea79">apr_pool_is_ancestor</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *a, <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *b);
<a name="l00493"></a>00493 <span class="comment"></span>
<a name="l00494"></a>00494 <span class="comment">/**</span>
<a name="l00495"></a>00495 <span class="comment"> * Tag a pool (give it a name)</span>
<a name="l00496"></a>00496 <span class="comment"> * @param pool The pool to tag</span>
<a name="l00497"></a>00497 <span class="comment"> * @param tag  The tag</span>
<a name="l00498"></a>00498 <span class="comment"> */</span>
<a name="l00499"></a>00499 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group__apr__pools.html#gaeaa872f7999740a60803e95429890518">apr_pool_tag</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool, const <span class="keywordtype">char</span> *tag);
<a name="l00500"></a>00500 
<a name="l00501"></a>00501 
<a name="l00502"></a>00502 <span class="comment">/*</span>
<a name="l00503"></a>00503 <span class="comment"> * User data management</span>
<a name="l00504"></a>00504 <span class="comment"> */</span>
<a name="l00505"></a>00505 <span class="comment"></span>
<a name="l00506"></a>00506 <span class="comment">/**</span>
<a name="l00507"></a>00507 <span class="comment"> * Set the data associated with the current pool</span>
<a name="l00508"></a>00508 <span class="comment"> * @param data The user data associated with the pool.</span>
<a name="l00509"></a>00509 <span class="comment"> * @param key The key to use for association</span>
<a name="l00510"></a>00510 <span class="comment"> * @param cleanup The cleanup program to use to cleanup the data (NULL if none)</span>
<a name="l00511"></a>00511 <span class="comment"> * @param pool The current pool</span>
<a name="l00512"></a>00512 <span class="comment"> * @warning The data to be attached to the pool should have a life span</span>
<a name="l00513"></a>00513 <span class="comment"> *          at least as long as the pool it is being attached to.</span>
<a name="l00514"></a>00514 <span class="comment"> *</span>
<a name="l00515"></a>00515 <span class="comment"> *      Users of APR must take EXTREME care when choosing a key to</span>
<a name="l00516"></a>00516 <span class="comment"> *      use for their data.  It is possible to accidentally overwrite</span>
<a name="l00517"></a>00517 <span class="comment"> *      data by choosing a key that another part of the program is using.</span>
<a name="l00518"></a>00518 <span class="comment"> *      Therefore it is advised that steps are taken to ensure that unique</span>
<a name="l00519"></a>00519 <span class="comment"> *      keys are used for all of the userdata objects in a particular pool</span>
<a name="l00520"></a>00520 <span class="comment"> *      (the same key in two different pools or a pool and one of its</span>
<a name="l00521"></a>00521 <span class="comment"> *      subpools is okay) at all times.  Careful namespace prefixing of</span>
<a name="l00522"></a>00522 <span class="comment"> *      key names is a typical way to help ensure this uniqueness.</span>
<a name="l00523"></a>00523 <span class="comment"> *</span>
<a name="l00524"></a>00524 <span class="comment"> */</span>
<a name="l00525"></a>00525 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__pools.html#ga78d1aa2d9fa842d83eaffccb0f0c0c5c">apr_pool_userdata_set</a>(
<a name="l00526"></a>00526     const <span class="keywordtype">void</span> *data,
<a name="l00527"></a>00527     const <span class="keywordtype">char</span> *key,
<a name="l00528"></a>00528     <a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> (*cleanup)(<span class="keywordtype">void</span> *),
<a name="l00529"></a>00529     <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool);
<a name="l00530"></a>00530 <span class="comment"></span>
<a name="l00531"></a>00531 <span class="comment">/**</span>
<a name="l00532"></a>00532 <span class="comment"> * Set the data associated with the current pool</span>
<a name="l00533"></a>00533 <span class="comment"> * @param data The user data associated with the pool.</span>
<a name="l00534"></a>00534 <span class="comment"> * @param key The key to use for association</span>
<a name="l00535"></a>00535 <span class="comment"> * @param cleanup The cleanup program to use to cleanup the data (NULL if none)</span>
<a name="l00536"></a>00536 <span class="comment"> * @param pool The current pool</span>
<a name="l00537"></a>00537 <span class="comment"> * @note same as apr_pool_userdata_set(), except that this version doesn&#39;t</span>
<a name="l00538"></a>00538 <span class="comment"> *       make a copy of the key (this function is useful, for example, when</span>
<a name="l00539"></a>00539 <span class="comment"> *       the key is a string literal)</span>
<a name="l00540"></a>00540 <span class="comment"> * @warning This should NOT be used if the key could change addresses by</span>
<a name="l00541"></a>00541 <span class="comment"> *       any means between the apr_pool_userdata_setn() call and a</span>
<a name="l00542"></a>00542 <span class="comment"> *       subsequent apr_pool_userdata_get() on that key, such as if a</span>
<a name="l00543"></a>00543 <span class="comment"> *       static string is used as a userdata key in a DSO and the DSO could</span>
<a name="l00544"></a>00544 <span class="comment"> *       be unloaded and reloaded between the _setn() and the _get().  You</span>
<a name="l00545"></a>00545 <span class="comment"> *       MUST use apr_pool_userdata_set() in such cases.</span>
<a name="l00546"></a>00546 <span class="comment"> * @warning More generally, the key and the data to be attached to the</span>
<a name="l00547"></a>00547 <span class="comment"> *       pool should have a life span at least as long as the pool itself.</span>
<a name="l00548"></a>00548 <span class="comment"> *</span>
<a name="l00549"></a>00549 <span class="comment"> */</span>
<a name="l00550"></a>00550 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__pools.html#ga435644c493dc5b10d80c4b99b8cd4589">apr_pool_userdata_setn</a>(
<a name="l00551"></a>00551     const <span class="keywordtype">void</span> *data,
<a name="l00552"></a>00552     const <span class="keywordtype">char</span> *key,
<a name="l00553"></a>00553     <a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> (*cleanup)(<span class="keywordtype">void</span> *),
<a name="l00554"></a>00554     <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool);
<a name="l00555"></a>00555 <span class="comment"></span>
<a name="l00556"></a>00556 <span class="comment">/**</span>
<a name="l00557"></a>00557 <span class="comment"> * Return the data associated with the current pool.</span>
<a name="l00558"></a>00558 <span class="comment"> * @param data The user data associated with the pool.</span>
<a name="l00559"></a>00559 <span class="comment"> * @param key The key for the data to retrieve</span>
<a name="l00560"></a>00560 <span class="comment"> * @param pool The current pool.</span>
<a name="l00561"></a>00561 <span class="comment"> */</span>
<a name="l00562"></a>00562 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__pools.html#gaf930f1fad2cf92a2432c0814c8a0b86f">apr_pool_userdata_get</a>(<span class="keywordtype">void</span> **data, const <span class="keywordtype">char</span> *key,
<a name="l00563"></a>00563                                                 <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool);
<a name="l00564"></a>00564 
<a name="l00565"></a>00565 <span class="comment"></span>
<a name="l00566"></a>00566 <span class="comment">/**</span>
<a name="l00567"></a>00567 <span class="comment"> * @defgroup PoolCleanup  Pool Cleanup Functions</span>
<a name="l00568"></a>00568 <span class="comment"> *</span>
<a name="l00569"></a>00569 <span class="comment"> * Cleanups are performed in the reverse order they were registered.  That is:</span>
<a name="l00570"></a>00570 <span class="comment"> * Last In, First Out.  A cleanup function can safely allocate memory from</span>
<a name="l00571"></a>00571 <span class="comment"> * the pool that is being cleaned up. It can also safely register additional</span>
<a name="l00572"></a>00572 <span class="comment"> * cleanups which will be run LIFO, directly after the current cleanup</span>
<a name="l00573"></a>00573 <span class="comment"> * terminates.  Cleanups have to take caution in calling functions that</span>
<a name="l00574"></a>00574 <span class="comment"> * create subpools. Subpools, created during cleanup will NOT automatically</span>
<a name="l00575"></a>00575 <span class="comment"> * be cleaned up.  In other words, cleanups are to clean up after themselves.</span>
<a name="l00576"></a>00576 <span class="comment"> *</span>
<a name="l00577"></a>00577 <span class="comment"> * @{</span>
<a name="l00578"></a>00578 <span class="comment"> */</span>
<a name="l00579"></a>00579 <span class="comment"></span>
<a name="l00580"></a>00580 <span class="comment">/**</span>
<a name="l00581"></a>00581 <span class="comment"> * Register a function to be called when a pool is cleared or destroyed</span>
<a name="l00582"></a>00582 <span class="comment"> * @param p The pool register the cleanup with</span>
<a name="l00583"></a>00583 <span class="comment"> * @param data The data to pass to the cleanup function.</span>
<a name="l00584"></a>00584 <span class="comment"> * @param plain_cleanup The function to call when the pool is cleared</span>
<a name="l00585"></a>00585 <span class="comment"> *                      or destroyed</span>
<a name="l00586"></a>00586 <span class="comment"> * @param child_cleanup The function to call when a child process is about</span>
<a name="l00587"></a>00587 <span class="comment"> *                      to exec - this function is called in the child, obviously!</span>
<a name="l00588"></a>00588 <span class="comment"> */</span>
<a name="l00589"></a>00589 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group___pool_cleanup.html#ga6bdb28224dfe08160cbe3ba6b22dcbd7">apr_pool_cleanup_register</a>(
<a name="l00590"></a>00590     <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p,
<a name="l00591"></a>00591     const <span class="keywordtype">void</span> *data,
<a name="l00592"></a>00592     <a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> (*plain_cleanup)(<span class="keywordtype">void</span> *),
<a name="l00593"></a>00593     <a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> (*child_cleanup)(<span class="keywordtype">void</span> *));
<a name="l00594"></a>00594 <span class="comment"></span>
<a name="l00595"></a>00595 <span class="comment">/**</span>
<a name="l00596"></a>00596 <span class="comment"> * Register a function to be called when a pool is cleared or destroyed.</span>
<a name="l00597"></a>00597 <span class="comment"> *</span>
<a name="l00598"></a>00598 <span class="comment"> * Unlike apr_pool_cleanup_register which register a cleanup</span>
<a name="l00599"></a>00599 <span class="comment"> * that is called AFTER all subpools are destroyed this function register</span>
<a name="l00600"></a>00600 <span class="comment"> * a function that will be called before any of the subpool is destoryed.</span>
<a name="l00601"></a>00601 <span class="comment"> *</span>
<a name="l00602"></a>00602 <span class="comment"> * @param p The pool register the cleanup with</span>
<a name="l00603"></a>00603 <span class="comment"> * @param data The data to pass to the cleanup function.</span>
<a name="l00604"></a>00604 <span class="comment"> * @param plain_cleanup The function to call when the pool is cleared</span>
<a name="l00605"></a>00605 <span class="comment"> *                      or destroyed</span>
<a name="l00606"></a>00606 <span class="comment"> */</span>
<a name="l00607"></a>00607 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group___pool_cleanup.html#ga64114542989d8872c7fd3c62f2a68678">apr_pool_pre_cleanup_register</a>(
<a name="l00608"></a>00608     <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p,
<a name="l00609"></a>00609     const <span class="keywordtype">void</span> *data,
<a name="l00610"></a>00610     <a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> (*plain_cleanup)(<span class="keywordtype">void</span> *));
<a name="l00611"></a>00611 <span class="comment"></span>
<a name="l00612"></a>00612 <span class="comment">/**</span>
<a name="l00613"></a>00613 <span class="comment"> * Remove a previously registered cleanup function.</span>
<a name="l00614"></a>00614 <span class="comment"> * </span>
<a name="l00615"></a>00615 <span class="comment"> * The cleanup most recently registered with @a p having the same values of</span>
<a name="l00616"></a>00616 <span class="comment"> * @a data and @a cleanup will be removed.</span>
<a name="l00617"></a>00617 <span class="comment"> *</span>
<a name="l00618"></a>00618 <span class="comment"> * @param p The pool to remove the cleanup from</span>
<a name="l00619"></a>00619 <span class="comment"> * @param data The data of the registered cleanup</span>
<a name="l00620"></a>00620 <span class="comment"> * @param cleanup The function to remove from cleanup</span>
<a name="l00621"></a>00621 <span class="comment"> * @remarks For some strange reason only the plain_cleanup is handled by this</span>
<a name="l00622"></a>00622 <span class="comment"> *          function</span>
<a name="l00623"></a>00623 <span class="comment"> */</span>
<a name="l00624"></a>00624 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group___pool_cleanup.html#gadc59bf32a0302e34fa0a2663f6e48a44">apr_pool_cleanup_kill</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p, const <span class="keywordtype">void</span> *data,
<a name="l00625"></a>00625                                         <a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> (*cleanup)(<span class="keywordtype">void</span> *));
<a name="l00626"></a>00626 <span class="comment"></span>
<a name="l00627"></a>00627 <span class="comment">/**</span>
<a name="l00628"></a>00628 <span class="comment"> * Replace the child cleanup function of a previously registered cleanup.</span>
<a name="l00629"></a>00629 <span class="comment"> * </span>
<a name="l00630"></a>00630 <span class="comment"> * The cleanup most recently registered with @a p having the same values of</span>
<a name="l00631"></a>00631 <span class="comment"> * @a data and @a plain_cleanup will have the registered child cleanup</span>
<a name="l00632"></a>00632 <span class="comment"> * function replaced with @a child_cleanup.</span>
<a name="l00633"></a>00633 <span class="comment"> *</span>
<a name="l00634"></a>00634 <span class="comment"> * @param p The pool of the registered cleanup</span>
<a name="l00635"></a>00635 <span class="comment"> * @param data The data of the registered cleanup</span>
<a name="l00636"></a>00636 <span class="comment"> * @param plain_cleanup The plain cleanup function of the registered cleanup</span>
<a name="l00637"></a>00637 <span class="comment"> * @param child_cleanup The function to register as the child cleanup</span>
<a name="l00638"></a>00638 <span class="comment"> */</span>
<a name="l00639"></a>00639 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group___pool_cleanup.html#ga7197fa6b43d9c5e99de17e0e900989ea">apr_pool_child_cleanup_set</a>(
<a name="l00640"></a>00640     <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p,
<a name="l00641"></a>00641     const <span class="keywordtype">void</span> *data,
<a name="l00642"></a>00642     <a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> (*plain_cleanup)(<span class="keywordtype">void</span> *),
<a name="l00643"></a>00643     <a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> (*child_cleanup)(<span class="keywordtype">void</span> *));
<a name="l00644"></a>00644 <span class="comment"></span>
<a name="l00645"></a>00645 <span class="comment">/**</span>
<a name="l00646"></a>00646 <span class="comment"> * Run the specified cleanup function immediately and unregister it.</span>
<a name="l00647"></a>00647 <span class="comment"> *</span>
<a name="l00648"></a>00648 <span class="comment"> * The cleanup most recently registered with @a p having the same values of</span>
<a name="l00649"></a>00649 <span class="comment"> * @a data and @a cleanup will be removed and @a cleanup will be called</span>
<a name="l00650"></a>00650 <span class="comment"> * with @a data as the argument.</span>
<a name="l00651"></a>00651 <span class="comment"> *</span>
<a name="l00652"></a>00652 <span class="comment"> * @param p The pool to remove the cleanup from</span>
<a name="l00653"></a>00653 <span class="comment"> * @param data The data to remove from cleanup</span>
<a name="l00654"></a>00654 <span class="comment"> * @param cleanup The function to remove from cleanup</span>
<a name="l00655"></a>00655 <span class="comment"> */</span>
<a name="l00656"></a>00656 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group___pool_cleanup.html#gabf3913823af6015895a726ab738eaac5">apr_pool_cleanup_run</a>(
<a name="l00657"></a>00657     <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p,
<a name="l00658"></a>00658     <span class="keywordtype">void</span> *data,
<a name="l00659"></a>00659     <a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> (*cleanup)(<span class="keywordtype">void</span> *));
<a name="l00660"></a>00660 <span class="comment"></span>
<a name="l00661"></a>00661 <span class="comment">/**</span>
<a name="l00662"></a>00662 <span class="comment"> * An empty cleanup function.</span>
<a name="l00663"></a>00663 <span class="comment"> * </span>
<a name="l00664"></a>00664 <span class="comment"> * Passed to apr_pool_cleanup_register() when no cleanup is required.</span>
<a name="l00665"></a>00665 <span class="comment"> *</span>
<a name="l00666"></a>00666 <span class="comment"> * @param data The data to cleanup, will not be used by this function.</span>
<a name="l00667"></a>00667 <span class="comment"> */</span>
<a name="l00668"></a>00668 <a class="code" href="group__apr__platform.html#ga3ad5e45fabbda0ec5f106c334f1a0ae5">APR_DECLARE_NONSTD</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group___pool_cleanup.html#gaa211acee585df08f396a50b0ea489b02">apr_pool_cleanup_null</a>(<span class="keywordtype">void</span> *data);
<a name="l00669"></a>00669 <span class="comment"></span>
<a name="l00670"></a>00670 <span class="comment">/**</span>
<a name="l00671"></a>00671 <span class="comment"> * Run all registered child cleanups, in preparation for an exec()</span>
<a name="l00672"></a>00672 <span class="comment"> * call in a forked child -- close files, etc., but *don&#39;t* flush I/O</span>
<a name="l00673"></a>00673 <span class="comment"> * buffers, *don&#39;t* wait for subprocesses, and *don&#39;t* free any</span>
<a name="l00674"></a>00674 <span class="comment"> * memory.</span>
<a name="l00675"></a>00675 <span class="comment"> */</span>
<a name="l00676"></a>00676 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group___pool_cleanup.html#ga1726cc585bda8997fcb0828f884be55b">apr_pool_cleanup_for_exec</a>(<span class="keywordtype">void</span>);
<a name="l00677"></a>00677 <span class="comment"></span>
<a name="l00678"></a>00678 <span class="comment">/** @} */</span>
<a name="l00679"></a>00679 <span class="comment"></span>
<a name="l00680"></a>00680 <span class="comment">/**</span>
<a name="l00681"></a>00681 <span class="comment"> * @defgroup PoolDebug Pool Debugging functions.</span>
<a name="l00682"></a>00682 <span class="comment"> *</span>
<a name="l00683"></a>00683 <span class="comment"> * pools have nested lifetimes -- sub_pools are destroyed when the</span>
<a name="l00684"></a>00684 <span class="comment"> * parent pool is cleared.  We allow certain liberties with operations</span>
<a name="l00685"></a>00685 <span class="comment"> * on things such as tables (and on other structures in a more general</span>
<a name="l00686"></a>00686 <span class="comment"> * sense) where we allow the caller to insert values into a table which</span>
<a name="l00687"></a>00687 <span class="comment"> * were not allocated from the table&#39;s pool.  The table&#39;s data will</span>
<a name="l00688"></a>00688 <span class="comment"> * remain valid as long as all the pools from which its values are</span>
<a name="l00689"></a>00689 <span class="comment"> * allocated remain valid.</span>
<a name="l00690"></a>00690 <span class="comment"> *</span>
<a name="l00691"></a>00691 <span class="comment"> * For example, if B is a sub pool of A, and you build a table T in</span>
<a name="l00692"></a>00692 <span class="comment"> * pool B, then it&#39;s safe to insert data allocated in A or B into T</span>
<a name="l00693"></a>00693 <span class="comment"> * (because B lives at most as long as A does, and T is destroyed when</span>
<a name="l00694"></a>00694 <span class="comment"> * B is cleared/destroyed).  On the other hand, if S is a table in</span>
<a name="l00695"></a>00695 <span class="comment"> * pool A, it is safe to insert data allocated in A into S, but it</span>
<a name="l00696"></a>00696 <span class="comment"> * is *not safe* to insert data allocated from B into S... because</span>
<a name="l00697"></a>00697 <span class="comment"> * B can be cleared/destroyed before A is (which would leave dangling</span>
<a name="l00698"></a>00698 <span class="comment"> * pointers in T&#39;s data structures).</span>
<a name="l00699"></a>00699 <span class="comment"> *</span>
<a name="l00700"></a>00700 <span class="comment"> * In general we say that it is safe to insert data into a table T</span>
<a name="l00701"></a>00701 <span class="comment"> * if the data is allocated in any ancestor of T&#39;s pool.  This is the</span>
<a name="l00702"></a>00702 <span class="comment"> * basis on which the APR_POOL_DEBUG code works -- it tests these ancestor</span>
<a name="l00703"></a>00703 <span class="comment"> * relationships for all data inserted into tables.  APR_POOL_DEBUG also</span>
<a name="l00704"></a>00704 <span class="comment"> * provides tools (apr_pool_find, and apr_pool_is_ancestor) for other</span>
<a name="l00705"></a>00705 <span class="comment"> * folks to implement similar restrictions for their own data</span>
<a name="l00706"></a>00706 <span class="comment"> * structures.</span>
<a name="l00707"></a>00707 <span class="comment"> *</span>
<a name="l00708"></a>00708 <span class="comment"> * However, sometimes this ancestor requirement is inconvenient --</span>
<a name="l00709"></a>00709 <span class="comment"> * sometimes it&#39;s necessary to create a sub pool where the sub pool is</span>
<a name="l00710"></a>00710 <span class="comment"> * guaranteed to have the same lifetime as the parent pool.  This is a</span>
<a name="l00711"></a>00711 <span class="comment"> * guarantee implemented by the *caller*, not by the pool code.  That</span>
<a name="l00712"></a>00712 <span class="comment"> * is, the caller guarantees they won&#39;t destroy the sub pool</span>
<a name="l00713"></a>00713 <span class="comment"> * individually prior to destroying the parent pool.</span>
<a name="l00714"></a>00714 <span class="comment"> *</span>
<a name="l00715"></a>00715 <span class="comment"> * In this case the caller must call apr_pool_join() to indicate this</span>
<a name="l00716"></a>00716 <span class="comment"> * guarantee to the APR_POOL_DEBUG code.</span>
<a name="l00717"></a>00717 <span class="comment"> *</span>
<a name="l00718"></a>00718 <span class="comment"> * These functions are only implemented when #APR_POOL_DEBUG is set.</span>
<a name="l00719"></a>00719 <span class="comment"> *</span>
<a name="l00720"></a>00720 <span class="comment"> * @{</span>
<a name="l00721"></a>00721 <span class="comment"> */</span>
<a name="l00722"></a>00722 <span class="preprocessor">#if APR_POOL_DEBUG || defined(DOXYGEN)</span>
<a name="l00723"></a>00723 <span class="preprocessor"></span><span class="comment">/**</span>
<a name="l00724"></a>00724 <span class="comment"> * Guarantee that a subpool has the same lifetime as the parent.</span>
<a name="l00725"></a>00725 <span class="comment"> * @param p The parent pool</span>
<a name="l00726"></a>00726 <span class="comment"> * @param sub The subpool</span>
<a name="l00727"></a>00727 <span class="comment"> */</span>
<a name="l00728"></a>00728 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group___pool_debug.html#gaecd956092f81c70117507ad8cbca8ea7">apr_pool_join</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p, <a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *sub);
<a name="l00729"></a>00729 <span class="comment"></span>
<a name="l00730"></a>00730 <span class="comment">/**</span>
<a name="l00731"></a>00731 <span class="comment"> * Find a pool from something allocated in it.</span>
<a name="l00732"></a>00732 <span class="comment"> * @param mem The thing allocated in the pool</span>
<a name="l00733"></a>00733 <span class="comment"> * @return The pool it is allocated in</span>
<a name="l00734"></a>00734 <span class="comment"> */</span>
<a name="l00735"></a>00735 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *) <a class="code" href="group___pool_debug.html#ga0bc40d9069709020e3643492dae2ccb0">apr_pool_find</a>(const <span class="keywordtype">void</span> *mem);
<a name="l00736"></a>00736 <span class="comment"></span>
<a name="l00737"></a>00737 <span class="comment">/**</span>
<a name="l00738"></a>00738 <span class="comment"> * Report the number of bytes currently in the pool</span>
<a name="l00739"></a>00739 <span class="comment"> * @param p The pool to inspect</span>
<a name="l00740"></a>00740 <span class="comment"> * @param recurse Recurse/include the subpools&#39; sizes</span>
<a name="l00741"></a>00741 <span class="comment"> * @return The number of bytes</span>
<a name="l00742"></a>00742 <span class="comment"> */</span>
<a name="l00743"></a>00743 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(apr_size_t) <a class="code" href="group___pool_debug.html#ga22462da23d70dfde389a370b131cd351">apr_pool_num_bytes</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p, <span class="keywordtype">int</span> recurse);
<a name="l00744"></a>00744 <span class="comment"></span>
<a name="l00745"></a>00745 <span class="comment">/**</span>
<a name="l00746"></a>00746 <span class="comment"> * Lock a pool</span>
<a name="l00747"></a>00747 <span class="comment"> * @param pool The pool to lock</span>
<a name="l00748"></a>00748 <span class="comment"> * @param flag  The flag</span>
<a name="l00749"></a>00749 <span class="comment"> */</span>
<a name="l00750"></a>00750 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">void</span>) <a class="code" href="group___pool_debug.html#ga24f8f0287478fa71f77d0ce4ec035e4a">apr_pool_lock</a>(<a class="code" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool, <span class="keywordtype">int</span> flag);
<a name="l00751"></a>00751 
<a name="l00752"></a>00752 <span class="comment">/* @} */</span>
<a name="l00753"></a>00753 
<a name="l00754"></a>00754 <span class="preprocessor">#else </span><span class="comment">/* APR_POOL_DEBUG or DOXYGEN */</span>
<a name="l00755"></a>00755 
<a name="l00756"></a>00756 <span class="preprocessor">#ifdef apr_pool_join</span>
<a name="l00757"></a>00757 <span class="preprocessor"></span><span class="preprocessor">#undef apr_pool_join</span>
<a name="l00758"></a>00758 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00759"></a>00759 <span class="preprocessor"></span><span class="preprocessor">#define apr_pool_join(a,b)</span>
<a name="l00760"></a>00760 <span class="preprocessor"></span>
<a name="l00761"></a>00761 <span class="preprocessor">#ifdef apr_pool_lock</span>
<a name="l00762"></a>00762 <span class="preprocessor"></span><span class="preprocessor">#undef apr_pool_lock</span>
<a name="l00763"></a>00763 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00764"></a>00764 <span class="preprocessor"></span><span class="preprocessor">#define apr_pool_lock(pool, lock)</span>
<a name="l00765"></a>00765 <span class="preprocessor"></span>
<a name="l00766"></a>00766 <span class="preprocessor">#endif </span><span class="comment">/* APR_POOL_DEBUG or DOXYGEN */</span>
<a name="l00767"></a>00767 <span class="comment"></span>
<a name="l00768"></a>00768 <span class="comment">/** @} */</span>
<a name="l00769"></a>00769 
<a name="l00770"></a>00770 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00771"></a>00771 <span class="preprocessor"></span>}
<a name="l00772"></a>00772 <span class="preprocessor">#endif</span>
<a name="l00773"></a>00773 <span class="preprocessor"></span>
<a name="l00774"></a>00774 <span class="preprocessor">#endif </span><span class="comment">/* !APR_POOLS_H */</span>
</pre></div></div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&nbsp;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&nbsp;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&nbsp;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&nbsp;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address style="text-align: right;"><small>Generated on Mon May 23 21:31:32 2011 for Apache Portable Runtime by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
