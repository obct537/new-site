<!-- This comment will put IE 6, 7 and 8 in quirks mode -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Apache Portable Runtime: apr_ring.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.6.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <img id="MSearchSelect" src="search/search.png"
             onmouseover="return searchBox.OnSearchSelectShow()"
             onmouseout="return searchBox.OnSearchSelectHide()"
             alt=""/>
        <input type="text" id="MSearchField" value="Search" accesskey="S"
             onfocus="searchBox.OnSearchFieldFocus(true)" 
             onblur="searchBox.OnSearchFieldFocus(false)" 
             onkeyup="searchBox.OnSearchFieldChange(event)"/>
        <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<h1>apr_ring.h</h1><a href="apr__ring_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Licensed to the Apache Software Foundation (ASF) under one or more</span>
<a name="l00002"></a>00002 <span class="comment"> * contributor license agreements.  See the NOTICE file distributed with</span>
<a name="l00003"></a>00003 <span class="comment"> * this work for additional information regarding copyright ownership.</span>
<a name="l00004"></a>00004 <span class="comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</span>
<a name="l00005"></a>00005 <span class="comment"> * (the &quot;License&quot;); you may not use this file except in compliance with</span>
<a name="l00006"></a>00006 <span class="comment"> * the License.  You may obtain a copy of the License at</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00009"></a>00009 <span class="comment"> *</span>
<a name="l00010"></a>00010 <span class="comment"> * Unless required by applicable law or agreed to in writing, software</span>
<a name="l00011"></a>00011 <span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00013"></a>00013 <span class="comment"> * See the License for the specific language governing permissions and</span>
<a name="l00014"></a>00014 <span class="comment"> * limitations under the License.</span>
<a name="l00015"></a>00015 <span class="comment"> */</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="comment">/*</span>
<a name="l00018"></a>00018 <span class="comment"> * This code draws heavily from the 4.4BSD &lt;sys/queue.h&gt; macros</span>
<a name="l00019"></a>00019 <span class="comment"> * and Dean Gaudet&#39;s &quot;splim/ring.h&quot;.</span>
<a name="l00020"></a>00020 <span class="comment"> * &lt;http://www.freebsd.org/cgi/cvsweb.cgi/src/sys/sys/queue.h&gt;</span>
<a name="l00021"></a>00021 <span class="comment"> * &lt;http://www.arctic.org/~dean/splim/&gt;</span>
<a name="l00022"></a>00022 <span class="comment"> *</span>
<a name="l00023"></a>00023 <span class="comment"> * We&#39;d use Dean&#39;s code directly if we could guarantee the</span>
<a name="l00024"></a>00024 <span class="comment"> * availability of inline functions.</span>
<a name="l00025"></a>00025 <span class="comment"> */</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef APR_RING_H</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define APR_RING_H</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00030"></a>00030 <span class="comment">/**</span>
<a name="l00031"></a>00031 <span class="comment"> * @file apr_ring.h</span>
<a name="l00032"></a>00032 <span class="comment"> * @brief APR Rings</span>
<a name="l00033"></a>00033 <span class="comment"> */</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="comment">/*</span>
<a name="l00036"></a>00036 <span class="comment"> * for offsetof()</span>
<a name="l00037"></a>00037 <span class="comment"> */</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="apr__general_8h.html" title="APR Miscellaneous library routines.">apr_general.h</a>&quot;</span>
<a name="l00039"></a>00039 <span class="comment"></span>
<a name="l00040"></a>00040 <span class="comment">/**</span>
<a name="l00041"></a>00041 <span class="comment"> * @defgroup apr_ring Ring Macro Implementations</span>
<a name="l00042"></a>00042 <span class="comment"> * @ingroup APR </span>
<a name="l00043"></a>00043 <span class="comment"> * A ring is a kind of doubly-linked list that can be manipulated</span>
<a name="l00044"></a>00044 <span class="comment"> * without knowing where its head is.</span>
<a name="l00045"></a>00045 <span class="comment"> * @{</span>
<a name="l00046"></a>00046 <span class="comment"> */</span>
<a name="l00047"></a>00047 <span class="comment"></span>
<a name="l00048"></a>00048 <span class="comment">/**</span>
<a name="l00049"></a>00049 <span class="comment"> * The Ring Element</span>
<a name="l00050"></a>00050 <span class="comment"> *</span>
<a name="l00051"></a>00051 <span class="comment"> * A ring element struct is linked to the other elements in the ring</span>
<a name="l00052"></a>00052 <span class="comment"> * through its ring entry field, e.g.</span>
<a name="l00053"></a>00053 <span class="comment"> * &lt;pre&gt;</span>
<a name="l00054"></a>00054 <span class="comment"> *      struct my_element_t {</span>
<a name="l00055"></a>00055 <span class="comment"> *          APR_RING_ENTRY(my_element_t) link;</span>
<a name="l00056"></a>00056 <span class="comment"> *          int foo;</span>
<a name="l00057"></a>00057 <span class="comment"> *          char *bar;</span>
<a name="l00058"></a>00058 <span class="comment"> *      };</span>
<a name="l00059"></a>00059 <span class="comment"> * &lt;/pre&gt;</span>
<a name="l00060"></a>00060 <span class="comment"> *</span>
<a name="l00061"></a>00061 <span class="comment"> * An element struct may be put on more than one ring if it has more</span>
<a name="l00062"></a>00062 <span class="comment"> * than one APR_RING_ENTRY field. Each APR_RING_ENTRY has a corresponding</span>
<a name="l00063"></a>00063 <span class="comment"> * APR_RING_HEAD declaration.</span>
<a name="l00064"></a>00064 <span class="comment"> *</span>
<a name="l00065"></a>00065 <span class="comment"> * @warning For strict C standards compliance you should put the APR_RING_ENTRY</span>
<a name="l00066"></a>00066 <span class="comment"> * first in the element struct unless the head is always part of a larger</span>
<a name="l00067"></a>00067 <span class="comment"> * object with enough earlier fields to accommodate the offsetof() used</span>
<a name="l00068"></a>00068 <span class="comment"> * to compute the ring sentinel below. You can usually ignore this caveat.</span>
<a name="l00069"></a>00069 <span class="comment"> */</span>
<a name="l00070"></a><a class="code" href="group__apr__ring.html#ga095edad4bcb6975014ed9584930f7819">00070</a> <span class="preprocessor">#define APR_RING_ENTRY(elem)                                            \</span>
<a name="l00071"></a>00071 <span class="preprocessor">    struct {                                                            \</span>
<a name="l00072"></a>00072 <span class="preprocessor">        struct elem * volatile next;                                    \</span>
<a name="l00073"></a>00073 <span class="preprocessor">        struct elem * volatile prev;                                    \</span>
<a name="l00074"></a>00074 <span class="preprocessor">    }</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00076"></a>00076 <span class="comment">/**</span>
<a name="l00077"></a>00077 <span class="comment"> * The Ring Head</span>
<a name="l00078"></a>00078 <span class="comment"> *</span>
<a name="l00079"></a>00079 <span class="comment"> * Each ring is managed via its head, which is a struct declared like this:</span>
<a name="l00080"></a>00080 <span class="comment"> * &lt;pre&gt;</span>
<a name="l00081"></a>00081 <span class="comment"> *      APR_RING_HEAD(my_ring_t, my_element_t);</span>
<a name="l00082"></a>00082 <span class="comment"> *      struct my_ring_t ring, *ringp;</span>
<a name="l00083"></a>00083 <span class="comment"> * &lt;/pre&gt;</span>
<a name="l00084"></a>00084 <span class="comment"> *</span>
<a name="l00085"></a>00085 <span class="comment"> * This struct looks just like the element link struct so that we can</span>
<a name="l00086"></a>00086 <span class="comment"> * be sure that the typecasting games will work as expected.</span>
<a name="l00087"></a>00087 <span class="comment"> *</span>
<a name="l00088"></a>00088 <span class="comment"> * The first element in the ring is next after the head, and the last</span>
<a name="l00089"></a>00089 <span class="comment"> * element is just before the head.</span>
<a name="l00090"></a>00090 <span class="comment"> */</span>
<a name="l00091"></a><a class="code" href="group__apr__ring.html#ga2953b8d4034077c4020616282e6c0b67">00091</a> <span class="preprocessor">#define APR_RING_HEAD(head, elem)                                       \</span>
<a name="l00092"></a>00092 <span class="preprocessor">    struct head {                                                       \</span>
<a name="l00093"></a>00093 <span class="preprocessor">        struct elem *next;                                              \</span>
<a name="l00094"></a>00094 <span class="preprocessor">        struct elem *prev;                                              \</span>
<a name="l00095"></a>00095 <span class="preprocessor">    }</span>
<a name="l00096"></a>00096 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00097"></a>00097 <span class="comment">/**</span>
<a name="l00098"></a>00098 <span class="comment"> * The Ring Sentinel</span>
<a name="l00099"></a>00099 <span class="comment"> *</span>
<a name="l00100"></a>00100 <span class="comment"> * This is the magic pointer value that occurs before the first and</span>
<a name="l00101"></a>00101 <span class="comment"> * after the last elements in the ring, computed from the address of</span>
<a name="l00102"></a>00102 <span class="comment"> * the ring&#39;s head.  The head itself isn&#39;t an element, but in order to</span>
<a name="l00103"></a>00103 <span class="comment"> * get rid of all the special cases when dealing with the ends of the</span>
<a name="l00104"></a>00104 <span class="comment"> * ring, we play typecasting games to make it look like one.</span>
<a name="l00105"></a>00105 <span class="comment"> *</span>
<a name="l00106"></a>00106 <span class="comment"> * Here is a diagram to illustrate the arrangements of the next and</span>
<a name="l00107"></a>00107 <span class="comment"> * prev pointers of each element in a single ring. Note that they point</span>
<a name="l00108"></a>00108 <span class="comment"> * to the start of each element, not to the APR_RING_ENTRY structure.</span>
<a name="l00109"></a>00109 <span class="comment"> *</span>
<a name="l00110"></a>00110 <span class="comment"> * &lt;pre&gt;</span>
<a name="l00111"></a>00111 <span class="comment"> *     +-&gt;+------+&lt;-+  +-&gt;+------+&lt;-+  +-&gt;+------+&lt;-+</span>
<a name="l00112"></a>00112 <span class="comment"> *     |  |struct|  |  |  |struct|  |  |  |struct|  |</span>
<a name="l00113"></a>00113 <span class="comment"> *    /   | elem |   \/   | elem |   \/   | elem |  \</span>
<a name="l00114"></a>00114 <span class="comment"> * ...    |      |   /\   |      |   /\   |      |   ...</span>
<a name="l00115"></a>00115 <span class="comment"> *        +------+  |  |  +------+  |  |  +------+</span>
<a name="l00116"></a>00116 <span class="comment"> *   ...--|prev  |  |  +--|ring  |  |  +--|prev  |</span>
<a name="l00117"></a>00117 <span class="comment"> *        |  next|--+     | entry|--+     |  next|--...</span>
<a name="l00118"></a>00118 <span class="comment"> *        +------+        +------+        +------+</span>
<a name="l00119"></a>00119 <span class="comment"> *        | etc. |        | etc. |        | etc. |</span>
<a name="l00120"></a>00120 <span class="comment"> *        :      :        :      :        :      :</span>
<a name="l00121"></a>00121 <span class="comment"> * &lt;/pre&gt;</span>
<a name="l00122"></a>00122 <span class="comment"> *</span>
<a name="l00123"></a>00123 <span class="comment"> * The APR_RING_HEAD is nothing but a bare APR_RING_ENTRY. The prev</span>
<a name="l00124"></a>00124 <span class="comment"> * and next pointers in the first and last elements don&#39;t actually</span>
<a name="l00125"></a>00125 <span class="comment"> * point to the head, they point to a phantom place called the</span>
<a name="l00126"></a>00126 <span class="comment"> * sentinel. Its value is such that last-&gt;next-&gt;next == first because</span>
<a name="l00127"></a>00127 <span class="comment"> * the offset from the sentinel to the head&#39;s next pointer is the same</span>
<a name="l00128"></a>00128 <span class="comment"> * as the offset from the start of an element to its next pointer.</span>
<a name="l00129"></a>00129 <span class="comment"> * This also works in the opposite direction.</span>
<a name="l00130"></a>00130 <span class="comment"> *</span>
<a name="l00131"></a>00131 <span class="comment"> * &lt;pre&gt;</span>
<a name="l00132"></a>00132 <span class="comment"> *        last                            first</span>
<a name="l00133"></a>00133 <span class="comment"> *     +-&gt;+------+&lt;-+  +-&gt;sentinel&lt;-+  +-&gt;+------+&lt;-+</span>
<a name="l00134"></a>00134 <span class="comment"> *     |  |struct|  |  |            |  |  |struct|  |</span>
<a name="l00135"></a>00135 <span class="comment"> *    /   | elem |   \/              \/   | elem |  \</span>
<a name="l00136"></a>00136 <span class="comment"> * ...    |      |   /\              /\   |      |   ...</span>
<a name="l00137"></a>00137 <span class="comment"> *        +------+  |  |  +------+  |  |  +------+</span>
<a name="l00138"></a>00138 <span class="comment"> *   ...--|prev  |  |  +--|ring  |  |  +--|prev  |</span>
<a name="l00139"></a>00139 <span class="comment"> *        |  next|--+     |  head|--+     |  next|--...</span>
<a name="l00140"></a>00140 <span class="comment"> *        +------+        +------+        +------+</span>
<a name="l00141"></a>00141 <span class="comment"> *        | etc. |                        | etc. |</span>
<a name="l00142"></a>00142 <span class="comment"> *        :      :                        :      :</span>
<a name="l00143"></a>00143 <span class="comment"> * &lt;/pre&gt;</span>
<a name="l00144"></a>00144 <span class="comment"> *</span>
<a name="l00145"></a>00145 <span class="comment"> * Note that the offset mentioned above is different for each kind of</span>
<a name="l00146"></a>00146 <span class="comment"> * ring that the element may be on, and each kind of ring has a unique</span>
<a name="l00147"></a>00147 <span class="comment"> * name for its APR_RING_ENTRY in each element, and has its own type</span>
<a name="l00148"></a>00148 <span class="comment"> * for its APR_RING_HEAD.</span>
<a name="l00149"></a>00149 <span class="comment"> *</span>
<a name="l00150"></a>00150 <span class="comment"> * Note also that if the offset is non-zero (which is required if an</span>
<a name="l00151"></a>00151 <span class="comment"> * element has more than one APR_RING_ENTRY), the unreality of the</span>
<a name="l00152"></a>00152 <span class="comment"> * sentinel may have bad implications on very perverse implementations</span>
<a name="l00153"></a>00153 <span class="comment"> * of C -- see the warning in APR_RING_ENTRY.</span>
<a name="l00154"></a>00154 <span class="comment"> *</span>
<a name="l00155"></a>00155 <span class="comment"> * @param hp   The head of the ring</span>
<a name="l00156"></a>00156 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00157"></a>00157 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00158"></a>00158 <span class="comment"> */</span>
<a name="l00159"></a><a class="code" href="group__apr__ring.html#ga54210090292ebafcd0a0d75d9ff1563d">00159</a> <span class="preprocessor">#define APR_RING_SENTINEL(hp, elem, link)                               \</span>
<a name="l00160"></a>00160 <span class="preprocessor">    (struct elem *)((char *)(&amp;(hp)-&gt;next) - APR_OFFSETOF(struct elem, link))</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00162"></a>00162 <span class="comment">/**</span>
<a name="l00163"></a>00163 <span class="comment"> * The first element of the ring</span>
<a name="l00164"></a>00164 <span class="comment"> * @param hp   The head of the ring</span>
<a name="l00165"></a>00165 <span class="comment"> */</span>
<a name="l00166"></a><a class="code" href="group__apr__ring.html#gacacd9cfca24feb7ff754d4008422efcb">00166</a> <span class="preprocessor">#define APR_RING_FIRST(hp)      (hp)-&gt;next</span>
<a name="l00167"></a>00167 <span class="preprocessor"></span><span class="comment">/**</span>
<a name="l00168"></a>00168 <span class="comment"> * The last element of the ring</span>
<a name="l00169"></a>00169 <span class="comment"> * @param hp   The head of the ring</span>
<a name="l00170"></a>00170 <span class="comment"> */</span>
<a name="l00171"></a><a class="code" href="group__apr__ring.html#ga8b927069ba9dc13defaf45a87267b5d3">00171</a> <span class="preprocessor">#define APR_RING_LAST(hp)       (hp)-&gt;prev</span>
<a name="l00172"></a>00172 <span class="preprocessor"></span><span class="comment">/**</span>
<a name="l00173"></a>00173 <span class="comment"> * The next element in the ring</span>
<a name="l00174"></a>00174 <span class="comment"> * @param ep   The current element</span>
<a name="l00175"></a>00175 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00176"></a>00176 <span class="comment"> */</span>
<a name="l00177"></a><a class="code" href="group__apr__ring.html#gae42e4f7148719aa534bdbbc82be26a06">00177</a> <span class="preprocessor">#define APR_RING_NEXT(ep, link) (ep)-&gt;link.next</span>
<a name="l00178"></a>00178 <span class="preprocessor"></span><span class="comment">/**</span>
<a name="l00179"></a>00179 <span class="comment"> * The previous element in the ring</span>
<a name="l00180"></a>00180 <span class="comment"> * @param ep   The current element</span>
<a name="l00181"></a>00181 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00182"></a>00182 <span class="comment"> */</span>
<a name="l00183"></a><a class="code" href="group__apr__ring.html#ga82d45623d505d59ea5619cf8f63d0ebb">00183</a> <span class="preprocessor">#define APR_RING_PREV(ep, link) (ep)-&gt;link.prev</span>
<a name="l00184"></a>00184 <span class="preprocessor"></span>
<a name="l00185"></a>00185 <span class="comment"></span>
<a name="l00186"></a>00186 <span class="comment">/**</span>
<a name="l00187"></a>00187 <span class="comment"> * Initialize a ring</span>
<a name="l00188"></a>00188 <span class="comment"> * @param hp   The head of the ring</span>
<a name="l00189"></a>00189 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00190"></a>00190 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00191"></a>00191 <span class="comment"> */</span>
<a name="l00192"></a><a class="code" href="group__apr__ring.html#ga245e1a73b162a4a68ebd54c84683729d">00192</a> <span class="preprocessor">#define APR_RING_INIT(hp, elem, link) do {                              \</span>
<a name="l00193"></a>00193 <span class="preprocessor">        APR_RING_FIRST((hp)) = APR_RING_SENTINEL((hp), elem, link);     \</span>
<a name="l00194"></a>00194 <span class="preprocessor">        APR_RING_LAST((hp))  = APR_RING_SENTINEL((hp), elem, link);     \</span>
<a name="l00195"></a>00195 <span class="preprocessor">    } while (0)</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00197"></a>00197 <span class="comment">/**</span>
<a name="l00198"></a>00198 <span class="comment"> * Determine if a ring is empty</span>
<a name="l00199"></a>00199 <span class="comment"> * @param hp   The head of the ring</span>
<a name="l00200"></a>00200 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00201"></a>00201 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00202"></a>00202 <span class="comment"> * @return true or false</span>
<a name="l00203"></a>00203 <span class="comment"> */</span>
<a name="l00204"></a><a class="code" href="group__apr__ring.html#ga9b64ad6eebea19f896d2aa90172b6b9a">00204</a> <span class="preprocessor">#define APR_RING_EMPTY(hp, elem, link)                                  \</span>
<a name="l00205"></a>00205 <span class="preprocessor">    (APR_RING_FIRST((hp)) == APR_RING_SENTINEL((hp), elem, link))</span>
<a name="l00206"></a>00206 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00207"></a>00207 <span class="comment">/**</span>
<a name="l00208"></a>00208 <span class="comment"> * Initialize a singleton element</span>
<a name="l00209"></a>00209 <span class="comment"> * @param ep   The element</span>
<a name="l00210"></a>00210 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00211"></a>00211 <span class="comment"> */</span>
<a name="l00212"></a><a class="code" href="group__apr__ring.html#gae5048ecda4b26b012ee93c2c830058cb">00212</a> <span class="preprocessor">#define APR_RING_ELEM_INIT(ep, link) do {                               \</span>
<a name="l00213"></a>00213 <span class="preprocessor">        APR_RING_NEXT((ep), link) = (ep);                               \</span>
<a name="l00214"></a>00214 <span class="preprocessor">        APR_RING_PREV((ep), link) = (ep);                               \</span>
<a name="l00215"></a>00215 <span class="preprocessor">    } while (0)</span>
<a name="l00216"></a>00216 <span class="preprocessor"></span>
<a name="l00217"></a>00217 <span class="comment"></span>
<a name="l00218"></a>00218 <span class="comment">/**</span>
<a name="l00219"></a>00219 <span class="comment"> * Splice the sequence ep1..epN into the ring before element lep</span>
<a name="l00220"></a>00220 <span class="comment"> *   (..lep.. becomes ..ep1..epN..lep..)</span>
<a name="l00221"></a>00221 <span class="comment"> * @warning This doesn&#39;t work for splicing before the first element or on</span>
<a name="l00222"></a>00222 <span class="comment"> *   empty rings... see APR_RING_SPLICE_HEAD for one that does</span>
<a name="l00223"></a>00223 <span class="comment"> * @param lep  Element in the ring to splice before</span>
<a name="l00224"></a>00224 <span class="comment"> * @param ep1  First element in the sequence to splice in</span>
<a name="l00225"></a>00225 <span class="comment"> * @param epN  Last element in the sequence to splice in</span>
<a name="l00226"></a>00226 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00227"></a>00227 <span class="comment"> */</span>
<a name="l00228"></a><a class="code" href="group__apr__ring.html#ga438e7369e650ee07ac98ed0731589750">00228</a> <span class="preprocessor">#define APR_RING_SPLICE_BEFORE(lep, ep1, epN, link) do {                \</span>
<a name="l00229"></a>00229 <span class="preprocessor">        APR_RING_NEXT((epN), link) = (lep);                             \</span>
<a name="l00230"></a>00230 <span class="preprocessor">        APR_RING_PREV((ep1), link) = APR_RING_PREV((lep), link);        \</span>
<a name="l00231"></a>00231 <span class="preprocessor">        APR_RING_NEXT(APR_RING_PREV((lep), link), link) = (ep1);        \</span>
<a name="l00232"></a>00232 <span class="preprocessor">        APR_RING_PREV((lep), link) = (epN);                             \</span>
<a name="l00233"></a>00233 <span class="preprocessor">    } while (0)</span>
<a name="l00234"></a>00234 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00235"></a>00235 <span class="comment">/**</span>
<a name="l00236"></a>00236 <span class="comment"> * Splice the sequence ep1..epN into the ring after element lep</span>
<a name="l00237"></a>00237 <span class="comment"> *   (..lep.. becomes ..lep..ep1..epN..)</span>
<a name="l00238"></a>00238 <span class="comment"> * @warning This doesn&#39;t work for splicing after the last element or on</span>
<a name="l00239"></a>00239 <span class="comment"> *   empty rings... see APR_RING_SPLICE_TAIL for one that does</span>
<a name="l00240"></a>00240 <span class="comment"> * @param lep  Element in the ring to splice after</span>
<a name="l00241"></a>00241 <span class="comment"> * @param ep1  First element in the sequence to splice in</span>
<a name="l00242"></a>00242 <span class="comment"> * @param epN  Last element in the sequence to splice in</span>
<a name="l00243"></a>00243 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00244"></a>00244 <span class="comment"> */</span>
<a name="l00245"></a><a class="code" href="group__apr__ring.html#ga53e6564eba59d7e734a0ce03cb418a42">00245</a> <span class="preprocessor">#define APR_RING_SPLICE_AFTER(lep, ep1, epN, link) do {                 \</span>
<a name="l00246"></a>00246 <span class="preprocessor">        APR_RING_PREV((ep1), link) = (lep);                             \</span>
<a name="l00247"></a>00247 <span class="preprocessor">        APR_RING_NEXT((epN), link) = APR_RING_NEXT((lep), link);        \</span>
<a name="l00248"></a>00248 <span class="preprocessor">        APR_RING_PREV(APR_RING_NEXT((lep), link), link) = (epN);        \</span>
<a name="l00249"></a>00249 <span class="preprocessor">        APR_RING_NEXT((lep), link) = (ep1);                             \</span>
<a name="l00250"></a>00250 <span class="preprocessor">    } while (0)</span>
<a name="l00251"></a>00251 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00252"></a>00252 <span class="comment">/**</span>
<a name="l00253"></a>00253 <span class="comment"> * Insert the element nep into the ring before element lep</span>
<a name="l00254"></a>00254 <span class="comment"> *   (..lep.. becomes ..nep..lep..)</span>
<a name="l00255"></a>00255 <span class="comment"> * @warning This doesn&#39;t work for inserting before the first element or on</span>
<a name="l00256"></a>00256 <span class="comment"> *   empty rings... see APR_RING_INSERT_HEAD for one that does</span>
<a name="l00257"></a>00257 <span class="comment"> * @param lep  Element in the ring to insert before</span>
<a name="l00258"></a>00258 <span class="comment"> * @param nep  Element to insert</span>
<a name="l00259"></a>00259 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00260"></a>00260 <span class="comment"> */</span>
<a name="l00261"></a><a class="code" href="group__apr__ring.html#ga76f9a04f932b3377073fa4e30d745564">00261</a> <span class="preprocessor">#define APR_RING_INSERT_BEFORE(lep, nep, link)                          \</span>
<a name="l00262"></a>00262 <span class="preprocessor">        APR_RING_SPLICE_BEFORE((lep), (nep), (nep), link)</span>
<a name="l00263"></a>00263 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00264"></a>00264 <span class="comment">/**</span>
<a name="l00265"></a>00265 <span class="comment"> * Insert the element nep into the ring after element lep</span>
<a name="l00266"></a>00266 <span class="comment"> *   (..lep.. becomes ..lep..nep..)</span>
<a name="l00267"></a>00267 <span class="comment"> * @warning This doesn&#39;t work for inserting after the last element or on</span>
<a name="l00268"></a>00268 <span class="comment"> *   empty rings... see APR_RING_INSERT_TAIL for one that does</span>
<a name="l00269"></a>00269 <span class="comment"> * @param lep  Element in the ring to insert after</span>
<a name="l00270"></a>00270 <span class="comment"> * @param nep  Element to insert</span>
<a name="l00271"></a>00271 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00272"></a>00272 <span class="comment"> */</span>
<a name="l00273"></a><a class="code" href="group__apr__ring.html#ga40453637d00c853f3a212a30c1f2cb41">00273</a> <span class="preprocessor">#define APR_RING_INSERT_AFTER(lep, nep, link)                           \</span>
<a name="l00274"></a>00274 <span class="preprocessor">        APR_RING_SPLICE_AFTER((lep), (nep), (nep), link)</span>
<a name="l00275"></a>00275 <span class="preprocessor"></span>
<a name="l00276"></a>00276 <span class="comment"></span>
<a name="l00277"></a>00277 <span class="comment">/**</span>
<a name="l00278"></a>00278 <span class="comment"> * Splice the sequence ep1..epN into the ring before the first element</span>
<a name="l00279"></a>00279 <span class="comment"> *   (..hp.. becomes ..hp..ep1..epN..)</span>
<a name="l00280"></a>00280 <span class="comment"> * @param hp   Head of the ring</span>
<a name="l00281"></a>00281 <span class="comment"> * @param ep1  First element in the sequence to splice in</span>
<a name="l00282"></a>00282 <span class="comment"> * @param epN  Last element in the sequence to splice in</span>
<a name="l00283"></a>00283 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00284"></a>00284 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00285"></a>00285 <span class="comment"> */</span>
<a name="l00286"></a><a class="code" href="group__apr__ring.html#ga592e71a7cf219fc70f4fc47c60ef4c64">00286</a> <span class="preprocessor">#define APR_RING_SPLICE_HEAD(hp, ep1, epN, elem, link)                  \</span>
<a name="l00287"></a>00287 <span class="preprocessor">        APR_RING_SPLICE_AFTER(APR_RING_SENTINEL((hp), elem, link),      \</span>
<a name="l00288"></a>00288 <span class="preprocessor">                             (ep1), (epN), link)</span>
<a name="l00289"></a>00289 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00290"></a>00290 <span class="comment">/**</span>
<a name="l00291"></a>00291 <span class="comment"> * Splice the sequence ep1..epN into the ring after the last element</span>
<a name="l00292"></a>00292 <span class="comment"> *   (..hp.. becomes ..ep1..epN..hp..)</span>
<a name="l00293"></a>00293 <span class="comment"> * @param hp   Head of the ring</span>
<a name="l00294"></a>00294 <span class="comment"> * @param ep1  First element in the sequence to splice in</span>
<a name="l00295"></a>00295 <span class="comment"> * @param epN  Last element in the sequence to splice in</span>
<a name="l00296"></a>00296 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00297"></a>00297 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00298"></a>00298 <span class="comment"> */</span>
<a name="l00299"></a><a class="code" href="group__apr__ring.html#ga51e02e214fb6e218f45ff23cbd1f7abc">00299</a> <span class="preprocessor">#define APR_RING_SPLICE_TAIL(hp, ep1, epN, elem, link)                  \</span>
<a name="l00300"></a>00300 <span class="preprocessor">        APR_RING_SPLICE_BEFORE(APR_RING_SENTINEL((hp), elem, link),     \</span>
<a name="l00301"></a>00301 <span class="preprocessor">                             (ep1), (epN), link)</span>
<a name="l00302"></a>00302 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00303"></a>00303 <span class="comment">/**</span>
<a name="l00304"></a>00304 <span class="comment"> * Insert the element nep into the ring before the first element</span>
<a name="l00305"></a>00305 <span class="comment"> *   (..hp.. becomes ..hp..nep..)</span>
<a name="l00306"></a>00306 <span class="comment"> * @param hp   Head of the ring</span>
<a name="l00307"></a>00307 <span class="comment"> * @param nep  Element to insert</span>
<a name="l00308"></a>00308 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00309"></a>00309 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00310"></a>00310 <span class="comment"> */</span>
<a name="l00311"></a><a class="code" href="group__apr__ring.html#gad59352546dc9253c0057ad43cf728a63">00311</a> <span class="preprocessor">#define APR_RING_INSERT_HEAD(hp, nep, elem, link)                       \</span>
<a name="l00312"></a>00312 <span class="preprocessor">        APR_RING_SPLICE_HEAD((hp), (nep), (nep), elem, link)</span>
<a name="l00313"></a>00313 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00314"></a>00314 <span class="comment">/**</span>
<a name="l00315"></a>00315 <span class="comment"> * Insert the element nep into the ring after the last element</span>
<a name="l00316"></a>00316 <span class="comment"> *   (..hp.. becomes ..nep..hp..)</span>
<a name="l00317"></a>00317 <span class="comment"> * @param hp   Head of the ring</span>
<a name="l00318"></a>00318 <span class="comment"> * @param nep  Element to insert</span>
<a name="l00319"></a>00319 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00320"></a>00320 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00321"></a>00321 <span class="comment"> */</span>
<a name="l00322"></a><a class="code" href="group__apr__ring.html#ga235311035184125d72ce0689c9949a3e">00322</a> <span class="preprocessor">#define APR_RING_INSERT_TAIL(hp, nep, elem, link)                       \</span>
<a name="l00323"></a>00323 <span class="preprocessor">        APR_RING_SPLICE_TAIL((hp), (nep), (nep), elem, link)</span>
<a name="l00324"></a>00324 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00325"></a>00325 <span class="comment">/**</span>
<a name="l00326"></a>00326 <span class="comment"> * Concatenate ring h2 onto the end of ring h1, leaving h2 empty.</span>
<a name="l00327"></a>00327 <span class="comment"> * @param h1   Head of the ring to concatenate onto</span>
<a name="l00328"></a>00328 <span class="comment"> * @param h2   Head of the ring to concatenate</span>
<a name="l00329"></a>00329 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00330"></a>00330 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00331"></a>00331 <span class="comment"> */</span>
<a name="l00332"></a><a class="code" href="group__apr__ring.html#ga34ee7a0d6daa61117006bb74498ff5aa">00332</a> <span class="preprocessor">#define APR_RING_CONCAT(h1, h2, elem, link) do {                        \</span>
<a name="l00333"></a>00333 <span class="preprocessor">        if (!APR_RING_EMPTY((h2), elem, link)) {                        \</span>
<a name="l00334"></a>00334 <span class="preprocessor">            APR_RING_SPLICE_BEFORE(APR_RING_SENTINEL((h1), elem, link), \</span>
<a name="l00335"></a>00335 <span class="preprocessor">                                  APR_RING_FIRST((h2)),                 \</span>
<a name="l00336"></a>00336 <span class="preprocessor">                                  APR_RING_LAST((h2)), link);           \</span>
<a name="l00337"></a>00337 <span class="preprocessor">            APR_RING_INIT((h2), elem, link);                            \</span>
<a name="l00338"></a>00338 <span class="preprocessor">        }                                                               \</span>
<a name="l00339"></a>00339 <span class="preprocessor">    } while (0)</span>
<a name="l00340"></a>00340 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00341"></a>00341 <span class="comment">/**</span>
<a name="l00342"></a>00342 <span class="comment"> * Prepend ring h2 onto the beginning of ring h1, leaving h2 empty.</span>
<a name="l00343"></a>00343 <span class="comment"> * @param h1   Head of the ring to prepend onto</span>
<a name="l00344"></a>00344 <span class="comment"> * @param h2   Head of the ring to prepend</span>
<a name="l00345"></a>00345 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00346"></a>00346 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00347"></a>00347 <span class="comment"> */</span>
<a name="l00348"></a><a class="code" href="group__apr__ring.html#ga4d5aaa9b6f02f96f98f234a0a428474d">00348</a> <span class="preprocessor">#define APR_RING_PREPEND(h1, h2, elem, link) do {                       \</span>
<a name="l00349"></a>00349 <span class="preprocessor">        if (!APR_RING_EMPTY((h2), elem, link)) {                        \</span>
<a name="l00350"></a>00350 <span class="preprocessor">            APR_RING_SPLICE_AFTER(APR_RING_SENTINEL((h1), elem, link),  \</span>
<a name="l00351"></a>00351 <span class="preprocessor">                                  APR_RING_FIRST((h2)),                 \</span>
<a name="l00352"></a>00352 <span class="preprocessor">                                  APR_RING_LAST((h2)), link);           \</span>
<a name="l00353"></a>00353 <span class="preprocessor">            APR_RING_INIT((h2), elem, link);                            \</span>
<a name="l00354"></a>00354 <span class="preprocessor">        }                                                               \</span>
<a name="l00355"></a>00355 <span class="preprocessor">    } while (0)</span>
<a name="l00356"></a>00356 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00357"></a>00357 <span class="comment">/**</span>
<a name="l00358"></a>00358 <span class="comment"> * Unsplice a sequence of elements from a ring</span>
<a name="l00359"></a>00359 <span class="comment"> * @warning The unspliced sequence is left with dangling pointers at either end</span>
<a name="l00360"></a>00360 <span class="comment"> * @param ep1  First element in the sequence to unsplice</span>
<a name="l00361"></a>00361 <span class="comment"> * @param epN  Last element in the sequence to unsplice</span>
<a name="l00362"></a>00362 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00363"></a>00363 <span class="comment"> */</span>
<a name="l00364"></a><a class="code" href="group__apr__ring.html#ga1d725b0a9ea7ff88f771e37ec130c13b">00364</a> <span class="preprocessor">#define APR_RING_UNSPLICE(ep1, epN, link) do {                          \</span>
<a name="l00365"></a>00365 <span class="preprocessor">        APR_RING_NEXT(APR_RING_PREV((ep1), link), link) =               \</span>
<a name="l00366"></a>00366 <span class="preprocessor">                     APR_RING_NEXT((epN), link);                        \</span>
<a name="l00367"></a>00367 <span class="preprocessor">        APR_RING_PREV(APR_RING_NEXT((epN), link), link) =               \</span>
<a name="l00368"></a>00368 <span class="preprocessor">                     APR_RING_PREV((ep1), link);                        \</span>
<a name="l00369"></a>00369 <span class="preprocessor">    } while (0)</span>
<a name="l00370"></a>00370 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00371"></a>00371 <span class="comment">/**</span>
<a name="l00372"></a>00372 <span class="comment"> * Remove a single element from a ring</span>
<a name="l00373"></a>00373 <span class="comment"> * @warning The unspliced element is left with dangling pointers at either end</span>
<a name="l00374"></a>00374 <span class="comment"> * @param ep   Element to remove</span>
<a name="l00375"></a>00375 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00376"></a>00376 <span class="comment"> */</span>
<a name="l00377"></a><a class="code" href="group__apr__ring.html#gaab4a57544bdb660ec1e306137387d9d7">00377</a> <span class="preprocessor">#define APR_RING_REMOVE(ep, link)                                       \</span>
<a name="l00378"></a>00378 <span class="preprocessor">    APR_RING_UNSPLICE((ep), (ep), link)</span>
<a name="l00379"></a>00379 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00380"></a>00380 <span class="comment">/**</span>
<a name="l00381"></a>00381 <span class="comment"> * Iterate over a ring</span>
<a name="l00382"></a>00382 <span class="comment"> * @param ep The current element</span>
<a name="l00383"></a>00383 <span class="comment"> * @param head The head of the ring</span>
<a name="l00384"></a>00384 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00385"></a>00385 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00386"></a>00386 <span class="comment"> */</span>
<a name="l00387"></a><a class="code" href="group__apr__ring.html#ga7dc7b26e72f836d27e8e0c87da14fb4a">00387</a> <span class="preprocessor">#define APR_RING_FOREACH(ep, head, elem, link)                          \</span>
<a name="l00388"></a>00388 <span class="preprocessor">    for (ep = APR_RING_FIRST(head);                                     \</span>
<a name="l00389"></a>00389 <span class="preprocessor">         ep != APR_RING_SENTINEL(head, elem, link);                     \</span>
<a name="l00390"></a>00390 <span class="preprocessor">         ep = APR_RING_NEXT(ep, link))</span>
<a name="l00391"></a>00391 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00392"></a>00392 <span class="comment">/**</span>
<a name="l00393"></a>00393 <span class="comment"> * Iterate over a ring safe against removal of the current element</span>
<a name="l00394"></a>00394 <span class="comment"> * @param ep1 The current element</span>
<a name="l00395"></a>00395 <span class="comment"> * @param ep2 Iteration cursor</span>
<a name="l00396"></a>00396 <span class="comment"> * @param head The head of the ring</span>
<a name="l00397"></a>00397 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00398"></a>00398 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00399"></a>00399 <span class="comment"> */</span>
<a name="l00400"></a><a class="code" href="group__apr__ring.html#ga9a1e91eef86d676d1622dc5b9ddd6f89">00400</a> <span class="preprocessor">#define APR_RING_FOREACH_SAFE(ep1, ep2, head, elem, link)               \</span>
<a name="l00401"></a>00401 <span class="preprocessor">    for (ep1 = APR_RING_FIRST(head), ep2 = APR_RING_NEXT(ep1, link);    \</span>
<a name="l00402"></a>00402 <span class="preprocessor">         ep1 != APR_RING_SENTINEL(head, elem, link);                    \</span>
<a name="l00403"></a>00403 <span class="preprocessor">         ep1 = ep2, ep2 = APR_RING_NEXT(ep1, link))</span>
<a name="l00404"></a>00404 <span class="preprocessor"></span>
<a name="l00405"></a>00405 <span class="comment">/* Debugging tools: */</span>
<a name="l00406"></a>00406 
<a name="l00407"></a>00407 <span class="preprocessor">#ifdef APR_RING_DEBUG</span>
<a name="l00408"></a>00408 <span class="preprocessor"></span><span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00409"></a>00409 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00410"></a>00410 
<a name="l00411"></a>00411 <span class="preprocessor">#define APR_RING_CHECK_ONE(msg, ptr)                                    \</span>
<a name="l00412"></a>00412 <span class="preprocessor">        fprintf(stderr, &quot;*** %s %p\n&quot;, msg, ptr)</span>
<a name="l00413"></a>00413 <span class="preprocessor"></span>
<a name="l00414"></a>00414 <span class="preprocessor">#define APR_RING_CHECK(hp, elem, link, msg)                             \</span>
<a name="l00415"></a>00415 <span class="preprocessor">        APR_RING_CHECK_ELEM(APR_RING_SENTINEL(hp, elem, link), elem, link, msg)</span>
<a name="l00416"></a>00416 <span class="preprocessor"></span>
<a name="l00417"></a>00417 <span class="preprocessor">#define APR_RING_CHECK_ELEM(ep, elem, link, msg) do {                   \</span>
<a name="l00418"></a>00418 <span class="preprocessor">        struct elem *start = (ep);                                      \</span>
<a name="l00419"></a>00419 <span class="preprocessor">        struct elem *here = start;                                      \</span>
<a name="l00420"></a>00420 <span class="preprocessor">        fprintf(stderr, &quot;*** ring check start -- %s\n&quot;, msg);           \</span>
<a name="l00421"></a>00421 <span class="preprocessor">        do {                                                            \</span>
<a name="l00422"></a>00422 <span class="preprocessor">            fprintf(stderr, &quot;\telem %p\n&quot;, here);                       \</span>
<a name="l00423"></a>00423 <span class="preprocessor">            fprintf(stderr, &quot;\telem-&gt;next %p\n&quot;,                        \</span>
<a name="l00424"></a>00424 <span class="preprocessor">                    APR_RING_NEXT(here, link));                         \</span>
<a name="l00425"></a>00425 <span class="preprocessor">            fprintf(stderr, &quot;\telem-&gt;prev %p\n&quot;,                        \</span>
<a name="l00426"></a>00426 <span class="preprocessor">                    APR_RING_PREV(here, link));                         \</span>
<a name="l00427"></a>00427 <span class="preprocessor">            fprintf(stderr, &quot;\telem-&gt;next-&gt;prev %p\n&quot;,                  \</span>
<a name="l00428"></a>00428 <span class="preprocessor">                    APR_RING_PREV(APR_RING_NEXT(here, link), link));    \</span>
<a name="l00429"></a>00429 <span class="preprocessor">            fprintf(stderr, &quot;\telem-&gt;prev-&gt;next %p\n&quot;,                  \</span>
<a name="l00430"></a>00430 <span class="preprocessor">                    APR_RING_NEXT(APR_RING_PREV(here, link), link));    \</span>
<a name="l00431"></a>00431 <span class="preprocessor">            if (APR_RING_PREV(APR_RING_NEXT(here, link), link) != here) { \</span>
<a name="l00432"></a>00432 <span class="preprocessor">                fprintf(stderr, &quot;\t*** elem-&gt;next-&gt;prev != elem\n&quot;);    \</span>
<a name="l00433"></a>00433 <span class="preprocessor">                break;                                                  \</span>
<a name="l00434"></a>00434 <span class="preprocessor">            }                                                           \</span>
<a name="l00435"></a>00435 <span class="preprocessor">            if (APR_RING_NEXT(APR_RING_PREV(here, link), link) != here) { \</span>
<a name="l00436"></a>00436 <span class="preprocessor">                fprintf(stderr, &quot;\t*** elem-&gt;prev-&gt;next != elem\n&quot;);    \</span>
<a name="l00437"></a>00437 <span class="preprocessor">                break;                                                  \</span>
<a name="l00438"></a>00438 <span class="preprocessor">            }                                                           \</span>
<a name="l00439"></a>00439 <span class="preprocessor">            here = APR_RING_NEXT(here, link);                           \</span>
<a name="l00440"></a>00440 <span class="preprocessor">        } while (here != start);                                        \</span>
<a name="l00441"></a>00441 <span class="preprocessor">        fprintf(stderr, &quot;*** ring check end\n&quot;);                        \</span>
<a name="l00442"></a>00442 <span class="preprocessor">    } while (0)</span>
<a name="l00443"></a>00443 <span class="preprocessor"></span>
<a name="l00444"></a>00444 <span class="preprocessor">#define APR_RING_CHECK_CONSISTENCY(hp, elem, link)                      \</span>
<a name="l00445"></a>00445 <span class="preprocessor">        APR_RING_CHECK_ELEM_CONSISTENCY(APR_RING_SENTINEL(hp, elem, link),\</span>
<a name="l00446"></a>00446 <span class="preprocessor">                                        elem, link)</span>
<a name="l00447"></a>00447 <span class="preprocessor"></span>
<a name="l00448"></a>00448 <span class="preprocessor">#define APR_RING_CHECK_ELEM_CONSISTENCY(ep, elem, link) do {            \</span>
<a name="l00449"></a>00449 <span class="preprocessor">        struct elem *start = (ep);                                      \</span>
<a name="l00450"></a>00450 <span class="preprocessor">        struct elem *here = start;                                      \</span>
<a name="l00451"></a>00451 <span class="preprocessor">        do {                                                            \</span>
<a name="l00452"></a>00452 <span class="preprocessor">            assert(APR_RING_PREV(APR_RING_NEXT(here, link), link) == here); \</span>
<a name="l00453"></a>00453 <span class="preprocessor">            assert(APR_RING_NEXT(APR_RING_PREV(here, link), link) == here); \</span>
<a name="l00454"></a>00454 <span class="preprocessor">            here = APR_RING_NEXT(here, link);                           \</span>
<a name="l00455"></a>00455 <span class="preprocessor">        } while (here != start);                                        \</span>
<a name="l00456"></a>00456 <span class="preprocessor">    } while (0)</span>
<a name="l00457"></a>00457 <span class="preprocessor"></span>
<a name="l00458"></a>00458 <span class="preprocessor">#else</span>
<a name="l00459"></a>00459 <span class="preprocessor"></span><span class="comment">/**</span>
<a name="l00460"></a>00460 <span class="comment"> * Print a single pointer value to STDERR</span>
<a name="l00461"></a>00461 <span class="comment"> *   (This is a no-op unless APR_RING_DEBUG is defined.)</span>
<a name="l00462"></a>00462 <span class="comment"> * @param msg Descriptive message</span>
<a name="l00463"></a>00463 <span class="comment"> * @param ptr Pointer value to print</span>
<a name="l00464"></a>00464 <span class="comment"> */</span>
<a name="l00465"></a><a class="code" href="group__apr__ring.html#ga33c7cfbea7c688c7bd0a3d36609f318b">00465</a> <span class="preprocessor">#define APR_RING_CHECK_ONE(msg, ptr)</span>
<a name="l00466"></a>00466 <span class="preprocessor"></span><span class="comment">/**</span>
<a name="l00467"></a>00467 <span class="comment"> * Dump all ring pointers to STDERR, starting with the head and looping all</span>
<a name="l00468"></a>00468 <span class="comment"> * the way around the ring back to the head.  Aborts if an inconsistency</span>
<a name="l00469"></a>00469 <span class="comment"> * is found.</span>
<a name="l00470"></a>00470 <span class="comment"> *   (This is a no-op unless APR_RING_DEBUG is defined.)</span>
<a name="l00471"></a>00471 <span class="comment"> * @param hp   Head of the ring</span>
<a name="l00472"></a>00472 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00473"></a>00473 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00474"></a>00474 <span class="comment"> * @param msg  Descriptive message</span>
<a name="l00475"></a>00475 <span class="comment"> */</span>
<a name="l00476"></a><a class="code" href="group__apr__ring.html#ga97bb4dcc313145496e6b05855f9c6e2b">00476</a> <span class="preprocessor">#define APR_RING_CHECK(hp, elem, link, msg)</span>
<a name="l00477"></a>00477 <span class="preprocessor"></span><span class="comment">/**</span>
<a name="l00478"></a>00478 <span class="comment"> * Loops around a ring and checks all the pointers for consistency.  Pops</span>
<a name="l00479"></a>00479 <span class="comment"> * an assertion if any inconsistency is found.  Same idea as APR_RING_CHECK()</span>
<a name="l00480"></a>00480 <span class="comment"> * except that it&#39;s silent if all is well.</span>
<a name="l00481"></a>00481 <span class="comment"> *   (This is a no-op unless APR_RING_DEBUG is defined.)</span>
<a name="l00482"></a>00482 <span class="comment"> * @param hp   Head of the ring</span>
<a name="l00483"></a>00483 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00484"></a>00484 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00485"></a>00485 <span class="comment"> */</span>
<a name="l00486"></a><a class="code" href="group__apr__ring.html#ga6b0f2091527ee9c7a1511cb6f172a0a7">00486</a> <span class="preprocessor">#define APR_RING_CHECK_CONSISTENCY(hp, elem, link)</span>
<a name="l00487"></a>00487 <span class="preprocessor"></span><span class="comment">/**</span>
<a name="l00488"></a>00488 <span class="comment"> * Dump all ring pointers to STDERR, starting with the given element and</span>
<a name="l00489"></a>00489 <span class="comment"> * looping all the way around the ring back to that element.  Aborts if</span>
<a name="l00490"></a>00490 <span class="comment"> * an inconsistency is found.</span>
<a name="l00491"></a>00491 <span class="comment"> *   (This is a no-op unless APR_RING_DEBUG is defined.)</span>
<a name="l00492"></a>00492 <span class="comment"> * @param ep   The element</span>
<a name="l00493"></a>00493 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00494"></a>00494 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00495"></a>00495 <span class="comment"> * @param msg  Descriptive message</span>
<a name="l00496"></a>00496 <span class="comment"> */</span>
<a name="l00497"></a><a class="code" href="group__apr__ring.html#ga5500df0e96dea1a3258f1e92b28fea0a">00497</a> <span class="preprocessor">#define APR_RING_CHECK_ELEM(ep, elem, link, msg)</span>
<a name="l00498"></a>00498 <span class="preprocessor"></span><span class="comment">/**</span>
<a name="l00499"></a>00499 <span class="comment"> * Loops around a ring, starting with the given element, and checks all</span>
<a name="l00500"></a>00500 <span class="comment"> * the pointers for consistency.  Pops an assertion if any inconsistency</span>
<a name="l00501"></a>00501 <span class="comment"> * is found.  Same idea as APR_RING_CHECK_ELEM() except that it&#39;s silent</span>
<a name="l00502"></a>00502 <span class="comment"> * if all is well.</span>
<a name="l00503"></a>00503 <span class="comment"> *   (This is a no-op unless APR_RING_DEBUG is defined.)</span>
<a name="l00504"></a>00504 <span class="comment"> * @param ep   The element</span>
<a name="l00505"></a>00505 <span class="comment"> * @param elem The name of the element struct</span>
<a name="l00506"></a>00506 <span class="comment"> * @param link The name of the APR_RING_ENTRY in the element struct</span>
<a name="l00507"></a>00507 <span class="comment"> */</span>
<a name="l00508"></a><a class="code" href="group__apr__ring.html#gab7070ae5cf69bf16178a0e0e397c5b38">00508</a> <span class="preprocessor">#define APR_RING_CHECK_ELEM_CONSISTENCY(ep, elem, link)</span>
<a name="l00509"></a>00509 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00510"></a>00510 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00511"></a>00511 <span class="comment">/** @} */</span> 
<a name="l00512"></a>00512 
<a name="l00513"></a>00513 <span class="preprocessor">#endif </span><span class="comment">/* !APR_RING_H */</span>
</pre></div></div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&nbsp;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&nbsp;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&nbsp;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&nbsp;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address style="text-align: right;"><small>Generated on Mon May 23 21:31:32 2011 for Apache Portable Runtime by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
