<!-- This comment will put IE 6, 7 and 8 in quirks mode -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Apache Portable Runtime: apr_lib.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.6.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <img id="MSearchSelect" src="search/search.png"
             onmouseover="return searchBox.OnSearchSelectShow()"
             onmouseout="return searchBox.OnSearchSelectHide()"
             alt=""/>
        <input type="text" id="MSearchField" value="Search" accesskey="S"
             onfocus="searchBox.OnSearchFieldFocus(true)" 
             onblur="searchBox.OnSearchFieldFocus(false)" 
             onkeyup="searchBox.OnSearchFieldChange(event)"/>
        <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
<h1>apr_lib.h</h1><a href="apr__lib_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* Licensed to the Apache Software Foundation (ASF) under one or more</span>
<a name="l00002"></a>00002 <span class="comment"> * contributor license agreements.  See the NOTICE file distributed with</span>
<a name="l00003"></a>00003 <span class="comment"> * this work for additional information regarding copyright ownership.</span>
<a name="l00004"></a>00004 <span class="comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</span>
<a name="l00005"></a>00005 <span class="comment"> * (the &quot;License&quot;); you may not use this file except in compliance with</span>
<a name="l00006"></a>00006 <span class="comment"> * the License.  You may obtain a copy of the License at</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00009"></a>00009 <span class="comment"> *</span>
<a name="l00010"></a>00010 <span class="comment"> * Unless required by applicable law or agreed to in writing, software</span>
<a name="l00011"></a>00011 <span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00013"></a>00013 <span class="comment"> * See the License for the specific language governing permissions and</span>
<a name="l00014"></a>00014 <span class="comment"> * limitations under the License.</span>
<a name="l00015"></a>00015 <span class="comment"> */</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#ifndef APR_LIB_H</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span><span class="preprocessor">#define APR_LIB_H</span>
<a name="l00019"></a>00019 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00020"></a>00020 <span class="comment">/**</span>
<a name="l00021"></a>00021 <span class="comment"> * @file apr_lib.h</span>
<a name="l00022"></a>00022 <span class="comment"> * This is collection of oddballs that didn&#39;t fit anywhere else,</span>
<a name="l00023"></a>00023 <span class="comment"> * and might move to more appropriate headers with the release</span>
<a name="l00024"></a>00024 <span class="comment"> * of APR 1.0.</span>
<a name="l00025"></a>00025 <span class="comment"> * @brief APR general purpose library routines</span>
<a name="l00026"></a>00026 <span class="comment"> */</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="apr_8h.html" title="APR Platform Definitions.">apr.h</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="apr__errno_8h.html" title="APR Error Codes.">apr_errno.h</a>&quot;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#if APR_HAVE_CTYPE_H</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#include &lt;ctype.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#endif</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span><span class="preprocessor">#if APR_HAVE_STDARG_H</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="preprocessor">#include &lt;stdarg.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#endif</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span>
<a name="l00038"></a>00038 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {
<a name="l00040"></a>00040 <span class="preprocessor">#endif </span><span class="comment">/* __cplusplus */</span>
<a name="l00041"></a>00041 <span class="comment"></span>
<a name="l00042"></a>00042 <span class="comment">/**</span>
<a name="l00043"></a>00043 <span class="comment"> * @defgroup apr_lib General Purpose Library Routines</span>
<a name="l00044"></a>00044 <span class="comment"> * @ingroup APR </span>
<a name="l00045"></a>00045 <span class="comment"> * This is collection of oddballs that didn&#39;t fit anywhere else,</span>
<a name="l00046"></a>00046 <span class="comment"> * and might move to more appropriate headers with the release</span>
<a name="l00047"></a>00047 <span class="comment"> * of APR 1.0.</span>
<a name="l00048"></a>00048 <span class="comment"> * @{</span>
<a name="l00049"></a>00049 <span class="comment"> */</span>
<a name="l00050"></a>00050 <span class="comment"></span>
<a name="l00051"></a>00051 <span class="comment">/** A constant representing a &#39;large&#39; string. */</span>
<a name="l00052"></a><a class="code" href="group__apr__lib.html#ga0c9dd98f46b90b5bcd4cbf75e252d0da">00052</a> <span class="preprocessor">#define HUGE_STRING_LEN 8192</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a>00054 <span class="comment">/*</span>
<a name="l00055"></a>00055 <span class="comment"> * Define the structures used by the APR general-purpose library.</span>
<a name="l00056"></a>00056 <span class="comment"> */</span>
<a name="l00057"></a>00057 <span class="comment"></span>
<a name="l00058"></a>00058 <span class="comment">/** @see apr_vformatter_buff_t */</span>
<a name="l00059"></a><a class="code" href="group__apr__lib.html#ga5e9986deebda40f2d1cf8364fa03c3c5">00059</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structapr__vformatter__buff__t.html">apr_vformatter_buff_t</a> <a class="code" href="structapr__vformatter__buff__t.html">apr_vformatter_buff_t</a>;
<a name="l00060"></a>00060 <span class="comment"></span>
<a name="l00061"></a>00061 <span class="comment">/**</span>
<a name="l00062"></a>00062 <span class="comment"> * Structure used by the variable-formatter routines.</span>
<a name="l00063"></a>00063 <span class="comment"> */</span>
<a name="l00064"></a><a class="code" href="structapr__vformatter__buff__t.html">00064</a> <span class="keyword">struct </span><a class="code" href="structapr__vformatter__buff__t.html">apr_vformatter_buff_t</a> {<span class="comment"></span>
<a name="l00065"></a>00065 <span class="comment">    /** The current position */</span>
<a name="l00066"></a><a class="code" href="structapr__vformatter__buff__t.html#aad69bb2ce382b39f55df6cc59039aee9">00066</a>     <span class="keywordtype">char</span> *<a class="code" href="structapr__vformatter__buff__t.html#aad69bb2ce382b39f55df6cc59039aee9">curpos</a>;<span class="comment"></span>
<a name="l00067"></a>00067 <span class="comment">    /** The end position of the format string */</span>
<a name="l00068"></a><a class="code" href="structapr__vformatter__buff__t.html#ab4884e759f4285c72df93e0d63022675">00068</a>     <span class="keywordtype">char</span> *<a class="code" href="structapr__vformatter__buff__t.html#ab4884e759f4285c72df93e0d63022675">endpos</a>;
<a name="l00069"></a>00069 };
<a name="l00070"></a>00070 <span class="comment"></span>
<a name="l00071"></a>00071 <span class="comment">/**</span>
<a name="l00072"></a>00072 <span class="comment"> * return the final element of the pathname</span>
<a name="l00073"></a>00073 <span class="comment"> * @param pathname The path to get the final element of</span>
<a name="l00074"></a>00074 <span class="comment"> * @return the final element of the path</span>
<a name="l00075"></a>00075 <span class="comment"> * @remark</span>
<a name="l00076"></a>00076 <span class="comment"> * &lt;PRE&gt;</span>
<a name="l00077"></a>00077 <span class="comment"> * For example:</span>
<a name="l00078"></a>00078 <span class="comment"> *                 &quot;/foo/bar/gum&quot;    -&gt; &quot;gum&quot;</span>
<a name="l00079"></a>00079 <span class="comment"> *                 &quot;/foo/bar/gum/&quot;   -&gt; &quot;&quot;</span>
<a name="l00080"></a>00080 <span class="comment"> *                 &quot;gum&quot;             -&gt; &quot;gum&quot;</span>
<a name="l00081"></a>00081 <span class="comment"> *                 &quot;bs\\path\\stuff&quot; -&gt; &quot;stuff&quot;</span>
<a name="l00082"></a>00082 <span class="comment"> * &lt;/PRE&gt;</span>
<a name="l00083"></a>00083 <span class="comment"> */</span>
<a name="l00084"></a>00084 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *) <a class="code" href="group__apr__lib.html#ga241e929df23aede34eb3f2651cf56bc9">apr_filepath_name_get</a>(const <span class="keywordtype">char</span> *pathname);
<a name="l00085"></a>00085 <span class="comment"></span>
<a name="l00086"></a>00086 <span class="comment">/**</span>
<a name="l00087"></a>00087 <span class="comment"> * apr_killpg</span>
<a name="l00088"></a>00088 <span class="comment"> * Small utility macros to make things easier to read.  Not usually a</span>
<a name="l00089"></a>00089 <span class="comment"> * goal, to be sure..</span>
<a name="l00090"></a>00090 <span class="comment"> */</span>
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span><span class="preprocessor">#define apr_killpg(x, y)</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span><span class="preprocessor">#else </span><span class="comment">/* WIN32 */</span>
<a name="l00095"></a>00095 <span class="preprocessor">#ifdef NO_KILLPG</span>
<a name="l00096"></a>00096 <span class="preprocessor"></span><span class="preprocessor">#define apr_killpg(x, y)        (kill (-(x), (y)))</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span><span class="preprocessor">#else </span><span class="comment">/* NO_KILLPG */</span>
<a name="l00098"></a><a class="code" href="group__apr__lib.html#gaa3b0264aadbd9f8d805252fb1ca1cd0e">00098</a> <span class="preprocessor">#define apr_killpg(x, y)        (killpg ((x), (y)))</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* NO_KILLPG */</span>
<a name="l00100"></a>00100 <span class="preprocessor">#endif </span><span class="comment">/* WIN32 */</span>
<a name="l00101"></a>00101 <span class="comment"></span>
<a name="l00102"></a>00102 <span class="comment">/**</span>
<a name="l00103"></a>00103 <span class="comment"> * apr_vformatter() is a generic printf-style formatting routine</span>
<a name="l00104"></a>00104 <span class="comment"> * with some extensions.</span>
<a name="l00105"></a>00105 <span class="comment"> * @param flush_func The function to call when the buffer is full</span>
<a name="l00106"></a>00106 <span class="comment"> * @param c The buffer to write to</span>
<a name="l00107"></a>00107 <span class="comment"> * @param fmt The format string</span>
<a name="l00108"></a>00108 <span class="comment"> * @param ap The arguments to use to fill out the format string.</span>
<a name="l00109"></a>00109 <span class="comment"> *</span>
<a name="l00110"></a>00110 <span class="comment"> * @remark</span>
<a name="l00111"></a>00111 <span class="comment"> * &lt;PRE&gt;</span>
<a name="l00112"></a>00112 <span class="comment"> * The extensions are:</span>
<a name="l00113"></a>00113 <span class="comment"> *</span>
<a name="l00114"></a>00114 <span class="comment"> * %%pA takes a struct in_addr *, and prints it as a.b.c.d</span>
<a name="l00115"></a>00115 <span class="comment"> * %%pI takes an apr_sockaddr_t * and prints it as a.b.c.d:port or</span>
<a name="l00116"></a>00116 <span class="comment"> *      [ipv6-address]:port</span>
<a name="l00117"></a>00117 <span class="comment"> * %%pT takes an apr_os_thread_t * and prints it in decimal</span>
<a name="l00118"></a>00118 <span class="comment"> *      (&#39;0&#39; is printed if !APR_HAS_THREADS)</span>
<a name="l00119"></a>00119 <span class="comment"> * %%pt takes an apr_os_thread_t * and prints it in hexadecimal</span>
<a name="l00120"></a>00120 <span class="comment"> *      (&#39;0&#39; is printed if !APR_HAS_THREADS)</span>
<a name="l00121"></a>00121 <span class="comment"> * %%pm takes an apr_status_t * and prints the appropriate error</span>
<a name="l00122"></a>00122 <span class="comment"> *      string (from apr_strerror) corresponding to that error code.</span>
<a name="l00123"></a>00123 <span class="comment"> * %%pp takes a void * and outputs it in hex</span>
<a name="l00124"></a>00124 <span class="comment"> * %%pB takes a apr_uint32_t * as bytes and outputs it&#39;s apr_strfsize</span>
<a name="l00125"></a>00125 <span class="comment"> * %%pF same as above, but takes a apr_off_t *</span>
<a name="l00126"></a>00126 <span class="comment"> * %%pS same as above, but takes a apr_size_t *</span>
<a name="l00127"></a>00127 <span class="comment"> *</span>
<a name="l00128"></a>00128 <span class="comment"> * %%pt is only available from APR 1.2.0 onwards.</span>
<a name="l00129"></a>00129 <span class="comment"> * %%pm, %%pB, %%pF and %%pS are only available from APR 1.3.0 onwards.</span>
<a name="l00130"></a>00130 <span class="comment"> * </span>
<a name="l00131"></a>00131 <span class="comment"> * The %%p hacks are to force gcc&#39;s printf warning code to skip</span>
<a name="l00132"></a>00132 <span class="comment"> * over a pointer argument without complaining.  This does</span>
<a name="l00133"></a>00133 <span class="comment"> * mean that the ANSI-style %%p (output a void * in hex format) won&#39;t</span>
<a name="l00134"></a>00134 <span class="comment"> * work as expected at all, but that seems to be a fair trade-off</span>
<a name="l00135"></a>00135 <span class="comment"> * for the increased robustness of having printf-warnings work.</span>
<a name="l00136"></a>00136 <span class="comment"> *</span>
<a name="l00137"></a>00137 <span class="comment"> * Additionally, apr_vformatter allows for arbitrary output methods</span>
<a name="l00138"></a>00138 <span class="comment"> * using the apr_vformatter_buff and flush_func.</span>
<a name="l00139"></a>00139 <span class="comment"> *</span>
<a name="l00140"></a>00140 <span class="comment"> * The apr_vformatter_buff has two elements curpos and endpos.</span>
<a name="l00141"></a>00141 <span class="comment"> * curpos is where apr_vformatter will write the next byte of output.</span>
<a name="l00142"></a>00142 <span class="comment"> * It proceeds writing output to curpos, and updating curpos, until</span>
<a name="l00143"></a>00143 <span class="comment"> * either the end of output is reached, or curpos == endpos (i.e. the</span>
<a name="l00144"></a>00144 <span class="comment"> * buffer is full).</span>
<a name="l00145"></a>00145 <span class="comment"> *</span>
<a name="l00146"></a>00146 <span class="comment"> * If the end of output is reached, apr_vformatter returns the</span>
<a name="l00147"></a>00147 <span class="comment"> * number of bytes written.</span>
<a name="l00148"></a>00148 <span class="comment"> *</span>
<a name="l00149"></a>00149 <span class="comment"> * When the buffer is full, the flush_func is called.  The flush_func</span>
<a name="l00150"></a>00150 <span class="comment"> * can return -1 to indicate that no further output should be attempted,</span>
<a name="l00151"></a>00151 <span class="comment"> * and apr_vformatter will return immediately with -1.  Otherwise</span>
<a name="l00152"></a>00152 <span class="comment"> * the flush_func should flush the buffer in whatever manner is</span>
<a name="l00153"></a>00153 <span class="comment"> * appropriate, re apr_pool_t nitialize curpos and endpos, and return 0.</span>
<a name="l00154"></a>00154 <span class="comment"> *</span>
<a name="l00155"></a>00155 <span class="comment"> * Note that flush_func is only invoked as a result of attempting to</span>
<a name="l00156"></a>00156 <span class="comment"> * write another byte at curpos when curpos &gt;= endpos.  So for</span>
<a name="l00157"></a>00157 <span class="comment"> * example, it&#39;s possible when the output exactly matches the buffer</span>
<a name="l00158"></a>00158 <span class="comment"> * space available that curpos == endpos will be true when</span>
<a name="l00159"></a>00159 <span class="comment"> * apr_vformatter returns.</span>
<a name="l00160"></a>00160 <span class="comment"> *</span>
<a name="l00161"></a>00161 <span class="comment"> * apr_vformatter does not call out to any other code, it is entirely</span>
<a name="l00162"></a>00162 <span class="comment"> * self-contained.  This allows the callers to do things which are</span>
<a name="l00163"></a>00163 <span class="comment"> * otherwise &quot;unsafe&quot;.  For example, apr_psprintf uses the &quot;scratch&quot;</span>
<a name="l00164"></a>00164 <span class="comment"> * space at the unallocated end of a block, and doesn&#39;t actually</span>
<a name="l00165"></a>00165 <span class="comment"> * complete the allocation until apr_vformatter returns.  apr_psprintf</span>
<a name="l00166"></a>00166 <span class="comment"> * would be completely broken if apr_vformatter were to call anything</span>
<a name="l00167"></a>00167 <span class="comment"> * that used this same pool.  Similarly http_bprintf() uses the &quot;scratch&quot;</span>
<a name="l00168"></a>00168 <span class="comment"> * space at the end of its output buffer, and doesn&#39;t actually note</span>
<a name="l00169"></a>00169 <span class="comment"> * that the space is in use until it either has to flush the buffer</span>
<a name="l00170"></a>00170 <span class="comment"> * or until apr_vformatter returns.</span>
<a name="l00171"></a>00171 <span class="comment"> * &lt;/PRE&gt;</span>
<a name="l00172"></a>00172 <span class="comment"> */</span>
<a name="l00173"></a>00173 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<span class="keywordtype">int</span>) <a class="code" href="group__apr__lib.html#gad2cd3594aeaafd45931d1034965f48c1">apr_vformatter</a>(<span class="keywordtype">int</span> (*flush_func)(<a class="code" href="structapr__vformatter__buff__t.html">apr_vformatter_buff_t</a> *b),
<a name="l00174"></a>00174                                 <a class="code" href="structapr__vformatter__buff__t.html">apr_vformatter_buff_t</a> *c, const <span class="keywordtype">char</span> *fmt,
<a name="l00175"></a>00175                                 va_list ap);
<a name="l00176"></a>00176 <span class="comment"></span>
<a name="l00177"></a>00177 <span class="comment">/**</span>
<a name="l00178"></a>00178 <span class="comment"> * Display a prompt and read in the password from stdin.</span>
<a name="l00179"></a>00179 <span class="comment"> * @param prompt The prompt to display</span>
<a name="l00180"></a>00180 <span class="comment"> * @param pwbuf Buffer to store the password</span>
<a name="l00181"></a>00181 <span class="comment"> * @param bufsize The length of the password buffer.</span>
<a name="l00182"></a>00182 <span class="comment"> * @remark If the password entered must be truncated to fit in</span>
<a name="l00183"></a>00183 <span class="comment"> * the provided buffer, APR_ENAMETOOLONG will be returned.</span>
<a name="l00184"></a>00184 <span class="comment"> * Note that the bufsize paramater is passed by reference for no</span>
<a name="l00185"></a>00185 <span class="comment"> * reason; its value will never be modified by the apr_password_get()</span>
<a name="l00186"></a>00186 <span class="comment"> * function.</span>
<a name="l00187"></a>00187 <span class="comment"> */</span>
<a name="l00188"></a>00188 <a class="code" href="group__apr__platform.html#gad7b91b811a172bfa802603c2fb688f98">APR_DECLARE</a>(<a class="code" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>) <a class="code" href="group__apr__lib.html#ga377e0677598745769ec6f80fecf8f859">apr_password_get</a>(const <span class="keywordtype">char</span> *prompt, <span class="keywordtype">char</span> *pwbuf, 
<a name="l00189"></a>00189                                            apr_size_t *bufsize);
<a name="l00190"></a>00190 <span class="comment"></span>
<a name="l00191"></a>00191 <span class="comment">/** @} */</span>
<a name="l00192"></a>00192 <span class="comment"></span>
<a name="l00193"></a>00193 <span class="comment">/**</span>
<a name="l00194"></a>00194 <span class="comment"> * @defgroup apr_ctype ctype functions</span>
<a name="l00195"></a>00195 <span class="comment"> * These macros allow correct support of 8-bit characters on systems which</span>
<a name="l00196"></a>00196 <span class="comment"> * support 8-bit characters.  Pretty dumb how the cast is required, but</span>
<a name="l00197"></a>00197 <span class="comment"> * that&#39;s legacy libc for ya.  These new macros do not support EOF like</span>
<a name="l00198"></a>00198 <span class="comment"> * the standard macros do.  Tough.</span>
<a name="l00199"></a>00199 <span class="comment"> * @{</span>
<a name="l00200"></a>00200 <span class="comment"> */</span><span class="comment"></span>
<a name="l00201"></a>00201 <span class="comment">/** @see isalnum */</span>
<a name="l00202"></a><a class="code" href="group__apr__ctype.html#ga4fa78e6e7272dae64731768a17a2e003">00202</a> <span class="preprocessor">#define apr_isalnum(c) (isalnum(((unsigned char)(c))))</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span><span class="comment">/** @see isalpha */</span>
<a name="l00204"></a><a class="code" href="group__apr__ctype.html#ga9ecd5b94a7816591afd68040b0624327">00204</a> <span class="preprocessor">#define apr_isalpha(c) (isalpha(((unsigned char)(c))))</span>
<a name="l00205"></a>00205 <span class="preprocessor"></span><span class="comment">/** @see iscntrl */</span>
<a name="l00206"></a><a class="code" href="group__apr__ctype.html#gacc8b4597be99c895ea042e8088ee94ab">00206</a> <span class="preprocessor">#define apr_iscntrl(c) (iscntrl(((unsigned char)(c))))</span>
<a name="l00207"></a>00207 <span class="preprocessor"></span><span class="comment">/** @see isdigit */</span>
<a name="l00208"></a><a class="code" href="group__apr__ctype.html#ga8c453b1d66015b357c3d3a3ddb7d97d7">00208</a> <span class="preprocessor">#define apr_isdigit(c) (isdigit(((unsigned char)(c))))</span>
<a name="l00209"></a>00209 <span class="preprocessor"></span><span class="comment">/** @see isgraph */</span>
<a name="l00210"></a><a class="code" href="group__apr__ctype.html#gad4fbfcf508e7771ca85e85e4ac9567c2">00210</a> <span class="preprocessor">#define apr_isgraph(c) (isgraph(((unsigned char)(c))))</span>
<a name="l00211"></a>00211 <span class="preprocessor"></span><span class="comment">/** @see islower*/</span>
<a name="l00212"></a><a class="code" href="group__apr__ctype.html#gaff5eeb2f6350095ce86cc2cd4b1d38ee">00212</a> <span class="preprocessor">#define apr_islower(c) (islower(((unsigned char)(c))))</span>
<a name="l00213"></a>00213 <span class="preprocessor"></span><span class="comment">/** @see isascii */</span>
<a name="l00214"></a>00214 <span class="preprocessor">#ifdef isascii</span>
<a name="l00215"></a>00215 <span class="preprocessor"></span><span class="preprocessor">#define apr_isascii(c) (isascii(((unsigned char)(c))))</span>
<a name="l00216"></a>00216 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00217"></a><a class="code" href="group__apr__ctype.html#gae7cab1b39d2e0fc14f343ec14e12565a">00217</a> <span class="preprocessor"></span><span class="preprocessor">#define apr_isascii(c) (((c) &amp; ~0x7f)==0)</span>
<a name="l00218"></a>00218 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00219"></a>00219 <span class="preprocessor"></span><span class="comment">/** @see isprint */</span>
<a name="l00220"></a><a class="code" href="group__apr__ctype.html#ga20da56fc8bbedc9f8a40d20c1cc58bac">00220</a> <span class="preprocessor">#define apr_isprint(c) (isprint(((unsigned char)(c))))</span>
<a name="l00221"></a>00221 <span class="preprocessor"></span><span class="comment">/** @see ispunct */</span>
<a name="l00222"></a><a class="code" href="group__apr__ctype.html#ga1db14e8d5f9891010c8bad08aa100674">00222</a> <span class="preprocessor">#define apr_ispunct(c) (ispunct(((unsigned char)(c))))</span>
<a name="l00223"></a>00223 <span class="preprocessor"></span><span class="comment">/** @see isspace */</span>
<a name="l00224"></a><a class="code" href="group__apr__ctype.html#ga23f4c7721923a0f0f444fd7fb196047a">00224</a> <span class="preprocessor">#define apr_isspace(c) (isspace(((unsigned char)(c))))</span>
<a name="l00225"></a>00225 <span class="preprocessor"></span><span class="comment">/** @see isupper */</span>
<a name="l00226"></a><a class="code" href="group__apr__ctype.html#ga362f53cc44aab662aaf04fa87e36035b">00226</a> <span class="preprocessor">#define apr_isupper(c) (isupper(((unsigned char)(c))))</span>
<a name="l00227"></a>00227 <span class="preprocessor"></span><span class="comment">/** @see isxdigit */</span>
<a name="l00228"></a><a class="code" href="group__apr__ctype.html#ga9d30f3c5d538c21c6d50565cda8654d0">00228</a> <span class="preprocessor">#define apr_isxdigit(c) (isxdigit(((unsigned char)(c))))</span>
<a name="l00229"></a>00229 <span class="preprocessor"></span><span class="comment">/** @see tolower */</span>
<a name="l00230"></a><a class="code" href="group__apr__ctype.html#gaa591f2a7eb578b1fb3ae9aeaab9eafaa">00230</a> <span class="preprocessor">#define apr_tolower(c) (tolower(((unsigned char)(c))))</span>
<a name="l00231"></a>00231 <span class="preprocessor"></span><span class="comment">/** @see toupper */</span>
<a name="l00232"></a><a class="code" href="group__apr__ctype.html#ga83d2a3217282784d24897658ad0717b7">00232</a> <span class="preprocessor">#define apr_toupper(c) (toupper(((unsigned char)(c))))</span>
<a name="l00233"></a>00233 <span class="preprocessor"></span><span class="comment"></span>
<a name="l00234"></a>00234 <span class="comment">/** @} */</span>
<a name="l00235"></a>00235 
<a name="l00236"></a>00236 <span class="preprocessor">#ifdef __cplusplus</span>
<a name="l00237"></a>00237 <span class="preprocessor"></span>}
<a name="l00238"></a>00238 <span class="preprocessor">#endif</span>
<a name="l00239"></a>00239 <span class="preprocessor"></span>
<a name="l00240"></a>00240 <span class="preprocessor">#endif  </span><span class="comment">/* ! APR_LIB_H */</span>
</pre></div></div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&nbsp;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&nbsp;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&nbsp;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&nbsp;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address style="text-align: right;"><small>Generated on Mon May 23 21:31:31 2011 for Apache Portable Runtime by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
