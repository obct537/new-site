<!-- This comment will put IE 6, 7 and 8 in quirks mode -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Apache Portable Runtime: Poll Routines</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.6.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <img id="MSearchSelect" src="search/search.png"
             onmouseover="return searchBox.OnSearchSelectShow()"
             onmouseout="return searchBox.OnSearchSelectHide()"
             alt=""/>
        <input type="text" id="MSearchField" value="Search" accesskey="S"
             onfocus="searchBox.OnSearchFieldFocus(true)" 
             onblur="searchBox.OnSearchFieldFocus(false)" 
             onkeyup="searchBox.OnSearchFieldChange(event)"/>
        <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
        </div>
      </li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>Poll Routines<br/>
<small>
[<a class="el" href="group___a_p_r.html">Apache Portability Runtime library</a>]</small>
</h1><table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Data Structures</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">union &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="unionapr__descriptor.html">apr_descriptor</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a></td></tr>
<tr><td colspan="2"><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga746222e6b858bc2fc77328d59f78e788">APR_POLLIN</a>&nbsp;&nbsp;&nbsp;0x001</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga196c38e1914077c4c9a0cf3ce87f1b9c">APR_POLLPRI</a>&nbsp;&nbsp;&nbsp;0x002</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga6fb703db1d11e2c5f66d8c6146e56053">APR_POLLOUT</a>&nbsp;&nbsp;&nbsp;0x004</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga6f5a72fd9cf3f5dcf174acce0b4b77ee">APR_POLLERR</a>&nbsp;&nbsp;&nbsp;0x010</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#gace76603c4fa4b56f8b5977ff1ceb6f3b">APR_POLLHUP</a>&nbsp;&nbsp;&nbsp;0x020</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga132da215e207d4685fb467cc64a73f1b">APR_POLLNVAL</a>&nbsp;&nbsp;&nbsp;0x040</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#gabdfaccfd394c847f692351dee2e5ef7f">APR_POLLSET_THREADSAFE</a>&nbsp;&nbsp;&nbsp;0x001</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga0febaf4378d2705bf1256b22fe8dfd24">APR_POLLSET_NOCOPY</a>&nbsp;&nbsp;&nbsp;0x002</td></tr>
<tr><td colspan="2"><h2>Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga0c89b184cbe2337e44207f1ad245129b">apr_pollfd_t</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#gad440412b52e12fcfddfdd5b1618359e5">apr_pollcb_cb_t</a> )(void *baton, <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> *descriptor)</td></tr>
<tr><td colspan="2"><h2>Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga0a8549d84c1721788b102a4cc8b4b0f0">apr_datatype_e</a> { <a class="el" href="group__apr__poll.html#gga0a8549d84c1721788b102a4cc8b4b0f0aeb85f43492052bf0788d31f6dd85a222">APR_NO_DESC</a>, 
<a class="el" href="group__apr__poll.html#gga0a8549d84c1721788b102a4cc8b4b0f0a3629c5b3166fde91792f2f913fbd72f0">APR_POLL_SOCKET</a>, 
<a class="el" href="group__apr__poll.html#gga0a8549d84c1721788b102a4cc8b4b0f0a8351d461bf66b706232962fd02e84202">APR_POLL_FILE</a>, 
<a class="el" href="group__apr__poll.html#gga0a8549d84c1721788b102a4cc8b4b0f0a413b387c7fe1ca7b096d46dfd9942fe5">APR_POLL_LASTDESC</a>
 }</td></tr>
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga4ca4056a19daee8fe94ddba100fe2326">apr_pollset_create</a> (<a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> **pollset, apr_uint32_t size, <a class="el" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *p, apr_uint32_t flags)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#gaa06c538d3fea9d860374043aff9450b2">apr_pollset_destroy</a> (<a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> *pollset)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga4ec50bf9a11c6b60927c51b81412f5b9">apr_pollset_add</a> (<a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> *pollset, const <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> *descriptor)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga3c99c06e142d6b6b789eeb6086122e3a">apr_pollset_remove</a> (<a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> *pollset, const <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> *descriptor)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga6b31d7b3a7b2d356370403dd2b79ecf3">apr_pollset_poll</a> (<a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> *pollset, <a class="el" href="group__apr__time.html#gaae2129185a395cc393f76fabf4f43e47">apr_interval_time_t</a> timeout, apr_int32_t *num, const <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> **descriptors)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#gad1d8a1ccd14952be6da5f272ca8dda76">apr_poll</a> (<a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> *aprset, apr_int32_t numsock, apr_int32_t *nsds, <a class="el" href="group__apr__time.html#gaae2129185a395cc393f76fabf4f43e47">apr_interval_time_t</a> timeout)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#gaa829380f21f7709a505fdf45650e6fa0">apr_pollcb_create</a> (<a class="el" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a> **pollcb, apr_uint32_t size, <a class="el" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *pool, apr_uint32_t flags)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga8fab02dfa803d911dae98656fac7a2c8">apr_pollcb_add</a> (<a class="el" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a> *pollcb, <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> *descriptor)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#gad004b778a14d6bcc4e48a10e5af729d8">apr_pollcb_remove</a> (<a class="el" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a> *pollcb, <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> *descriptor)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__apr__poll.html#ga11765d1b27e2f621a8dcd2c40f0e259c">apr_pollcb_poll</a> (<a class="el" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a> *pollcb, <a class="el" href="group__apr__time.html#gaae2129185a395cc393f76fabf4f43e47">apr_interval_time_t</a> timeout, <a class="el" href="group__apr__poll.html#gad440412b52e12fcfddfdd5b1618359e5">apr_pollcb_cb_t</a> func, void *baton)</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="ga6f5a72fd9cf3f5dcf174acce0b4b77ee"></a><!-- doxytag: member="apr_poll.h::APR_POLLERR" ref="ga6f5a72fd9cf3f5dcf174acce0b4b77ee" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define APR_POLLERR&nbsp;&nbsp;&nbsp;0x010</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Pending error </p>

</div>
</div>
<a class="anchor" id="gace76603c4fa4b56f8b5977ff1ceb6f3b"></a><!-- doxytag: member="apr_poll.h::APR_POLLHUP" ref="gace76603c4fa4b56f8b5977ff1ceb6f3b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define APR_POLLHUP&nbsp;&nbsp;&nbsp;0x020</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Hangup occurred </p>

</div>
</div>
<a class="anchor" id="ga746222e6b858bc2fc77328d59f78e788"></a><!-- doxytag: member="apr_poll.h::APR_POLLIN" ref="ga746222e6b858bc2fc77328d59f78e788" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define APR_POLLIN&nbsp;&nbsp;&nbsp;0x001</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Poll options Can read without blocking </p>

</div>
</div>
<a class="anchor" id="ga132da215e207d4685fb467cc64a73f1b"></a><!-- doxytag: member="apr_poll.h::APR_POLLNVAL" ref="ga132da215e207d4685fb467cc64a73f1b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define APR_POLLNVAL&nbsp;&nbsp;&nbsp;0x040</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Descriptior invalid </p>

</div>
</div>
<a class="anchor" id="ga6fb703db1d11e2c5f66d8c6146e56053"></a><!-- doxytag: member="apr_poll.h::APR_POLLOUT" ref="ga6fb703db1d11e2c5f66d8c6146e56053" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define APR_POLLOUT&nbsp;&nbsp;&nbsp;0x004</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Can write without blocking </p>

</div>
</div>
<a class="anchor" id="ga196c38e1914077c4c9a0cf3ce87f1b9c"></a><!-- doxytag: member="apr_poll.h::APR_POLLPRI" ref="ga196c38e1914077c4c9a0cf3ce87f1b9c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define APR_POLLPRI&nbsp;&nbsp;&nbsp;0x002</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Priority data available </p>

</div>
</div>
<a class="anchor" id="ga0febaf4378d2705bf1256b22fe8dfd24"></a><!-- doxytag: member="apr_poll.h::APR_POLLSET_NOCOPY" ref="ga0febaf4378d2705bf1256b22fe8dfd24" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define APR_POLLSET_NOCOPY&nbsp;&nbsp;&nbsp;0x002</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Descriptors passed to <a class="el" href="group__apr__poll.html#ga4ca4056a19daee8fe94ddba100fe2326">apr_pollset_create()</a> are not copied </p>

</div>
</div>
<a class="anchor" id="gabdfaccfd394c847f692351dee2e5ef7f"></a><!-- doxytag: member="apr_poll.h::APR_POLLSET_THREADSAFE" ref="gabdfaccfd394c847f692351dee2e5ef7f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define APR_POLLSET_THREADSAFE&nbsp;&nbsp;&nbsp;0x001</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Pollset Flags Adding or Removing a Descriptor is thread safe </p>

</div>
</div>
<hr/><h2>Typedef Documentation</h2>
<a class="anchor" id="gad440412b52e12fcfddfdd5b1618359e5"></a><!-- doxytag: member="apr_poll.h::apr_pollcb_cb_t" ref="gad440412b52e12fcfddfdd5b1618359e5" args=")(void *baton, apr_pollfd_t *descriptor)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a>(* <a class="el" href="group__apr__poll.html#gad440412b52e12fcfddfdd5b1618359e5">apr_pollcb_cb_t</a>)(void *baton, <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> *descriptor)</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Function prototype for pollcb handlers </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>baton</em>&nbsp;</td><td>Opaque baton passed into apr_pollcb_poll </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>descriptor</em>&nbsp;</td><td>Contains the notification for an active descriptor, the rtnevents member contains what events were triggered for this descriptor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gae382e39bdf0c5a02fca7da3944bece08"></a><!-- doxytag: member="apr_poll.h::apr_pollcb_t" ref="gae382e39bdf0c5a02fca7da3944bece08" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a> <a class="el" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Opaque structure used for pollset API </p>

</div>
</div>
<a class="anchor" id="ga0c89b184cbe2337e44207f1ad245129b"></a><!-- doxytag: member="apr_poll.h::apr_pollfd_t" ref="ga0c89b184cbe2337e44207f1ad245129b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga680da1f10ac5ef75efc503a9d15b8906"></a><!-- doxytag: member="apr_poll.h::apr_pollset_t" ref="ga680da1f10ac5ef75efc503a9d15b8906" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> <a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Opaque structure used for pollset API </p>

</div>
</div>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="ga0a8549d84c1721788b102a4cc8b4b0f0"></a><!-- doxytag: member="apr_poll.h::apr_datatype_e" ref="ga0a8549d84c1721788b102a4cc8b4b0f0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__apr__poll.html#ga0a8549d84c1721788b102a4cc8b4b0f0">apr_datatype_e</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Used in <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> to determine what the <a class="el" href="unionapr__descriptor.html">apr_descriptor</a> is </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="gga0a8549d84c1721788b102a4cc8b4b0f0aeb85f43492052bf0788d31f6dd85a222"></a><!-- doxytag: member="APR_NO_DESC" ref="gga0a8549d84c1721788b102a4cc8b4b0f0aeb85f43492052bf0788d31f6dd85a222" args="" -->APR_NO_DESC</em>&nbsp;</td><td>
<p>nothing here </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga0a8549d84c1721788b102a4cc8b4b0f0a3629c5b3166fde91792f2f913fbd72f0"></a><!-- doxytag: member="APR_POLL_SOCKET" ref="gga0a8549d84c1721788b102a4cc8b4b0f0a3629c5b3166fde91792f2f913fbd72f0" args="" -->APR_POLL_SOCKET</em>&nbsp;</td><td>
<p>descriptor refers to a socket </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga0a8549d84c1721788b102a4cc8b4b0f0a8351d461bf66b706232962fd02e84202"></a><!-- doxytag: member="APR_POLL_FILE" ref="gga0a8549d84c1721788b102a4cc8b4b0f0a8351d461bf66b706232962fd02e84202" args="" -->APR_POLL_FILE</em>&nbsp;</td><td>
<p>descriptor refers to a file </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga0a8549d84c1721788b102a4cc8b4b0f0a413b387c7fe1ca7b096d46dfd9942fe5"></a><!-- doxytag: member="APR_POLL_LASTDESC" ref="gga0a8549d84c1721788b102a4cc8b4b0f0a413b387c7fe1ca7b096d46dfd9942fe5" args="" -->APR_POLL_LASTDESC</em>&nbsp;</td><td>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.html#_deprecated000032">Deprecated:</a></b></dt><dd>descriptor is the last one in the list </dd></dl>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="gad1d8a1ccd14952be6da5f272ca8dda76"></a><!-- doxytag: member="apr_poll.h::apr_poll" ref="gad1d8a1ccd14952be6da5f272ca8dda76" args="(apr_pollfd_t *aprset, apr_int32_t numsock, apr_int32_t *nsds, apr_interval_time_t timeout)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> apr_poll </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> *&nbsp;</td>
          <td class="paramname"> <em>aprset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_int32_t&nbsp;</td>
          <td class="paramname"> <em>numsock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_int32_t *&nbsp;</td>
          <td class="paramname"> <em>nsds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__apr__time.html#gaae2129185a395cc393f76fabf4f43e47">apr_interval_time_t</a>&nbsp;</td>
          <td class="paramname"> <em>timeout</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Poll the descriptors in the poll structure </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>aprset</em>&nbsp;</td><td>The poll structure we will be using. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>numsock</em>&nbsp;</td><td>The number of descriptors we are polling </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nsds</em>&nbsp;</td><td>The number of descriptors signalled (output parameter) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>timeout</em>&nbsp;</td><td>The amount of time in microseconds to wait. This is a maximum, not a minimum. If a descriptor is signalled, we will wake up before this time. A negative number means wait until a descriptor is signalled. </td></tr>
  </table>
  </dd>
</dl>
<dl class="remark"><dt><b>Remarks:</b></dt><dd>The number of descriptors signalled is returned in the third argument. This is a blocking call, and it will not return until either a descriptor has been signalled, or the timeout has expired. </dd>
<dd>
The rtnevents field in the <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> array will only be filled- in if the return value is APR_SUCCESS. </dd></dl>

</div>
</div>
<a class="anchor" id="ga8fab02dfa803d911dae98656fac7a2c8"></a><!-- doxytag: member="apr_poll.h::apr_pollcb_add" ref="ga8fab02dfa803d911dae98656fac7a2c8" args="(apr_pollcb_t *pollcb, apr_pollfd_t *descriptor)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> apr_pollcb_add </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pollcb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> *&nbsp;</td>
          <td class="paramname"> <em>descriptor</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add a socket or file descriptor to a pollcb </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pollcb</em>&nbsp;</td><td>The pollcb to which to add the descriptor </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>descriptor</em>&nbsp;</td><td>The descriptor to add </td></tr>
  </table>
  </dd>
</dl>
<dl class="remark"><dt><b>Remarks:</b></dt><dd>If you set client_data in the descriptor, that value will be returned in the client_data field whenever this descriptor is signalled in <a class="el" href="group__apr__poll.html#ga11765d1b27e2f621a8dcd2c40f0e259c">apr_pollcb_poll()</a>. </dd>
<dd>
Unlike the apr_pollset API, the descriptor is not copied, and users must retain the memory used by descriptor, as the same pointer will be returned to them from apr_pollcb_poll. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa829380f21f7709a505fdf45650e6fa0"></a><!-- doxytag: member="apr_poll.h::apr_pollcb_create" ref="gaa829380f21f7709a505fdf45650e6fa0" args="(apr_pollcb_t **pollcb, apr_uint32_t size, apr_pool_t *pool, apr_uint32_t flags)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> apr_pollcb_create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a> **&nbsp;</td>
          <td class="paramname"> <em>pollcb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_uint32_t&nbsp;</td>
          <td class="paramname"> <em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pool</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_uint32_t&nbsp;</td>
          <td class="paramname"> <em>flags</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Setup a pollcb object </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pollcb</em>&nbsp;</td><td>The pointer in which to return the newly created object </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>The maximum number of descriptors that a single _poll can return. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>p</em>&nbsp;</td><td>The pool from which to allocate the pollcb </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>flags</em>&nbsp;</td><td>Optional flags to modify the operation of the pollcb.</td></tr>
  </table>
  </dd>
</dl>
<dl class="remark"><dt><b>Remarks:</b></dt><dd>Pollcb is only supported on some platforms; the <a class="el" href="group__apr__poll.html#gaa829380f21f7709a505fdf45650e6fa0">apr_pollcb_create()</a> call will fail with APR_ENOTIMPL on platforms where it is not supported. </dd></dl>

</div>
</div>
<a class="anchor" id="ga11765d1b27e2f621a8dcd2c40f0e259c"></a><!-- doxytag: member="apr_poll.h::apr_pollcb_poll" ref="ga11765d1b27e2f621a8dcd2c40f0e259c" args="(apr_pollcb_t *pollcb, apr_interval_time_t timeout, apr_pollcb_cb_t func, void *baton)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> apr_pollcb_poll </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pollcb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__apr__time.html#gaae2129185a395cc393f76fabf4f43e47">apr_interval_time_t</a>&nbsp;</td>
          <td class="paramname"> <em>timeout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__apr__poll.html#gad440412b52e12fcfddfdd5b1618359e5">apr_pollcb_cb_t</a>&nbsp;</td>
          <td class="paramname"> <em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>baton</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Block for activity on the descriptor(s) in a pollcb </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pollcb</em>&nbsp;</td><td>The pollcb to use </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>timeout</em>&nbsp;</td><td>The amount of time in microseconds to wait. This is a maximum, not a minimum. If a descriptor is signalled, we will wake up before this time. A negative number means wait until a descriptor is signalled. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>func</em>&nbsp;</td><td>Callback function to call for each active socket </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>baton</em>&nbsp;</td><td>Opaque baton passed to the callback function. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gad004b778a14d6bcc4e48a10e5af729d8"></a><!-- doxytag: member="apr_poll.h::apr_pollcb_remove" ref="gad004b778a14d6bcc4e48a10e5af729d8" args="(apr_pollcb_t *pollcb, apr_pollfd_t *descriptor)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> apr_pollcb_remove </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__apr__poll.html#gae382e39bdf0c5a02fca7da3944bece08">apr_pollcb_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pollcb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> *&nbsp;</td>
          <td class="paramname"> <em>descriptor</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Remove a descriptor from a pollcb </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pollcb</em>&nbsp;</td><td>The pollcb from which to remove the descriptor </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>descriptor</em>&nbsp;</td><td>The descriptor to remove </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga4ec50bf9a11c6b60927c51b81412f5b9"></a><!-- doxytag: member="apr_poll.h::apr_pollset_add" ref="ga4ec50bf9a11c6b60927c51b81412f5b9" args="(apr_pollset_t *pollset, const apr_pollfd_t *descriptor)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> apr_pollset_add </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pollset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> *&nbsp;</td>
          <td class="paramname"> <em>descriptor</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add a socket or file descriptor to a pollset </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pollset</em>&nbsp;</td><td>The pollset to which to add the descriptor </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>descriptor</em>&nbsp;</td><td>The descriptor to add </td></tr>
  </table>
  </dd>
</dl>
<dl class="remark"><dt><b>Remarks:</b></dt><dd>If you set client_data in the descriptor, that value will be returned in the client_data field whenever this descriptor is signalled in <a class="el" href="group__apr__poll.html#ga6b31d7b3a7b2d356370403dd2b79ecf3">apr_pollset_poll()</a>. </dd>
<dd>
If the pollset has been created with APR_POLLSET_THREADSAFE and thread T1 is blocked in a call to <a class="el" href="group__apr__poll.html#ga6b31d7b3a7b2d356370403dd2b79ecf3">apr_pollset_poll()</a> for this same pollset that is being modified via <a class="el" href="group__apr__poll.html#ga4ec50bf9a11c6b60927c51b81412f5b9">apr_pollset_add()</a> in thread T2, the currently executing <a class="el" href="group__apr__poll.html#ga6b31d7b3a7b2d356370403dd2b79ecf3">apr_pollset_poll()</a> call in T1 will either: (1) automatically include the newly added descriptor in the set of descriptors it is watching or (2) return immediately with APR_EINTR. Option (1) is recommended, but option (2) is allowed for implementations where option (1) is impossible or impractical. </dd></dl>

</div>
</div>
<a class="anchor" id="ga4ca4056a19daee8fe94ddba100fe2326"></a><!-- doxytag: member="apr_poll.h::apr_pollset_create" ref="ga4ca4056a19daee8fe94ddba100fe2326" args="(apr_pollset_t **pollset, apr_uint32_t size, apr_pool_t *p, apr_uint32_t flags)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> apr_pollset_create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> **&nbsp;</td>
          <td class="paramname"> <em>pollset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_uint32_t&nbsp;</td>
          <td class="paramname"> <em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__apr__pools.html#gaf137f28edcf9a086cd6bc36c20d7cdfb">apr_pool_t</a> *&nbsp;</td>
          <td class="paramname"> <em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_uint32_t&nbsp;</td>
          <td class="paramname"> <em>flags</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Setup a pollset object </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pollset</em>&nbsp;</td><td>The pointer in which to return the newly created object </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>The maximum number of descriptors that this pollset can hold </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>p</em>&nbsp;</td><td>The pool from which to allocate the pollset </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>flags</em>&nbsp;</td><td>Optional flags to modify the operation of the pollset.</td></tr>
  </table>
  </dd>
</dl>
<dl class="remark"><dt><b>Remarks:</b></dt><dd>If flags equals APR_POLLSET_THREADSAFE, then a pollset is created on which it is safe to make concurrent calls to <a class="el" href="group__apr__poll.html#ga4ec50bf9a11c6b60927c51b81412f5b9">apr_pollset_add()</a>, <a class="el" href="group__apr__poll.html#ga3c99c06e142d6b6b789eeb6086122e3a">apr_pollset_remove()</a> and <a class="el" href="group__apr__poll.html#ga6b31d7b3a7b2d356370403dd2b79ecf3">apr_pollset_poll()</a> from separate threads. This feature is only supported on some platforms; the <a class="el" href="group__apr__poll.html#ga4ca4056a19daee8fe94ddba100fe2326">apr_pollset_create()</a> call will fail with APR_ENOTIMPL on platforms where it is not supported. </dd></dl>

</div>
</div>
<a class="anchor" id="gaa06c538d3fea9d860374043aff9450b2"></a><!-- doxytag: member="apr_poll.h::apr_pollset_destroy" ref="gaa06c538d3fea9d860374043aff9450b2" args="(apr_pollset_t *pollset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> apr_pollset_destroy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pollset</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Destroy a pollset object </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pollset</em>&nbsp;</td><td>The pollset to destroy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga6b31d7b3a7b2d356370403dd2b79ecf3"></a><!-- doxytag: member="apr_poll.h::apr_pollset_poll" ref="ga6b31d7b3a7b2d356370403dd2b79ecf3" args="(apr_pollset_t *pollset, apr_interval_time_t timeout, apr_int32_t *num, const apr_pollfd_t **descriptors)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> apr_pollset_poll </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pollset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__apr__time.html#gaae2129185a395cc393f76fabf4f43e47">apr_interval_time_t</a>&nbsp;</td>
          <td class="paramname"> <em>timeout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">apr_int32_t *&nbsp;</td>
          <td class="paramname"> <em>num</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> **&nbsp;</td>
          <td class="paramname"> <em>descriptors</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Block for activity on the descriptor(s) in a pollset </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pollset</em>&nbsp;</td><td>The pollset to use </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>timeout</em>&nbsp;</td><td>The amount of time in microseconds to wait. This is a maximum, not a minimum. If a descriptor is signalled, we will wake up before this time. A negative number means wait until a descriptor is signalled. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>num</em>&nbsp;</td><td>Number of signalled descriptors (output parameter) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>descriptors</em>&nbsp;</td><td>Array of signalled descriptors (output parameter) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3c99c06e142d6b6b789eeb6086122e3a"></a><!-- doxytag: member="apr_poll.h::apr_pollset_remove" ref="ga3c99c06e142d6b6b789eeb6086122e3a" args="(apr_pollset_t *pollset, const apr_pollfd_t *descriptor)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__apr__errno.html#gaf76ee4543247e9fb3f3546203e590a6c">apr_status_t</a> apr_pollset_remove </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__apr__poll.html#ga680da1f10ac5ef75efc503a9d15b8906">apr_pollset_t</a> *&nbsp;</td>
          <td class="paramname"> <em>pollset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structapr__pollfd__t.html">apr_pollfd_t</a> *&nbsp;</td>
          <td class="paramname"> <em>descriptor</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Remove a descriptor from a pollset </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pollset</em>&nbsp;</td><td>The pollset from which to remove the descriptor </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>descriptor</em>&nbsp;</td><td>The descriptor to remove </td></tr>
  </table>
  </dd>
</dl>
<dl class="remark"><dt><b>Remarks:</b></dt><dd>If the pollset has been created with APR_POLLSET_THREADSAFE and thread T1 is blocked in a call to <a class="el" href="group__apr__poll.html#ga6b31d7b3a7b2d356370403dd2b79ecf3">apr_pollset_poll()</a> for this same pollset that is being modified via <a class="el" href="group__apr__poll.html#ga3c99c06e142d6b6b789eeb6086122e3a">apr_pollset_remove()</a> in thread T2, the currently executing <a class="el" href="group__apr__poll.html#ga6b31d7b3a7b2d356370403dd2b79ecf3">apr_pollset_poll()</a> call in T1 will either: (1) automatically exclude the newly added descriptor in the set of descriptors it is watching or (2) return immediately with APR_EINTR. Option (1) is recommended, but option (2) is allowed for implementations where option (1) is impossible or impractical. </dd></dl>

</div>
</div>
</div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Data Structures</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&nbsp;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&nbsp;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&nbsp;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&nbsp;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address style="text-align: right;"><small>Generated on Mon May 23 21:31:32 2011 for Apache Portable Runtime by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
